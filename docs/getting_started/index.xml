<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Getting Started on Heimdall</title><link>https://dadrus.github.io/docs/getting_started/</link><description>Recent content in Getting Started on Heimdall</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 25 Jun 2022 14:28:36 +0200</lastBuildDate><atom:link href="https://dadrus.github.io/docs/getting_started/index.xml" rel="self" type="application/rss+xml"/><item><title>Concepts</title><link>https://dadrus.github.io/docs/getting_started/concepts/</link><pubDate>Sat, 25 Jun 2022 14:29:17 +0200</pubDate><guid>https://dadrus.github.io/docs/getting_started/concepts/</guid><description>Everything you need to know.
Pipeline As described in the Welcome section and also shown in the diagram below, Heimdall authenticates and authorizes incoming HTTP requests, rejecting unauthenticated or unauthorized ones, as well as enriches the valid requests with further information and transforms resulting subject information to a format, required by the upstream services. This is done in upstream service specific rules, which define the required individual pipelines.
Figure 1.</description></item><item><title>Decision API Quickstart</title><link>https://dadrus.github.io/docs/getting_started/decision_api_quickstart/</link><pubDate>Wed, 08 Jun 2022 20:43:27 +0200</pubDate><guid>https://dadrus.github.io/docs/getting_started/decision_api_quickstart/</guid><description>This document describes a very simple use case in which you’ll see Heimdall’s Decision API in action.
Prerequisites Download Heimdall in your flavor.
Configure heimdall can be configured via environment variables, as well as using a configuration file. For simplicity reasons, we’ll use a configuration file here. So create a config file (config.yaml) with the following content:
log: level: info (1) pipeline: authenticators: - id: anonymous_authenticator (2) type: anonymous mutators: - id: create_jwt (3) type: jwt rules: default: (4) methods: - GET - POST execute: - authenticator: anonymous_authenticator - mutator: create_jwt 1 Here we are setting the log level to info to be able to see any log output.</description></item><item><title>Proxy Quickstart</title><link>https://dadrus.github.io/docs/getting_started/proxy_quickstart/</link><pubDate>Tue, 26 Jul 2022 09:40:27 +0200</pubDate><guid>https://dadrus.github.io/docs/getting_started/proxy_quickstart/</guid><description>This document describes a simple use case in which you’ll see Heimdall’s Proxy in action. Here, we’ll create a minimal but complete environment for running Heimdall with containers. Compared to the Decision API Quickstart, you’ll also define a very simple rule without which heimdall won’t know where to forward the requests to.
Prerequisites Docker and docker-compose
Configure Heimdall can be configured via environment variables, as well as using a configuration file.</description></item><item><title>Configuration Introduction</title><link>https://dadrus.github.io/docs/getting_started/configuration_introduction/</link><pubDate>Fri, 08 Jul 2022 09:16:36 +0200</pubDate><guid>https://dadrus.github.io/docs/getting_started/configuration_introduction/</guid><description>Configuration in Heimdall can refer to two different things:
The fully dynamic configuration of rules - the rule set
The static startup configuration
Elements in the static configuration set up the services, like decision api, which basically define the entrypoints, Heimdall will listen to, the observability capabilities, like logging, the supported pipeline mechanisms, the default rule, as well as the rule providers (these elements are not expected to change often).</description></item></channel></rss>
<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Rules on Heimdall</title><link>https://dadrus.github.io/docs/configuration/rules/</link><description>Recent content in Rules on Heimdall</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 09 Jun 2022 22:11:50 +0200</lastBuildDate><atom:link href="https://dadrus.github.io/docs/configuration/rules/index.xml" rel="self" type="application/rss+xml"/><item><title>Rules Overview</title><link>https://dadrus.github.io/docs/configuration/rules/overview/</link><pubDate>Thu, 09 Jun 2022 22:13:32 +0200</pubDate><guid>https://dadrus.github.io/docs/configuration/rules/overview/</guid><description>This section explains how rules can be defined and used in detail. Before diving onto this topic, we recommend to make yourself familiar with the principal architecture and components.
Core aspects of Heimdall are rules. These let Heimdall execute logic required by your upstream service to authenticate, authorize the incoming requests, enrich the information about the subject and mutate it according to the needs of the upstream service. However, to be able to define even a single rule, you must configure pipeline handlers, which you can then reference according to your, respectively the needs of your particular upstream service.</description></item><item><title>Default Rule</title><link>https://dadrus.github.io/docs/configuration/rules/default_rule/</link><pubDate>Thu, 09 Jun 2022 22:13:32 +0200</pubDate><guid>https://dadrus.github.io/docs/configuration/rules/default_rule/</guid><description>Heimdall lets you not only define upstream service specific rules, it does also support a definition of an optional default rule, which, if defined, kicks in, if no other rule matches. This way you can ensure secure defaults by simultaneously reducing the amount of work while defining upstream service API specific rules. That is, an upstream service API specific rule can reuse definitions from the default rule.
The configuration of the default rule can be done by making use of the default property and configuring the following options.</description></item><item><title>Rule Definition</title><link>https://dadrus.github.io/docs/configuration/rules/rule_configuration/</link><pubDate>Thu, 09 Jun 2022 22:13:32 +0200</pubDate><guid>https://dadrus.github.io/docs/configuration/rules/rule_configuration/</guid><description>Rules are the heart of heimdall. These allow execution of arbitrary logic, required by your upstream service. This section describes everything related to the configuration of a particular rule and how can these be combined to rule sets, which can then be loaded by a rule provider.
Rule Configuration A single rule consists of the following properties:
id: string (mandatory)
The unique identifier of a rule. It must be unique across all rules.</description></item><item><title>Rule Providers</title><link>https://dadrus.github.io/docs/configuration/rules/providers/</link><pubDate>Thu, 09 Jun 2022 22:13:54 +0200</pubDate><guid>https://dadrus.github.io/docs/configuration/rules/providers/</guid><description>Providers define the sources to load the rule sets from. These make Heimdall’s behavior dynamic. All providers, you want to enable for a Heimdall instance must be configured by within the providers section of Heimdall’s rules configuration.
Supported providers, including the corresponding configuration options are described below
Filesystem The filesystem provider allows loading of rule sets from a file system. The configuration of this provider goes into the file property.</description></item></channel></rss>
<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Pipeline Handler on Heimdall</title><link>https://dadrus.github.io/docs/configuration/pipeline/</link><description>Recent content in Pipeline Handler on Heimdall</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 09 Jun 2022 18:56:56 +0200</lastBuildDate><atom:link href="https://dadrus.github.io/docs/configuration/pipeline/index.xml" rel="self" type="application/rss+xml"/><item><title>Error Handlers</title><link>https://dadrus.github.io/docs/configuration/pipeline/error_handlers/</link><pubDate>Thu, 09 Jun 2022 18:57:29 +0200</pubDate><guid>https://dadrus.github.io/docs/configuration/pipeline/error_handlers/</guid><description>Error Handlers are responsible for execution of logic if any of the handlers authenticators, authorizers, hydrators or mutators fail. The error handlers range from a simple error response to the client which sent the request to sophisticated handlers supporting complex logic and redirects.
The following section describes the available error handler types in more detail.
Error Handler Types Default This error handler is always there and is executed if no other error handler is responsible for the handling of an error.</description></item><item><title>Mutators</title><link>https://dadrus.github.io/docs/configuration/pipeline/mutators/</link><pubDate>Thu, 09 Jun 2022 18:57:16 +0200</pubDate><guid>https://dadrus.github.io/docs/configuration/pipeline/mutators/</guid><description>Mutators finalize the successful execution of the pipeline and transform the available information about the subject into a format expected, respectively required by the upstream service. This ranges from adding a query parameter, to a structured JWT in a specific header.
The following section describes the available mutator types in more detail.
Mutator Types Noop As the name implies, this mutator does nothing. As mutators are the last step in Heimdall&amp;rsquo;s pipeline and transform available subject information into an object required by the upstream service, the usage of this mutator makes only sense in combination with the Noop Authenticator for public APIs.</description></item><item><title>Hydrators</title><link>https://dadrus.github.io/docs/configuration/pipeline/hydrators/</link><pubDate>Thu, 09 Jun 2022 18:57:10 +0200</pubDate><guid>https://dadrus.github.io/docs/configuration/pipeline/hydrators/</guid><description>Hydrators enrich the information about the subject obtained in the authenticator step with further information, required by either the endpoint of the upstream service itself or an authorizer step. This can be handy if the actual authentication system doesn&amp;rsquo;t have all information about the subject (which is usually the case in microservice architectures), or if dynamic information about the subject, like the current location based on the IP address, is required.</description></item><item><title>Authorizers</title><link>https://dadrus.github.io/docs/configuration/pipeline/authorizers/</link><pubDate>Thu, 09 Jun 2022 18:57:03 +0200</pubDate><guid>https://dadrus.github.io/docs/configuration/pipeline/authorizers/</guid><description>Authorizers ensure that the subject obtained via an authenticator step has the required permissions to submit the given HTTP request and thus to execute the corresponding logic in the upstream service. E.g. a specific endpoint of the upstream service might only be accessible to a &amp;ldquo;user&amp;rdquo; from the &amp;ldquo;admin&amp;rdquo; group, or to an HTTP request if a specific HTTP header is set.
The following section describes the available authorizer types in more detail.</description></item><item><title>Authenticators</title><link>https://dadrus.github.io/docs/configuration/pipeline/authenticators/</link><pubDate>Thu, 09 Jun 2022 18:56:56 +0200</pubDate><guid>https://dadrus.github.io/docs/configuration/pipeline/authenticators/</guid><description>Authenticators inspect HTTP requests, like the presence of a specific cookie, which represents the authentication object of the subject with the service and execute logic required to verify the authentication status and obtain information about that subject. A subject, could be a user who tries to use particular functionality of the upstream service, a machine (if you have machine-2-machine interaction), or something different. Authenticators ensure the subject has already been authenticated and the information available about it is valid.</description></item><item><title>Configuration Types</title><link>https://dadrus.github.io/docs/configuration/pipeline/configuration_types/</link><pubDate>Thu, 09 Jun 2022 18:56:56 +0200</pubDate><guid>https://dadrus.github.io/docs/configuration/pipeline/configuration_types/</guid><description>Assertions This type enables configuration of required token and claim assertions. Depending on the object type (JWT or introspection response), the assertions apply to different parts of such objects.
Name Type Mandatory Description scopes Scopes Matcher no Required scopes given to the client. audience string array no Required entries in the aud claim. Both cases, either as whitespace separated string, or a JSON array are considered. issuers string array yes Issuers to trust.</description></item></channel></rss>
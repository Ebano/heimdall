<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Docs on Heimdall</title><link>https://dadrus.github.io/docs/</link><description>Recent content in Docs on Heimdall</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 10 Jun 2022 17:30:17 +0200</lastBuildDate><atom:link href="https://dadrus.github.io/docs/index.xml" rel="self" type="application/rss+xml"/><item><title>About</title><link>https://dadrus.github.io/docs/introduction/about/</link><pubDate>Fri, 10 Jun 2022 17:30:17 +0200</pubDate><guid>https://dadrus.github.io/docs/introduction/about/</guid><description>Background The Typical deployment scenario diagram sketches how authentication and authorization is handled in most of today’s applications.
Figure 1. Typical deployment scenario On the one hand it allows the backend service to fully control the corresponding security requirements. On the other hand it has some limitations:
It works as long as there is just one authentication system.
When there are multiple backend services, which is typically the case in modern architectures, it requires each backend service to repetitively implement security related capabilities in its code, and related to this</description></item><item><title>Architecture</title><link>https://dadrus.github.io/docs/introduction/architecture/</link><pubDate>Fri, 10 Jun 2022 17:30:17 +0200</pubDate><guid>https://dadrus.github.io/docs/introduction/architecture/</guid><description>Pipeline As described in the About section and also shown in the diagram below, Heimdall authenticates and authorizes incoming HTTP requests, rejecting unauthenticated or unauthorized ones, as well as enriches the valid requests with further information and transforms resulting subject information to a format, required by the upstream services. This is done in upstream service specific rules, which define the required individual pipelines.
Figure 1. Request Pipeline Each rule defines which pipeline steps are required and executed in which order.</description></item><item><title>Traefik Proxy Integration</title><link>https://dadrus.github.io/docs/guides/traefik/</link><pubDate>Thu, 09 Jun 2022 18:59:49 +0200</pubDate><guid>https://dadrus.github.io/docs/guides/traefik/</guid><description>Traefik Proxy is a modern HTTP proxy and load balancer for microservices, heimdall can be integrated with via the ForwardAuth Middleware by making use of the Decision API. In such setup, traefik delegates authentication and authorization to heimdall. If heimdall answers with a 2XX code, traefik grants access and forwards the original request to the upstream service. Otherwise, the response from heimdall is returned to the client.
To achieve this,</description></item><item><title>CLI</title><link>https://dadrus.github.io/docs/operations/cli/</link><pubDate>Thu, 09 Jun 2022 18:57:50 +0200</pubDate><guid>https://dadrus.github.io/docs/operations/cli/</guid><description>Heimdall’s Command Line Interface
General heimdall [command] [flags] [arguments] Use heimdall help to get overview about available commands, respectively heimdall [command] help for help on any command.
Flag’s usage:
# set flag_argument to flag(s) heimdall [--flag=flag_argument] [-f [flag_argument]] E.g.
heimdall validate config -c config.yaml Commands completion
Generates the autocompletion script for the specified shell.
health
Calls heimdall’s healthcheck endpoint to verify the status of the deployment.
serve
Starts heimdall in the decision api, or the reverse proxy mode.</description></item><item><title>Install from Source</title><link>https://dadrus.github.io/docs/introduction/from_source/</link><pubDate>Thu, 09 Jun 2022 15:54:18 +0200</pubDate><guid>https://dadrus.github.io/docs/introduction/from_source/</guid><description>This document covers how to build heimdall from its source code as well as how to run heimdall using a minimum configuration. If you want to try out a working scenario, head over to Quick Start.
Prerequisites git
The Go programming language &amp;gt;= 1.18.1
Docker if you want to build a docker container (you don’t need Golang then)
Download Retrieve the latest copy of heimdall source code by cloning the git repository</description></item><item><title>Quickstart</title><link>https://dadrus.github.io/docs/introduction/quickstart/</link><pubDate>Wed, 08 Jun 2022 20:43:27 +0200</pubDate><guid>https://dadrus.github.io/docs/introduction/quickstart/</guid><description>This functionality is not available right now. What you can see below is just the idea.
In this quick-start document we’ll use a fully functional environment with heimdall using Docker. To make you understand, what you’re doing, the used configuration and all the steps will be explained. To gain more in-depth understanding about the available configuration options, please head over to Configuration.
Prerequisite git
Docker and docker-compose
Download Retrieve the latest copy of heimdall source code by cloning the git repository</description></item><item><title>Install</title><link>https://dadrus.github.io/docs/introduction/install/</link><pubDate>Wed, 08 Jun 2022 20:41:42 +0200</pubDate><guid>https://dadrus.github.io/docs/introduction/install/</guid><description>Heimdall runs on any operating system (FreeBSD, macOS, Linux, Windows, …​) and supports all major CPU platforms (ARM64, ARMv7, x86_64, x86, …​). The documents, referenced below will guide you through available installation and usage options.</description></item></channel></rss>
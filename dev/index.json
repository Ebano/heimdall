[{"categories":null,"content":" Background The diagram below sketches how authentication and authorization is handled in most of today’s applications.\nFigure 1. Typical deployment scenario On the one hand it allows the backend service to fully control the corresponding security requirements. On the other hand it has some limitations:\nIt works as long as there is just one authentication system.\nWhen there are multiple backend services, which is typically the case in modern architectures, it requires each backend service to repetitively implement security related capabilities in its code, and related to this\nit requires the backend services to communicate to further systems to e.g. get additional (context) information about the request and the subject (the user the request belongs to).\nAll this pretty often leads to the fact that up to 60% of the implementation efforts are spent on security topics and only the smaller rest on the actual business requirements. In addition, these limitations imply a lot of effort if there are changes to authentication and authorization requirements. So, what would you do if you have to use multiple authentication systems, e.g. for your customers and for your system admins, or backoffice stuff? What would you do, if e.g. our business would like to introduce a new service subscription model for its customers? What does this mean in sense of coordination-, implementation efforts and time-to-market?\nHeimdall’s Promise Heimdall addresses the aforesaid challenges companies and developers face, especially with a distributed or microservices architecture. Whether you’re building from scratch or migrating existing applications, heimdall can help and allows you to transparently add security capabilities related to authentication and authorization without adding them to your own code, but nevertheless, by completely retaining control. It can do so standalone, but also integrated into available infrastructure.\nHow It Works Heimdall intercepts all your application related network traffic, allowing a broad set of application aware authentication and authorization features based on the rules you define. This is done by routing each request through a rule specific pipeline as depicted in diagram below.\nFigure 2. Request Pipeline This pipeline ensures that, according to the needs of the particular backend service endpoint,\neach request is authenticated (so, you know who the subject of the request is),\nthe required contextual information about the subject is available (like e.g. current location based on IP, roles or groups membership information, etc.), so that\nthe subject can be and is authorized and\nthe information about the subject is transformed into a format, required by the backend service. So that irrespectively of the used authentication or authorization system, the subject information is always provided in the same stable representation.\nAnd all of that can be controlled by each and every backend service individually.\n","description":"","html_content":"\u003cdiv class=\"sect1\"\u003e\n\u003ch2 id=\"_background\"\u003eBackground\u003c/h2\u003e\n\u003cdiv class=\"sectionbody\"\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThe diagram below sketches how authentication and authorization is handled in most of today’s applications.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv id=\"_fig_typical_deployment_scenario\" class=\"imageblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cimg src=\"diag-6780f491052ccae7422bc1140120bb01.svg\" alt=\"Diagram\" width=\"1210\" height=\"504\"/\u003e\n\u003c/div\u003e\n\u003cdiv class=\"title\"\u003eFigure 1. Typical deployment scenario\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eOn the one hand it allows the backend service to fully control the corresponding security requirements. On the other hand it has some limitations:\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"ulist\"\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eIt works as long as there is just one authentication system.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eWhen there are multiple backend services, which is typically the case in modern architectures, it requires each backend service to repetitively implement security related capabilities in its code, and related to this\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eit requires the backend services to communicate to further systems to e.g. get additional (context) information about the request and the subject (the user the request belongs to).\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eAll this pretty often leads to the fact that up to 60% of the implementation efforts are spent on security topics and only the smaller rest on the actual business requirements. In addition, these limitations imply a lot of effort if there are changes to authentication and authorization requirements. So, what would you do if you have to use multiple authentication systems, e.g. for your customers and for your system admins, or backoffice stuff? What would you do, if e.g. our business would like to introduce a new service subscription model for its customers? What does this mean in sense of coordination-, implementation efforts and time-to-market?\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect1\"\u003e\n\u003ch2 id=\"_heimdalls_promise\"\u003eHeimdall’s Promise\u003c/h2\u003e\n\u003cdiv class=\"sectionbody\"\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eHeimdall addresses the aforesaid challenges companies and developers face, especially with a distributed or microservices architecture. Whether you’re building from scratch or migrating existing applications, heimdall can help and allows you to transparently add security capabilities related to authentication and authorization without adding them to your own code, but nevertheless, by completely retaining control. It can do so standalone, but also integrated into available infrastructure.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect1\"\u003e\n\u003ch2 id=\"_how_it_works\"\u003eHow It Works\u003c/h2\u003e\n\u003cdiv class=\"sectionbody\"\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eHeimdall intercepts all your application related network traffic, allowing a broad set of application aware authentication and authorization features based on the rules you define. This is done by routing each request through a rule specific pipeline as depicted in diagram below.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv id=\"_fig_heimdall_request_pipeline\" class=\"imageblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cimg src=\"diag-f1b9e14a29bb5f924f33ea831d66dcdf.svg\" alt=\"Diagram\" width=\"1290\" height=\"308\"/\u003e\n\u003c/div\u003e\n\u003cdiv class=\"title\"\u003eFigure 2. Request Pipeline\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThis pipeline ensures that, according to the needs of the particular backend service endpoint,\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"olist arabic\"\u003e\n\u003col class=\"arabic\"\u003e\n\u003cli\u003e\n\u003cp\u003eeach request is authenticated (so, you know who the subject of the request is),\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003ethe required contextual information about the subject is available (like e.g. current location based on IP, roles or groups membership information, etc.), so that\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003ethe subject can be and is authorized and\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003ethe information about the subject is transformed into a format, required by the backend service. So that irrespectively of the used authentication or authorization system, the subject information is always provided in the same stable representation.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eAnd all of that can be controlled by each and every backend service individually.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n","sections":[],"tags":null,"title":"Welcome","url":"/docs/welcome/"},{"categories":null,"content":" Everything you need to know.\nPipeline As described in the Welcome section and also shown in the diagram below, heimdall authenticates and authorizes incoming HTTP requests, rejecting unauthenticated or unauthorized ones, as well as enriches the valid requests with further contextual information and transforms resulting subject information into a format, required by the upstream services. This is done in upstream service specific rules, which assemble the required individual pipelines by making use of different mechanisms.\nFigure 1. Request Pipeline Each rule defines which mechanisms are required for its pipeline and executed in which order.\nIn general each rule contains\nan identifier - to uniquely identify a rule\nan url pattern - to match the incoming request against\na list of allowed HTTP methods for the matched requests\na regular pipeline, consisting of a list with\nauthentication mechanisms, so-called Authenticators, to be executed (if multiple are defined, they are executed as fallbacks) - step 1 in the figure above.\nHere, heimdall typically communicates with the actual authentication systems to get information about the authenticated subject, or to get key material to verify the authentication information provided in the request, or perform other activities related to authentication.\ncontextualization mechanisms, so-called Contextualizers, to be executed (if multiple are defined, they are executed in the order of their definition; can be mixed with authorization mechanisms) - step 2 in the figure above.\nHere, heimdall communicates with other systems as well, either to get further information about the subject, like specific attributes required by the upstream service and not available in the authentication information or the request itself. An example would be information about the request IP, like provided by AbuseIPDB, etc.\nauthorization mechanisms, so-called Authorizers, to be executed (if multiple are defined, they are executed in the order of their definition; can be mixed with contextualization mechanisms) - step 3 in the figure above.\nHere, heimdall performs authorization checks, either locally, or by communicating with yet again further systems, like Open Policy Agent, Ory Keto and alike.\nunification mechanisms, so-called Unifiers, to be executed (if multiple are defined, they are executed in the order of their definition) - step 4 in the figure above.\nThis step unifies the information collected so far about the subject and the request by transforming it into an object expected by the upstream service. That reaches from a simple custom header, carrying e.g. the id of the subject, to a JWT carried in the Authorization header.\nan error pipeline, consisting of error handler mechanisms (if multiple are defined, they are executed as fallbacks), which are executed if any of the regular pipeline mechanisms fail. These mechanisms range from a simple error response to the client (which sent the request), to sophisticated ones supporting complex logic and redirects.\nThe diagram below sketches the related execution logic\nUrl matches rule? - This is the first step executed by heimdall. The information about the scheme, host and path is taken either from the URL itself, or if present from the X-Forwarded-Proto, X-Forwarded-Host, X-Forwarded-Path, or X-Forwarded-Uri headers of the incoming request. The request is denied if there is no matching rule. Otherwise, the rule specific pipeline is executed.\nMethod allowed? - As soon as a rule matching the request is found, a verification is done whether the used HTTP method is allowed or not. The information about the HTTP method is either taken from the request itself or, if present from the X-Forwarded-Method.\nExecute regular pipeline - when the above steps succeed, the regular pipeline mechanisms defined in the matched rule are executed.\nForward request, respectively respond to the API gateway - when the above steps succeed, heimdall, depending on the operating mode, responds with, respectively forwards whatever was defined in the pipeline (usually this is a set of HTTP headers). Otherwise\nExecute error pipeline is executed if any of the mechanisms, defined in the regular pipeline fail. This again results in a response, this time however, based on the definition in the used error handler.\nOperating Modes To support different deployment scenarios, heimdall supports two operating modes:\nas a Reverse Proxy in front of your upstream API or web server, or\nas a Decision Service, integrated with your Reverse Proxy, or API Gateway (like Kong, NGNIX, Envoy, Traefik and much more)\nProxy Mode Figure 2. Proxy Deployment In this mode heimdall forwards requests to the upstream service if these satisfy the conditions defined in matched rules. Otherwise, heimdall returns an error to the client. If the execution of the rule was successful, it also forwards additional headers, specified in the rule to the upstream service.\nStarting heimdall in this mode happens via the serve proxy command. Head over to the description of CLI as well as Configuration options for more details.\nExample 1. Reverse Proxy Example Imagine following request hits heimdall\nGET /my-service/api HTTP/1.1 Host: heimdall:4455 Some payload And there is a rule, which allows anonymous requests and sets a header with subject id set to anonymous like this\nid: rule:my-service:anonymous-api-access match: url: \u0026lt;**\u0026gt;/my-service/api upstream: https://my-backend-service:8888 methods: - GET execute: - authenticator: anonymous-authn - unifier: id-header Then the request will be forwarded as follows:\nGET /my-service/api HTTP/1.1 Host: my-backend-service:8888 X-User-ID: anonymous Some payload Decision Mode Figure 3. Decision Deployment In this mode heimdall can be integrated with most probably all modern API gateways and reverse proxies as a so-called \u0026#34;authentication middleware\u0026#34;. Here the reverse proxy, respectively API gateway integrating with heimdall, will forward requests to heimdall by making use of its decision service endpoint for authentication and authorization purposes. As in the Reverse Proxy mode, heimdall will check if these requests match and satisfy the conditions defined in the available rules. If not, heimdall returns an error to its client (here API gateway/reverse proxy). If the rule execution was successful, it also responds to the API gateway/reverse proxy with 200 OK (can be overridden if required) and sets headers/cookies, specified in the matched rule, which are then forwarded to the upstream service.\nStarting heimdall in this mode happens via the serve decision command. Head over to the description of CLI as well as to Configuration options for more details.\nExample 2. Decision Service Example Imagine following request hits heimdall (sent to it by an API gateway)\nGET /my-service/api HTTP/1.1 Host: heimdall:4455 X-Forwarded-Host: my-backend-service Some payload And there is a rule, which allows anonymous requests and sets a header with subject id set to anonymous like this\nid: rule:my-service:anonymous-api-access match: url: http://my-backend-service/my-service/api methods: - GET execute: - authenticator: anonymous-authn - unifier: id-header Then heimdall will respond with:\nHTTP/1.1 200 OK X-User-ID: anonymous ","description":"","html_content":"\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eEverything you need to know.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect1\"\u003e\n\u003ch2 id=\"_pipeline\"\u003ePipeline\u003c/h2\u003e\n\u003cdiv class=\"sectionbody\"\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eAs described in the \u003ca href=\"/docs/welcome/\"\u003eWelcome\u003c/a\u003e section and also shown in the diagram below, heimdall authenticates and authorizes incoming HTTP requests, rejecting unauthenticated or unauthorized ones, as well as enriches the valid requests with further contextual information and transforms resulting subject information into a format, required by the upstream services. This is done in upstream service specific \u003ca href=\"/docs/configuration/rules/overview/\"\u003erules\u003c/a\u003e, which assemble the required individual pipelines by making use of different \u003ca href=\"/docs/configuration/rules/pipeline_mechanisms/overview/\"\u003emechanisms\u003c/a\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv id=\"_fig_heimdall_request_pipeline\" class=\"imageblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cimg src=\"diag-f1b9e14a29bb5f924f33ea831d66dcdf.svg\" alt=\"Diagram\" width=\"1290\" height=\"308\"/\u003e\n\u003c/div\u003e\n\u003cdiv class=\"title\"\u003eFigure 1. Request Pipeline\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eEach rule defines which mechanisms are required for its pipeline and executed in which order.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eIn general each rule contains\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"ulist\"\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003ean identifier - to uniquely identify a rule\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003ean url pattern - to match the incoming request against\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003ea list of allowed HTTP methods for the matched requests\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003ea regular pipeline, consisting of a list with\u003c/p\u003e\n\u003cdiv class=\"ulist\"\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eauthentication\u003c/strong\u003e mechanisms, so-called \u003ca href=\"/docs/configuration/rules/pipeline_mechanisms/authenticators/\"\u003eAuthenticators\u003c/a\u003e, to be executed (if multiple are defined, they are executed as fallbacks) - step 1 in the figure above.\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eHere, heimdall typically communicates with the actual authentication systems to get information about the authenticated subject, or to get key material to verify the authentication information provided in the request, or perform other activities related to authentication.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003econtextualization\u003c/strong\u003e mechanisms, so-called \u003ca href=\"/docs/configuration/rules/pipeline_mechanisms/contextualizers/\"\u003eContextualizers\u003c/a\u003e, to be executed (if multiple are defined, they are executed in the order of their definition; can be mixed with authorization mechanisms) - step 2 in the figure above.\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eHere, heimdall communicates with other systems as well, either to get further information about the subject, like specific attributes required by the upstream service and not available in the authentication information or the request itself. An example would be information about the request IP, like provided by \u003ca href=\"https://www.abuseipdb.com/\"\u003eAbuseIPDB\u003c/a\u003e, etc.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eauthorization\u003c/strong\u003e mechanisms, so-called \u003ca href=\"/docs/configuration/rules/pipeline_mechanisms/authorizers/\"\u003eAuthorizers\u003c/a\u003e, to be executed (if multiple are defined, they are executed in the order of their definition; can be mixed with contextualization mechanisms) - step 3 in the figure above.\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eHere, heimdall performs authorization checks, either locally, or by communicating with yet again further systems, like Open Policy Agent, Ory Keto and alike.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eunification\u003c/strong\u003e mechanisms, so-called \u003ca href=\"/docs/configuration/rules/pipeline_mechanisms/unifiers/\"\u003eUnifiers\u003c/a\u003e, to be executed (if multiple are defined, they are executed in the order of their definition) - step 4 in the figure above.\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThis step unifies the information collected so far about the subject and the request by transforming it into an object expected by the upstream service. That reaches from a simple custom header, carrying e.g. the id of the subject, to a JWT carried in the \u003ccode\u003eAuthorization\u003c/code\u003e header.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003ean error pipeline, consisting of \u003ca href=\"/docs/configuration/rules/pipeline_mechanisms/error_handlers/\"\u003eerror handler\u003c/a\u003e mechanisms (if multiple are defined, they are executed as fallbacks), which are executed if any of the regular pipeline mechanisms fail. These mechanisms range from a simple error response to the client (which sent the request), to sophisticated ones supporting complex logic and redirects.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThe diagram below sketches the related execution logic\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"imageblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cimg src=\"diag-39b652f619770708f844bf056830fbbe.svg\" alt=\"Diagram\" width=\"70%\"/\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"olist arabic\"\u003e\n\u003col class=\"arabic\"\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eUrl matches rule?\u003c/strong\u003e - This is the first step executed by heimdall. The information about the scheme, host and path is taken either from the URL itself, or if present from the \u003ccode\u003eX-Forwarded-Proto\u003c/code\u003e, \u003ccode\u003eX-Forwarded-Host\u003c/code\u003e, \u003ccode\u003eX-Forwarded-Path\u003c/code\u003e, or \u003ccode\u003eX-Forwarded-Uri\u003c/code\u003e headers of the incoming request. The request is denied if there is no matching rule. Otherwise, the rule specific pipeline is executed.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eMethod allowed?\u003c/strong\u003e - As soon as a rule matching the request is found, a verification is done whether the used HTTP method is allowed or not. The information about the HTTP method is either taken from the request itself or, if present from the \u003ccode\u003eX-Forwarded-Method\u003c/code\u003e.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eExecute regular pipeline\u003c/strong\u003e - when the above steps succeed, the regular pipeline mechanisms defined in the matched rule are executed.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eForward request, respectively respond to the API gateway\u003c/strong\u003e - when the above steps succeed, heimdall, depending on the \u003ca href=\"#_operating_modes\"\u003eoperating mode\u003c/a\u003e, responds with, respectively forwards whatever was defined in the pipeline (usually this is a set of HTTP headers). Otherwise\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eExecute error pipeline\u003c/strong\u003e is executed if any of the mechanisms, defined in the regular pipeline fail. This again results in a response, this time however, based on the definition in the used error handler.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect1\"\u003e\n\u003ch2 id=\"_operating_modes\"\u003eOperating Modes\u003c/h2\u003e\n\u003cdiv class=\"sectionbody\"\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eTo support different deployment scenarios, heimdall supports two operating modes:\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"ulist\"\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eas a \u003ca href=\"#_proxy_mode\"\u003eReverse Proxy\u003c/a\u003e in front of your upstream API or web server, or\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eas a \u003ca href=\"#_decision_mode\"\u003eDecision Service\u003c/a\u003e, integrated with your Reverse Proxy, or API Gateway (like \u003ca href=\"https://konghq.com/\"\u003eKong\u003c/a\u003e, \u003ca href=\"https://nginx.org\"\u003eNGNIX\u003c/a\u003e, \u003ca href=\"https://www.envoyproxy.io/\"\u003eEnvoy\u003c/a\u003e, \u003ca href=\"https://traefik.io/\"\u003eTraefik\u003c/a\u003e and much more)\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect2\"\u003e\n\u003ch3 id=\"_proxy_mode\"\u003eProxy Mode\u003c/h3\u003e\n\u003cdiv id=\"_fig_heimdall_proxy_deployment\" class=\"imageblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cimg src=\"diag-2552f7950a6d0b66ae0af3b9470186bf.svg\" alt=\"Diagram\" width=\"1080\" height=\"392\"/\u003e\n\u003c/div\u003e\n\u003cdiv class=\"title\"\u003eFigure 2. Proxy Deployment\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eIn this mode heimdall forwards requests to the upstream service if these satisfy the conditions defined in matched rules. Otherwise, heimdall returns an error to the client. If the execution of the rule was successful, it also forwards additional headers, specified in the rule to the upstream service.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eStarting heimdall in this mode happens via the \u003ccode\u003eserve proxy\u003c/code\u003e command. Head over to the description of \u003ca href=\"/docs/operations/cli/\"\u003eCLI\u003c/a\u003e as well as \u003ca href=\"/docs/configuration/services/proxy/\"\u003eConfiguration\u003c/a\u003e options for more details.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"exampleblock\"\u003e\n\u003cdiv class=\"title\"\u003eExample 1. Reverse Proxy Example\u003c/div\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eImagine following request hits heimdall\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"bash\"\u003eGET /my-service/api HTTP/1.1\nHost: heimdall:4455\n\nSome payload\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eAnd there is a rule, which allows anonymous requests and sets a header with subject id set to \u003ccode\u003eanonymous\u003c/code\u003e like this\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"yaml\"\u003e\u003cspan style=\"color: #a6e22e\"\u003eid\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003erule:my-service:anonymous-api-access\u003c/span\u003e\n\u003cspan style=\"color: #a6e22e\"\u003ematch\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003eurl\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e\u0026lt;**\u0026gt;/my-service/api\u003c/span\u003e\n\u003cspan style=\"color: #a6e22e\"\u003eupstream\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ehttps://my-backend-service:8888\u003c/span\u003e\n\u003cspan style=\"color: #a6e22e\"\u003emethods\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n  \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eGET\u003c/span\u003e\n\u003cspan style=\"color: #a6e22e\"\u003eexecute\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n  \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003eauthenticator\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eanonymous-authn\u003c/span\u003e\n  \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003eunifier\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eid-header\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThen the request will be forwarded as follows:\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"bash\"\u003eGET /my-service/api HTTP/1.1\nHost: my-backend-service:8888\nX-User-ID: anonymous\n\nSome payload\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect2\"\u003e\n\u003ch3 id=\"_decision_mode\"\u003eDecision Mode\u003c/h3\u003e\n\u003cdiv id=\"_fig_heimdall_decision_deployment\" class=\"imageblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cimg src=\"diag-522a74a859dfbc992b038afdc1344a3c.svg\" alt=\"Diagram\" width=\"1080\" height=\"560\"/\u003e\n\u003c/div\u003e\n\u003cdiv class=\"title\"\u003eFigure 3. Decision Deployment\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eIn this mode heimdall can be integrated with most probably all modern API gateways and reverse proxies as a so-called \u0026#34;authentication middleware\u0026#34;. Here the reverse proxy, respectively API gateway integrating with heimdall, will forward requests to heimdall by making use of its decision service endpoint for authentication and authorization purposes. As in the \u003ca href=\"#_proxy_mode\"\u003eReverse Proxy\u003c/a\u003e mode, heimdall will check if these requests match and satisfy the conditions defined in the available rules. If not, heimdall returns an error to its client (here API gateway/reverse proxy). If the rule execution was successful, it also responds to the API gateway/reverse proxy with \u003ccode\u003e200 OK\u003c/code\u003e (can be overridden if required) and sets headers/cookies, specified in the matched rule, which are then forwarded to the upstream service.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eStarting heimdall in this mode happens via the \u003ccode\u003eserve decision\u003c/code\u003e command. Head over to the description of \u003ca href=\"/docs/operations/cli/\"\u003eCLI\u003c/a\u003e as well as to \u003ca href=\"/docs/configuration/services/decision/\"\u003eConfiguration\u003c/a\u003e options for more details.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"exampleblock\"\u003e\n\u003cdiv class=\"title\"\u003eExample 2. Decision Service Example\u003c/div\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eImagine following request hits heimdall (sent to it by an API gateway)\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"bash\"\u003eGET /my-service/api HTTP/1.1\nHost: heimdall:4455\nX-Forwarded-Host: my-backend-service\n\nSome payload\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eAnd there is a rule, which allows anonymous requests and sets a header with subject id set to \u003ccode\u003eanonymous\u003c/code\u003e like this\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"yaml\"\u003e\u003cspan style=\"color: #a6e22e\"\u003eid\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003erule:my-service:anonymous-api-access\u003c/span\u003e\n\u003cspan style=\"color: #a6e22e\"\u003ematch\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003eurl\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ehttp://my-backend-service/my-service/api\u003c/span\u003e\n\u003cspan style=\"color: #a6e22e\"\u003emethods\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n  \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eGET\u003c/span\u003e\n\u003cspan style=\"color: #a6e22e\"\u003eexecute\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n  \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003eauthenticator\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eanonymous-authn\u003c/span\u003e\n  \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003eunifier\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eid-header\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThen heimdall will respond with:\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"bash\"\u003eHTTP/1.1 200 OK\nX-User-ID: anonymous\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n","sections":["Getting Started"],"tags":null,"title":"Concepts","url":"/docs/getting_started/concepts/"},{"categories":null,"content":" This document describes a very simple use case in which you’ll see heimdall’s Decision service in action.\nPrerequisites Download Heimdall in your flavor.\nDocker (optionally) and\ndocker-compose (optionally)\nConfigure heimdall can be configured via environment variables, as well as using a configuration file. For simplicity reasons, we’ll use a configuration file here. So create a config file named config.yaml with the following content:\nlog: level: info (1) serve: decision: trusted_proxies: (2) - 0.0.0.0/0 rules: mechanisms: authenticators: (3) - id: do_nothing type: noop - id: anon type: anonymous - id: reject_requests type: unauthorized unifiers: (4) - id: do_nothing type: noop - id: create_jwt type: jwt default: (5) methods: - GET - POST execute: - authenticator: reject_requests - unifier: create_jwt providers: file_system: (6) src: /heimdall/conf/rules.yaml watch: true 1 Here we are setting the log level to info to be able to see any log output. By default, heimdall logs on error log level. 2 Configures heimdall’s decision service to trust requests from all sources. This allows usage of X-Forwarded-* headers. This configuration is only required if you want to try out the docker compose example from below. 3 Configures a couple of authenticators - the noop authenticator, which does nothing, the anonymous authenticator, which treats every request as anonymous (creates a subject with its id set to anonymous) and the unauthorized authenticator, which rejects every request with 401 Unauthorized HTTP code. 4 Configured a couple of unifiers - the noop unifier, which does nothing and the jwt` unifier, which transforms the information about the subject into a JWT. 5 Configures the default rule, which will obviously reject every request. 6 Configures a file_system provider, which allows heimdall loading rules from the local filesystem; here from the /heimdall/conf/rule.yaml file. With that configuration and without any additional rules, heimdall would reject all requests with 401 Unauthorized. But it has a file_system provider configured, which makes heimdall expect the referenced rules file already on startup. To make it more usable, create a rules.yaml file with the following content:\n- id: rule1 (1) match: url: http://\u0026lt;**\u0026gt;/public execute: - authenticator: do_nothing - unifier: do_nothing - id: rule2 (2) match: url: http://\u0026lt;**\u0026gt;/anonymous execute: - authenticator: anon This file contains two rules:\n1 This rule should match the http://\u0026lt;**\u0026gt;/public url and accept every request without performing any authentication and unification. 2 This rule should match the http://\u0026lt;**\u0026gt;/anonymous url. It uses the anon authenticator from our mechanisms definitions and since it does not specify a unifier, the unifier from the default rule create_jwt is used. Run Standalone Run heimdall specifying the configuration file from above\nIf you’re using a binary, put the rules.yaml file into the /heimdall/conf directory (as heimdall will look the rules.yaml file in it according to our configuration from above) just execute\n$ ./heimdall serve decision -c config.yaml The above command will start heimdall in a decision operation mode. By default, the service will be served on port 4456.\nOtherwise, if you’ve built a Docker image, run heimdall in the decision operation mode via\n$ docker run -t -v $PWD:/heimdall/conf -p 4456:4456 \\ dadrus/heimdal:latest serve decision -c /heimdall/conf/config.yaml In both cases, you’ll see similar output to\n2022-08-04T07:40:12+02:00 INF No opentracing provider configured. Tracing will be disabled. 2022-08-04T07:40:12+02:00 INF Instantiating in memory cache 2022-08-04T07:40:12+02:00 INF Loading pipeline definitions 2022-08-04T07:40:12+02:00 WRN No rule provider configured. Only defaults will be used. 2022-08-04T07:40:12+02:00 WRN Key store is not configured. NEVER DO IT IN PRODUCTION!!!! Generating an RSA key pair. 2022-08-04T07:40:12+02:00 WRN No key id for signer configured. Taking first entry from the key store 2022-08-04T07:40:12+02:00 INF Starting cache evictor 2022-08-04T07:40:12+02:00 INF Starting rule definition loader 2022-08-04T07:40:12+02:00 INF Management service starts listening on: :4457 2022-08-04T07:40:12+02:00 INF Metrics service starts listening on: :9000 2022-08-04T07:40:12+02:00 INF Decision service starts listening on: :4456 Ignore the warnings. They are expected as we’ve neither configured a rule provider, nor have we configured a key store for JWT signing purposes. Nevertheless, the default rule can be used.\nRun Integrated Alternatively, if you would like to have an environment close to a real scenario, you could make use of docker compose. Create the following docker-compose.yaml file for this purpose:\nversion: \u0026#34;3\u0026#34; services: proxy: image: traefik:2.9.1 ports: - 9090:9090 command: \u0026gt; --providers.docker=true --providers.docker.exposedbydefault=false --entryPoints.http.address=\u0026#34;:9090\u0026#34; --accesslog --api=true --api.insecure=true volumes: - \u0026#34;/var/run/docker.sock:/var/run/docker.sock:ro\u0026#34; labels: - traefik.enable=true - traefik.http.routers.traefik_http.service=api@internal - traefik.http.routers.traefik_http.entrypoints=http - traefik.http.middlewares.heimdall.forwardauth.address=http://heimdall:4456 (1) - traefik.http.middlewares.heimdall.forwardauth.authResponseHeaders=Authorization heimdall: (2) image: dadrus/heimdall:latest volumes: - ./config.yaml:/heimdall/conf/config.yaml:ro - ./rules.yaml:/heimdall/conf/rules.yaml:ro command: -c /heimdall/conf/config.yaml serve decision upstream: (3) image: containous/whoami:latest labels: - traefik.enable=true - traefik.http.services.whoami.loadbalancer.server.port=80 - traefik.http.routers.whoami.rule=PathPrefix(\u0026#34;/\u0026#34;) - traefik.http.routers.whoami.middlewares=heimdall This setup contains three services:\n1 is Traefik, which is used to dispatch the incoming requests and also forward all of them to heimdall first. 2 is heimdall, configured to use the configuration and the rule files from above 3 is a small service, which just echoes back whatever it receives. Use Send some request to heimdall’s decision service endpoint.\nIf you’ve started heimdall as described in Run Standalone, that can be achieved by making a call to heimdall’s decision endpoint:\n$ curl -v 127.0.0.1:4456/foobar If you’ve started heimdall as described in Run Integrated, that can be achieved by making a call to the port 9090 exposed by Traefik:\n$ curl -v 127.0.0.1:9090/foobar In both cases, the default rule will apply, and you’ll receive a 401 Unauthorized response.\nTry sending requests to the /public and the /anonymous endpoints and see what happens. In both cases, the response will be an HTTP 200 OK. And the response from the /anonymous endpoint will also contain an Authorization header containing a JWT, e.g. as shown below.\n* Trying 127.0.0.1:4456... * Connected to 127.0.0.1 (127.0.0.1) port 4456 (#0) \u0026gt; GET /anonymous HTTP/1.1 \u0026gt; Host: 127.0.0.1:4456 \u0026gt; User-Agent: curl/7.74.0 \u0026gt; Accept: */* \u0026gt; * Mark bundle as not supporting multiuse \u0026lt; HTTP/1.1 200 OK \u0026lt; Date: Thu, 04 Aug 2022 07:45:16 GMT \u0026lt; Content-Length: 0 \u0026lt; Authorization: Bearer eyJhbGciOiJQUzI1NiIsImtpZCI6IjJkZGIxZDM3MWU1MGFjNDQ5ZGJhNjcyNj ZmZDRjMzU0OWZjNmRmYTYiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2NTYxNjY1MTYsImlhdCI6MTY1NjE2NjIxN iwiaXNzIjoiaGVpbWRhbGwiLCJqdGkiOiIxYjdlODdjYi0zYjdjLTQ1ZDAtYWEyZi00MTRhYmI2YjBlMzciLCJ uYmYiOjE2NTYxNjYyMTYsInN1YiI6ImFub255bW91cyJ9.MY6fjk7K6ZNn57Mrjy6UGI1cvIMCOOEJoCQF45PH Q34BfoPxMuTRjdVUZPX4xnT4suyWySsaU1wisgXv4CuMf4WsEUCPKOH8NKv5Zty6eXjTdWQpekDWYsHpVVwz8U HLmrRASlo_JKErj64wPbRcQWyLMR9X-4cR28ZuH3IbyXh4-XlGNEMAVWYFaZGv1QlEd7jcw3jSVK0b5AtY-NUc VQlccWpqWD43AE-3spchqboFuiuW5IxFGd4Mc0Dp6uepuQ-XiWEFg9rxnaxl-Grr3LfSY83oML53Akrl4lGtVB u55QVVjduv_b2ykRnqh7Im9lSivokuVMEuSE8bN2qnqg \u0026lt; * Connection #0 to host 127.0.0.1 left intact You should also be able to see similar output as below from the heimdall’s instance.\n... 2022-08-04T07:45:16+02:00 INF TX started _client_ip=127.0.0.1 _http_host=127.0.0.1:4456 _http_method=GET _http_path=/foobar _http_scheme=http _http_user_agent=curl/7.74.0 _tx_start=1659599116 2022-08-04T07:45:16+02:00 INF TX finished _access_granted=true _body_bytes_sent=0 _client_ip=127.0.0.1 _http_host=127.0.0.1:4456 _http_method=GET _http_path=/foobar _http_scheme=http _http_status_code=200 _http_user_agent=curl/7.74.0 _subject=anonymous _tx_duration_ms=0 _tx_start=1659599116 By the way, this quickstart is also available on GitHub.\n","description":"","html_content":"\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThis document describes a very simple use case in which you’ll see heimdall’s Decision service in action.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect1\"\u003e\n\u003ch2 id=\"_prerequisites\"\u003ePrerequisites\u003c/h2\u003e\n\u003cdiv class=\"sectionbody\"\u003e\n\u003cdiv class=\"ulist\"\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"/docs/operations/install/\"\u003eDownload Heimdall\u003c/a\u003e in your flavor.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://docs.docker.com/install/\"\u003eDocker\u003c/a\u003e (optionally) and\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://docs.docker.com/compose/install/\"\u003edocker-compose\u003c/a\u003e (optionally)\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect1\"\u003e\n\u003ch2 id=\"_configure\"\u003eConfigure\u003c/h2\u003e\n\u003cdiv class=\"sectionbody\"\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eheimdall can be configured via environment variables, as well as using a configuration file. For simplicity reasons, we’ll use a configuration file here. So create a config file named \u003ccode\u003econfig.yaml\u003c/code\u003e with the following content:\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"yaml\"\u003e\u003cspan style=\"color: #a6e22e\"\u003elog\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003elevel\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003einfo\u003c/span\u003e  \u003ci class=\"conum\" data-value=\"1\"\u003e\u003c/i\u003e\u003cb\u003e(1)\u003c/b\u003e\n\n\u003cspan style=\"color: #a6e22e\"\u003eserve\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003edecision\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003etrusted_proxies\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e  \u003ci class=\"conum\" data-value=\"2\"\u003e\u003c/i\u003e\u003cb\u003e(2)\u003c/b\u003e\n      \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e0.0.0.0/0\u003c/span\u003e\n\n\u003cspan style=\"color: #a6e22e\"\u003erules\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003emechanisms\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003eauthenticators\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e  \u003ci class=\"conum\" data-value=\"3\"\u003e\u003c/i\u003e\u003cb\u003e(3)\u003c/b\u003e\n      \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003eid\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003edo_nothing\u003c/span\u003e\n        \u003cspan style=\"color: #a6e22e\"\u003etype\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003enoop\u003c/span\u003e\n      \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003eid\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eanon\u003c/span\u003e\n        \u003cspan style=\"color: #a6e22e\"\u003etype\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eanonymous\u003c/span\u003e\n      \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003eid\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ereject_requests\u003c/span\u003e\n        \u003cspan style=\"color: #a6e22e\"\u003etype\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eunauthorized\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003eunifiers\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e  \u003ci class=\"conum\" data-value=\"4\"\u003e\u003c/i\u003e\u003cb\u003e(4)\u003c/b\u003e\n      \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003eid\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003edo_nothing\u003c/span\u003e\n        \u003cspan style=\"color: #a6e22e\"\u003etype\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003enoop\u003c/span\u003e\n      \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003eid\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ecreate_jwt\u003c/span\u003e\n        \u003cspan style=\"color: #a6e22e\"\u003etype\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ejwt\u003c/span\u003e\n\n  \u003cspan style=\"color: #a6e22e\"\u003edefault\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e  \u003ci class=\"conum\" data-value=\"5\"\u003e\u003c/i\u003e\u003cb\u003e(5)\u003c/b\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003emethods\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n      \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eGET\u003c/span\u003e\n      \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ePOST\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003eexecute\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n      \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003eauthenticator\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ereject_requests\u003c/span\u003e\n      \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003eunifier\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ecreate_jwt\u003c/span\u003e\n\n  \u003cspan style=\"color: #a6e22e\"\u003eproviders\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003efile_system\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e  \u003ci class=\"conum\" data-value=\"6\"\u003e\u003c/i\u003e\u003cb\u003e(6)\u003c/b\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003esrc\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e/heimdall/conf/rules.yaml\u003c/span\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003ewatch\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #66d9ef\"\u003etrue\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"colist arabic\"\u003e\n\u003ctable\u003e\n\u003ctbody\u003e\u003ctr\u003e\n\u003ctd\u003e\u003ci class=\"conum\" data-value=\"1\"\u003e\u003c/i\u003e\u003cb\u003e1\u003c/b\u003e\u003c/td\u003e\n\u003ctd\u003eHere we are setting the log level to \u003ccode\u003einfo\u003c/code\u003e to be able to see any log output. By default, heimdall logs on \u003ccode\u003eerror\u003c/code\u003e log level.\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ci class=\"conum\" data-value=\"2\"\u003e\u003c/i\u003e\u003cb\u003e2\u003c/b\u003e\u003c/td\u003e\n\u003ctd\u003eConfigures heimdall’s decision service to trust requests from all sources. This allows usage of \u003ccode\u003eX-Forwarded-*\u003c/code\u003e headers. This configuration is only required if you want to try out the docker compose example from below.\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ci class=\"conum\" data-value=\"3\"\u003e\u003c/i\u003e\u003cb\u003e3\u003c/b\u003e\u003c/td\u003e\n\u003ctd\u003eConfigures a couple of authenticators - the \u003ccode\u003enoop\u003c/code\u003e authenticator, which does nothing, the \u003ccode\u003eanonymous\u003c/code\u003e authenticator, which treats every request as anonymous (creates a subject with its id set to anonymous) and the \u003ccode\u003eunauthorized\u003c/code\u003e authenticator, which rejects every request with \u003ccode\u003e401 Unauthorized\u003c/code\u003e HTTP code.\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ci class=\"conum\" data-value=\"4\"\u003e\u003c/i\u003e\u003cb\u003e4\u003c/b\u003e\u003c/td\u003e\n\u003ctd\u003eConfigured a couple of unifiers - the \u003ccode\u003enoop\u003c/code\u003e unifier, which does nothing and the jwt` unifier, which transforms the information about the subject into a JWT.\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ci class=\"conum\" data-value=\"5\"\u003e\u003c/i\u003e\u003cb\u003e5\u003c/b\u003e\u003c/td\u003e\n\u003ctd\u003eConfigures the default rule, which will obviously reject every request.\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ci class=\"conum\" data-value=\"6\"\u003e\u003c/i\u003e\u003cb\u003e6\u003c/b\u003e\u003c/td\u003e\n\u003ctd\u003eConfigures a \u003ccode\u003efile_system\u003c/code\u003e provider, which allows heimdall loading rules from the local filesystem; here from the \u003ccode\u003e/heimdall/conf/rule.yaml\u003c/code\u003e file.\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eWith that configuration and without any additional rules, heimdall would reject all requests with \u003ccode\u003e401 Unauthorized\u003c/code\u003e. But it has a \u003ccode\u003efile_system\u003c/code\u003e provider configured, which makes heimdall expect the referenced rules file already on startup. To make it more usable, create a \u003ccode\u003erules.yaml\u003c/code\u003e file with the following content:\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"yaml\"\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003eid\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003erule1\u003c/span\u003e  \u003ci class=\"conum\" data-value=\"1\"\u003e\u003c/i\u003e\u003cb\u003e(1)\u003c/b\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003ematch\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003eurl\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ehttp://\u0026lt;**\u0026gt;/public\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003eexecute\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n    \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003eauthenticator\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003edo_nothing\u003c/span\u003e\n    \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003eunifier\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003edo_nothing\u003c/span\u003e\n\n\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003eid\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003erule2\u003c/span\u003e  \u003ci class=\"conum\" data-value=\"2\"\u003e\u003c/i\u003e\u003cb\u003e(2)\u003c/b\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003ematch\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003eurl\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ehttp://\u0026lt;**\u0026gt;/anonymous\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003eexecute\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n    \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003eauthenticator\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eanon\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThis file contains two rules:\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"colist arabic\"\u003e\n\u003ctable\u003e\n\u003ctbody\u003e\u003ctr\u003e\n\u003ctd\u003e\u003ci class=\"conum\" data-value=\"1\"\u003e\u003c/i\u003e\u003cb\u003e1\u003c/b\u003e\u003c/td\u003e\n\u003ctd\u003eThis rule should match the \u003ccode\u003ehttp://\u0026lt;**\u0026gt;/public\u003c/code\u003e url and accept every request without performing any authentication and unification.\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ci class=\"conum\" data-value=\"2\"\u003e\u003c/i\u003e\u003cb\u003e2\u003c/b\u003e\u003c/td\u003e\n\u003ctd\u003eThis rule should match the \u003ccode\u003ehttp://\u0026lt;**\u0026gt;/anonymous\u003c/code\u003e url. It uses the \u003ccode\u003eanon\u003c/code\u003e authenticator from our mechanisms definitions and since it does not specify a unifier, the unifier from the default rule \u003ccode\u003ecreate_jwt\u003c/code\u003e is used.\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect1\"\u003e\n\u003ch2 id=\"_run_standalone\"\u003eRun Standalone\u003c/h2\u003e\n\u003cdiv class=\"sectionbody\"\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eRun heimdall specifying the configuration file from above\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eIf you’re using a binary, put the \u003ccode\u003erules.yaml\u003c/code\u003e file into the \u003ccode\u003e/heimdall/conf\u003c/code\u003e directory (as heimdall will look the \u003ccode\u003erules.yaml\u003c/code\u003e file in it according to our configuration from above) just execute\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"bash\"\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e$ \u003c/span\u003e./heimdall serve decision \u003cspan style=\"color: #f92672\"\u003e-c\u003c/span\u003e config.yaml\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThe above command will start heimdall in a \u003ca href=\"/docs/getting_started/concepts/#_decision_api_mode\"\u003edecision\u003c/a\u003e operation mode. By default, the service will be served on port \u003ccode\u003e4456\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eOtherwise, if you’ve built a Docker image, run heimdall in the \u003ca href=\"/docs/getting_started/concepts/#_decision_api_mode\"\u003edecision\u003c/a\u003e operation mode via\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"bash\"\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e$ \u003c/span\u003edocker run \u003cspan style=\"color: #f92672\"\u003e-t\u003c/span\u003e \u003cspan style=\"color: #f92672\"\u003e-v\u003c/span\u003e \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e$PWD\u003c/span\u003e:/heimdall/conf \u003cspan style=\"color: #f92672\"\u003e-p\u003c/span\u003e 4456:4456 \u003cspan style=\"color: #ae81ff\"\u003e\\\u003c/span\u003e\n  dadrus/heimdal:latest serve decision \u003cspan style=\"color: #f92672\"\u003e-c\u003c/span\u003e /heimdall/conf/config.yaml\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eIn both cases, you’ll see similar output to\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"bash\"\u003e2022-08-04T07:40:12+02:00 INF No opentracing provider configured. Tracing will be disabled.\n2022-08-04T07:40:12+02:00 INF Instantiating \u003cspan style=\"color: #f92672\"\u003ein \u003c/span\u003ememory cache\n2022-08-04T07:40:12+02:00 INF Loading pipeline definitions\n2022-08-04T07:40:12+02:00 WRN No rule provider configured. Only defaults will be used.\n2022-08-04T07:40:12+02:00 WRN Key store is not configured. NEVER DO IT IN PRODUCTION!!!! Generating an\n                          RSA key pair.\n2022-08-04T07:40:12+02:00 WRN No key \u003cspan style=\"color: #f6aa11\"\u003eid \u003c/span\u003e\u003cspan style=\"color: #f92672\"\u003efor \u003c/span\u003esigner configured. Taking first entry from the key store\n2022-08-04T07:40:12+02:00 INF Starting cache evictor\n2022-08-04T07:40:12+02:00 INF Starting rule definition loader\n2022-08-04T07:40:12+02:00 INF Management service starts listening on: :4457\n2022-08-04T07:40:12+02:00 INF Metrics service starts listening on: :9000\n2022-08-04T07:40:12+02:00 INF Decision service starts listening on: :4456\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eIgnore the warnings. They are expected as we’ve neither configured a rule provider, nor have we configured a key store for JWT signing purposes. Nevertheless, the default rule can be used.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect1\"\u003e\n\u003ch2 id=\"_run_integrated\"\u003eRun Integrated\u003c/h2\u003e\n\u003cdiv class=\"sectionbody\"\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eAlternatively, if you would like to have an environment close to a real scenario, you could make use of docker compose. Create the following \u003ccode\u003edocker-compose.yaml\u003c/code\u003e file for this purpose:\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"yaml\"\u003e\u003cspan style=\"color: #a6e22e\"\u003eversion\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e3\u0026#34;\u003c/span\u003e\n\n\u003cspan style=\"color: #a6e22e\"\u003eservices\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003eproxy\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003eimage\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003etraefik:2.9.1\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003eports\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n      \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e9090:9090\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003ecommand\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026gt;\u003c/span\u003e\n      \u003cspan style=\"color: #e6db74\"\u003e--providers.docker=true\u003c/span\u003e\n      \u003cspan style=\"color: #e6db74\"\u003e--providers.docker.exposedbydefault=false\u003c/span\u003e\n      \u003cspan style=\"color: #e6db74\"\u003e--entryPoints.http.address=\u0026#34;:9090\u0026#34;\u003c/span\u003e\n      \u003cspan style=\"color: #e6db74\"\u003e--accesslog --api=true --api.insecure=true\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003evolumes\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n      \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e/var/run/docker.sock:/var/run/docker.sock:ro\u0026#34;\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003elabels\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n      \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003etraefik.enable=true\u003c/span\u003e\n      \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003etraefik.http.routers.traefik_http.service=api@internal\u003c/span\u003e\n      \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003etraefik.http.routers.traefik_http.entrypoints=http\u003c/span\u003e\n      \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003etraefik.http.middlewares.heimdall.forwardauth.address=http://heimdall:4456\u003c/span\u003e  \u003ci class=\"conum\" data-value=\"1\"\u003e\u003c/i\u003e\u003cb\u003e(1)\u003c/b\u003e\n      \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003etraefik.http.middlewares.heimdall.forwardauth.authResponseHeaders=Authorization\u003c/span\u003e\n\n  \u003cspan style=\"color: #a6e22e\"\u003eheimdall\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e  \u003ci class=\"conum\" data-value=\"2\"\u003e\u003c/i\u003e\u003cb\u003e(2)\u003c/b\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003eimage\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003edadrus/heimdall:latest\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003evolumes\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n      \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e./config.yaml:/heimdall/conf/config.yaml:ro\u003c/span\u003e\n      \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e./rules.yaml:/heimdall/conf/rules.yaml:ro\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003ecommand\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e-c /heimdall/conf/config.yaml serve decision\u003c/span\u003e\n\n  \u003cspan style=\"color: #a6e22e\"\u003eupstream\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e  \u003ci class=\"conum\" data-value=\"3\"\u003e\u003c/i\u003e\u003cb\u003e(3)\u003c/b\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003eimage\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003econtainous/whoami:latest\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003elabels\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n      \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003etraefik.enable=true\u003c/span\u003e\n      \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003etraefik.http.services.whoami.loadbalancer.server.port=80\u003c/span\u003e\n      \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003etraefik.http.routers.whoami.rule=PathPrefix(\u0026#34;/\u0026#34;)\u003c/span\u003e\n      \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003etraefik.http.routers.whoami.middlewares=heimdall\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThis setup contains three services:\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"colist arabic\"\u003e\n\u003ctable\u003e\n\u003ctbody\u003e\u003ctr\u003e\n\u003ctd\u003e\u003ci class=\"conum\" data-value=\"1\"\u003e\u003c/i\u003e\u003cb\u003e1\u003c/b\u003e\u003c/td\u003e\n\u003ctd\u003eis Traefik, which is used to dispatch the incoming requests and also forward all of them to heimdall first.\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ci class=\"conum\" data-value=\"2\"\u003e\u003c/i\u003e\u003cb\u003e2\u003c/b\u003e\u003c/td\u003e\n\u003ctd\u003eis heimdall, configured to use the configuration and the rule files from above\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ci class=\"conum\" data-value=\"3\"\u003e\u003c/i\u003e\u003cb\u003e3\u003c/b\u003e\u003c/td\u003e\n\u003ctd\u003eis a small service, which just echoes back whatever it receives.\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect1\"\u003e\n\u003ch2 id=\"_use\"\u003eUse\u003c/h2\u003e\n\u003cdiv class=\"sectionbody\"\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eSend some request to heimdall’s decision service endpoint.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eIf you’ve started heimdall as described in \u003ca href=\"#_run_standalone\"\u003eRun Standalone\u003c/a\u003e, that can be achieved by making a call to heimdall’s decision endpoint:\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"bash\"\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e$ \u003c/span\u003ecurl \u003cspan style=\"color: #f92672\"\u003e-v\u003c/span\u003e 127.0.0.1:4456/foobar\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eIf you’ve started heimdall as described in \u003ca href=\"#_run_integrated\"\u003eRun Integrated\u003c/a\u003e, that can be achieved by making a call to the port 9090 exposed by Traefik:\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"bash\"\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e$ \u003c/span\u003ecurl \u003cspan style=\"color: #f92672\"\u003e-v\u003c/span\u003e 127.0.0.1:9090/foobar\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eIn both cases, the default rule will apply, and you’ll receive a \u003ccode\u003e401 Unauthorized\u003c/code\u003e response.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eTry sending requests to the \u003ccode\u003e/public\u003c/code\u003e and the \u003ccode\u003e/anonymous\u003c/code\u003e endpoints and see what happens. In both cases, the response will be an HTTP \u003ccode\u003e200 OK\u003c/code\u003e. And the response from the \u003ccode\u003e/anonymous\u003c/code\u003e endpoint will also contain an \u003ccode\u003eAuthorization\u003c/code\u003e header containing a JWT, e.g. as shown below.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"bash\"\u003e\u003cspan style=\"color: #f92672\"\u003e*\u003c/span\u003e   Trying 127.0.0.1:4456...\n\u003cspan style=\"color: #f92672\"\u003e*\u003c/span\u003e Connected to 127.0.0.1 \u003cspan style=\"color: #f92672\"\u003e(\u003c/span\u003e127.0.0.1\u003cspan style=\"color: #f92672\"\u003e)\u003c/span\u003e port 4456 \u003cspan style=\"color: #f92672\"\u003e(\u003c/span\u003e\u003cspan style=\"color: #75715e\"\u003e#0)\u003c/span\u003e\n\u003cspan style=\"color: #f92672\"\u003e\u0026gt;\u003c/span\u003e GET /anonymous HTTP/1.1\n\u003cspan style=\"color: #f92672\"\u003e\u0026gt;\u003c/span\u003e Host: 127.0.0.1:4456\n\u003cspan style=\"color: #f92672\"\u003e\u0026gt;\u003c/span\u003e User-Agent: curl/7.74.0\n\u003cspan style=\"color: #f92672\"\u003e\u0026gt;\u003c/span\u003e Accept: \u003cspan style=\"color: #f92672\"\u003e*\u003c/span\u003e/\u003cspan style=\"color: #f92672\"\u003e*\u003c/span\u003e\n\u003cspan style=\"color: #f92672\"\u003e\u0026gt;\u003c/span\u003e\n\u003cspan style=\"color: #f92672\"\u003e*\u003c/span\u003e Mark bundle as not supporting multiuse\n\u0026lt; HTTP/1.1 200 OK\n\u0026lt; Date: Thu, 04 Aug 2022 07:45:16 GMT\n\u0026lt; Content-Length: 0\n\u0026lt; Authorization: Bearer eyJhbGciOiJQUzI1NiIsImtpZCI6IjJkZGIxZDM3MWU1MGFjNDQ5ZGJhNjcyNj\nZmZDRjMzU0OWZjNmRmYTYiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2NTYxNjY1MTYsImlhdCI6MTY1NjE2NjIxN\niwiaXNzIjoiaGVpbWRhbGwiLCJqdGkiOiIxYjdlODdjYi0zYjdjLTQ1ZDAtYWEyZi00MTRhYmI2YjBlMzciLCJ\nuYmYiOjE2NTYxNjYyMTYsInN1YiI6ImFub255bW91cyJ9.MY6fjk7K6ZNn57Mrjy6UGI1cvIMCOOEJoCQF45PH\nQ34BfoPxMuTRjdVUZPX4xnT4suyWySsaU1wisgXv4CuMf4WsEUCPKOH8NKv5Zty6eXjTdWQpekDWYsHpVVwz8U\nHLmrRASlo_JKErj64wPbRcQWyLMR9X-4cR28ZuH3IbyXh4-XlGNEMAVWYFaZGv1QlEd7jcw3jSVK0b5AtY-NUc\nVQlccWpqWD43AE-3spchqboFuiuW5IxFGd4Mc0Dp6uepuQ-XiWEFg9rxnaxl-Grr3LfSY83oML53Akrl4lGtVB\nu55QVVjduv_b2ykRnqh7Im9lSivokuVMEuSE8bN2qnqg\n\u0026lt;\n\u003cspan style=\"color: #f92672\"\u003e*\u003c/span\u003e Connection \u003cspan style=\"color: #75715e\"\u003e#0 to host 127.0.0.1 left intact\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eYou should also be able to see similar output as below from the heimdall’s instance.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"bash\"\u003e...\n2022-08-04T07:45:16+02:00 INF TX started \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e_client_ip\u003c/span\u003e\u003cspan style=\"color: #f92672\"\u003e=\u003c/span\u003e127.0.0.1 \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e_http_host\u003c/span\u003e\u003cspan style=\"color: #f92672\"\u003e=\u003c/span\u003e127.0.0.1:4456 \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e_http_method\u003c/span\u003e\u003cspan style=\"color: #f92672\"\u003e=\u003c/span\u003eGET\n \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e_http_path\u003c/span\u003e\u003cspan style=\"color: #f92672\"\u003e=\u003c/span\u003e/foobar \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e_http_scheme\u003c/span\u003e\u003cspan style=\"color: #f92672\"\u003e=\u003c/span\u003ehttp \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e_http_user_agent\u003c/span\u003e\u003cspan style=\"color: #f92672\"\u003e=\u003c/span\u003ecurl/7.74.0 \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e_tx_start\u003c/span\u003e\u003cspan style=\"color: #f92672\"\u003e=\u003c/span\u003e1659599116\n2022-08-04T07:45:16+02:00 INF TX finished \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e_access_granted\u003c/span\u003e\u003cspan style=\"color: #f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color: #f6aa11\"\u003etrue \u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e_body_bytes_sent\u003c/span\u003e\u003cspan style=\"color: #f92672\"\u003e=\u003c/span\u003e0 \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e_client_ip\u003c/span\u003e\u003cspan style=\"color: #f92672\"\u003e=\u003c/span\u003e127.0.0.1\n \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e_http_host\u003c/span\u003e\u003cspan style=\"color: #f92672\"\u003e=\u003c/span\u003e127.0.0.1:4456 \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e_http_method\u003c/span\u003e\u003cspan style=\"color: #f92672\"\u003e=\u003c/span\u003eGET \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e_http_path\u003c/span\u003e\u003cspan style=\"color: #f92672\"\u003e=\u003c/span\u003e/foobar \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e_http_scheme\u003c/span\u003e\u003cspan style=\"color: #f92672\"\u003e=\u003c/span\u003ehttp \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e_http_status_code\u003c/span\u003e\u003cspan style=\"color: #f92672\"\u003e=\u003c/span\u003e200\n \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e_http_user_agent\u003c/span\u003e\u003cspan style=\"color: #f92672\"\u003e=\u003c/span\u003ecurl/7.74.0 \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e_subject\u003c/span\u003e\u003cspan style=\"color: #f92672\"\u003e=\u003c/span\u003eanonymous \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e_tx_duration_ms\u003c/span\u003e\u003cspan style=\"color: #f92672\"\u003e=\u003c/span\u003e0 \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e_tx_start\u003c/span\u003e\u003cspan style=\"color: #f92672\"\u003e=\u003c/span\u003e1659599116\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eBy the way, this quickstart is also available on \u003ca href=\"https://github.com/dadrus/heimdall/tree/main/examples/docker-compose/quickstarts\"\u003eGitHub\u003c/a\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n","sections":["Getting Started"],"tags":null,"title":"Decision Service Quickstart","url":"/docs/getting_started/decision_service_quickstart/"},{"categories":null,"content":" This document describes a simple use case in which you’ll see heimdall’s Proxy service in action. Here, we’ll create a minimal but complete environment for running heimdall with containers.\nPrerequisites Docker and\ndocker-compose\nConfigure Heimdall can be configured via environment variables, as well as using a configuration file. For simplicity reasons, we’ll use a configuration file here.\nCreate a config file (config.yaml) with the following content:\nlog: level: info (1) rules: mechanisms: authenticators: - id: anonymous_authenticator (2) type: anonymous - id: noop type: noop authorizers: - id: deny_all_requests (3) type: deny - id: allow_all_requests (4) type: allow unifiers: - id: create_jwt (5) type: jwt - id: noop type: noop default: (6) methods: - GET - POST execute: - authenticator: anonymous_authenticator - authorizer: deny_all_requests - unifier: create_jwt providers: file_system: (7) src: /heimdall/conf/rule.yaml watch: true 1 Here we are setting the log level to info to be able to see any log output. By default, heimdall logs on error log level. 2 Configures the anonymous authenticator. 3 Configures the deny authorizer. 4 Configures the allow authorizer. It will be used in our rule to allow requests. 5 Configures the jwt unifier. 6 Configures the default rule. 7 Configures the file_system provider, which will allow loading of our rule from the file system. Put together, this configuration will let heimdall create a JSON Web Token (JWT) with sub claim set to anonymous for every request on every URL for the HTTP methods GET and POST. The JWT itself will be put into the Authorization header as a bearer token. Since the above default rule cannot be used to forward requests to the upstream service, the deny authenticator will reject the requests for us and enforce a configuration of an authorization mechanism in a specific rule, which we’re going to define next.\nCreate a rule file (rule.yaml) with the following contents:\n- id: rule1 (1) match: url: http://\u0026lt;**\u0026gt;/anonymous upstream: http://upstream execute: - authorizer: allow_all_requests - id: rule2 (2) match: url: http://\u0026lt;**\u0026gt;/public upstream: http://upstream execute: - authenticator: noop - authorizer: allow_all_requests - unifier: noop 1 This rule matches any host and the /anonymous path and forwards the request to our upstream service (which we’re going to define next). In addition, it reuses the configuration from the default rule. Here, the methods, which are allowed, as well as the authorizers and unifiers. So we don’t need to define them here. 2 This rule matches any host and the /public path and forwards the request as the previous rule to our upstream service. This rule doesn’t perform any kind of request verification or transformation. Create or copy the following docker-compose.yaml file and modify it to include the correct paths to your config.yaml and rule.yaml files:\nversion: \u0026#34;3\u0026#34; services: heimdall: (1) image: dadrus/heimdall:latest volumes: # Mount your config file: - ./config.yaml:/heimdall/conf/config.yaml:ro # Mount your rule file: - ./rule.yaml:/heimdall/conf/rule.yaml:ro ports: - 4455:4455 command: -c /heimdall/conf/config.yaml serve proxy upstream: (2) image: containous/whoami:latest 1 Configures heimdall to use our config and rule files and to run in proxy operation mode. 2 Configures the \u0026#34;upstream\u0026#34; service. Here it is a very simple service, which just echoes back everything it receives. Run Run docker compose:\n$ docker-compose up Docker will automatically download the required container images. Then, heimdall will start in the proxy mode and run with the configuration details set in the previous steps. You’ll then be able to see an output similar to\nCreating network \u0026#34;heimdall_default\u0026#34; with the default driver Starting heimdall_heimdall_1 ... done Starting heimdall_upstream_1 ... done Attaching to heimdall_heimdall_1, heimdall_upstream_1 upstream_1 | Starting up on port 80 heimdall_1 | 2022-08-04T07:50:08+02:00 INF No opentracing provider configured. Tracing will be disabled. heimdall_1 | 2022-08-04T07:50:08+02:00 INF Instantiating in memory cache heimdall_1 | 2022-08-04T07:50:08+02:00 INF Loading pipeline definitions heimdall_1 | 2022-08-04T07:50:08+02:00 WRN Key store is not configured. NEVER DO IT IN PRODUCTION!!!! Generating an RSA key pair. heimdall_1 | 2022-08-04T07:50:08+02:00 WRN No key id for signer configured. Taking first entry from the key store heimdall_1 | 2022-08-04T07:50:08+02:00 INF Starting cache evictor heimdall_1 | 2022-08-04T07:50:08+02:00 INF Starting rule definition loader heimdall_1 | 2022-08-04T07:50:08+02:00 INF Starting rule definitions provider: file_system heimdall_1 | 2022-08-04T07:50:08+02:00 INF Loading initial rule set heimdall_1 | 2022-08-04T07:50:08+02:00 INF Rule set changed src=file_system:/heimdall/conf/rule.yaml type=Create heimdall_1 | 2022-08-04T07:50:08+02:00 INF Loading rule set src=file_system:/heimdall/conf/rule.yaml heimdall_1 | 2022-08-04T07:50:08+02:00 INF Metrics service starts listening on: :9000 heimdall_1 | 2022-08-04T07:50:08+02:00 INF Proxy service starts listening on: :4455 heimdall_1 | 2022-08-04T07:50:08+02:00 INF Management service starts listening on: :4457 Ignore the warnings. They are expected and will not have any effects in this case.\nUse Send a request to heimdall’s proxy endpoint:\n$ curl -v 127.0.0.1:4455/foobar Here, heimdall will not match any of the defined rules, which will result in the execution of the default rule. Thus, you’ll see 403 Forbidden as answer.\nTry sending requests to the /public and the /anonymous endpoints and see what happens. In both cases, the response will be an HTTP 200 OK. And the response from the /anonymous endpoint will also contain an Authorization header containing a JWT, e.g. as shown below.\n* Trying 127.0.0.1:4455... * Connected to 127.0.0.1 (127.0.0.1) port 4455 (#0) \u0026gt; GET /foobar HTTP/1.1 \u0026gt; Host: 127.0.0.1:4455 \u0026gt; User-Agent: curl/7.74.0 \u0026gt; Accept: */* \u0026gt; * Mark bundle as not supporting multiuse \u0026lt; HTTP/1.1 200 OK \u0026lt; Date: Thu, 04 Aug 2022 07:53:41 GMT \u0026lt; Content-Type: text/plain; charset=utf-8 \u0026lt; Content-Length: 872 \u0026lt; Hostname: 4f809f75f31b IP: 127.0.0.1 IP: 172.22.0.3 RemoteAddr: 172.22.0.2:42100 GET /foobar HTTP/1.1 Host: upstream User-Agent: curl/7.74.0 Accept: */* Authorization: Bearer eyJhbGciOiJQUzI1NiIsImtpZCI6IjNhYjFiMDdmMmMyNjlkMWVlMTRjNzQ2NDA4 OTAyZjRlNWQ1MDAyOTgiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2NTkzMzczMjEsImlhdCI6MTY1OTMzNzAyMSw iaXNzIjoiaGVpbWRhbGwiLCJqdGkiOiJjMmEzNjczMy04ZDBjLTQzYWQtOGFkNi0xM2Q4NGVhNDI1MTgiLCJuY mYiOjE2NTkzMzcwMjEsInN1YiI6ImFub255bW91cyJ9.gw-h15LaUUYV-Sjk6Vf-kZflnZxn88lejVIIatKliv FkeUz8oo9x9juKBSzr4nIVWjGZ_atGVmLoKshudHdnpvABx5cgBaz2_KDgifVzGORE1zld9vGDpU7IPjOyC9-M b7vOOA1fq9pbQ4nfXw100AJJKFXSct9cYa3163kk_s-jEIPclhB0ZiPqGI-t_GiYJBCVKOTJPkkLKB51KCgn2y PvO3qLCwO81JdCSFG9k2WLjWZlQe-a8u4El-2qctx8yB-vBFPIaQlwCJh66of3hcUs98IoVlMLGdTJSI4pX9nK s8OMxVO37eI501gZXXkF5IiSsRAqV_o8pMcGZ47Ztg Forwarded: for=172.22.0.1;proto=http X-Forwarded-For: 172.22.0.1 * Connection #0 to host 127.0.0.1 left intact You should also be able to see similar output as below from the docker-compose environment:\n... 2022-08-04T07:53:41+02:00 INF TX started _client_ip=127.0.0.1 _http_host=127.0.0.1:4455 _http_method=GET _http_path=/foobar _http_scheme=http _http_user_agent=curl/7.74.0 _tx_start=1659599621 2022-08-04T07:53:41+02:00 INF TX finished _access_granted=true _body_bytes_sent=872 _client_ip=127.0.0.1 _http_host=127.0.0.1:4455 _http_method=GET _http_path=/foobar _http_scheme=http _http_status_code=200 _http_user_agent=curl/7.74.0 _subject=anonymous _tx_duration_ms=0 _tx_start=1659599621 By the way, this quickstart is also available on GitHub.\n","description":"","html_content":"\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThis document describes a simple use case in which you’ll see heimdall’s Proxy service in action. Here, we’ll create a minimal but complete environment for running heimdall with containers.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect1\"\u003e\n\u003ch2 id=\"_prerequisites\"\u003ePrerequisites\u003c/h2\u003e\n\u003cdiv class=\"sectionbody\"\u003e\n\u003cdiv class=\"ulist\"\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://docs.docker.com/install/\"\u003eDocker\u003c/a\u003e and\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://docs.docker.com/compose/install/\"\u003edocker-compose\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect1\"\u003e\n\u003ch2 id=\"_configure\"\u003eConfigure\u003c/h2\u003e\n\u003cdiv class=\"sectionbody\"\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eHeimdall can be configured via environment variables, as well as using a configuration file. For simplicity reasons, we’ll use a configuration file here.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"olist arabic\"\u003e\n\u003col class=\"arabic\"\u003e\n\u003cli\u003e\n\u003cp\u003eCreate a config file (\u003ccode\u003econfig.yaml\u003c/code\u003e) with the following content:\u003c/p\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"yaml\"\u003e\u003cspan style=\"color: #a6e22e\"\u003elog\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003elevel\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003einfo\u003c/span\u003e  \u003ci class=\"conum\" data-value=\"1\"\u003e\u003c/i\u003e\u003cb\u003e(1)\u003c/b\u003e\n\n\u003cspan style=\"color: #a6e22e\"\u003erules\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003emechanisms\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003eauthenticators\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n    \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003eid\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eanonymous_authenticator\u003c/span\u003e  \u003ci class=\"conum\" data-value=\"2\"\u003e\u003c/i\u003e\u003cb\u003e(2)\u003c/b\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003etype\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eanonymous\u003c/span\u003e\n    \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003eid\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003enoop\u003c/span\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003etype\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003enoop\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003eauthorizers\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n    \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003eid\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003edeny_all_requests\u003c/span\u003e  \u003ci class=\"conum\" data-value=\"3\"\u003e\u003c/i\u003e\u003cb\u003e(3)\u003c/b\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003etype\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003edeny\u003c/span\u003e\n    \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003eid\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eallow_all_requests\u003c/span\u003e  \u003ci class=\"conum\" data-value=\"4\"\u003e\u003c/i\u003e\u003cb\u003e(4)\u003c/b\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003etype\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eallow\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003eunifiers\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n    \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003eid\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ecreate_jwt\u003c/span\u003e  \u003ci class=\"conum\" data-value=\"5\"\u003e\u003c/i\u003e\u003cb\u003e(5)\u003c/b\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003etype\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ejwt\u003c/span\u003e\n    \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003eid\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003enoop\u003c/span\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003etype\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003enoop\u003c/span\u003e\n\n  \u003cspan style=\"color: #a6e22e\"\u003edefault\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e  \u003ci class=\"conum\" data-value=\"6\"\u003e\u003c/i\u003e\u003cb\u003e(6)\u003c/b\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003emethods\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n      \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eGET\u003c/span\u003e\n      \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ePOST\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003eexecute\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n      \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003eauthenticator\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eanonymous_authenticator\u003c/span\u003e\n      \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003eauthorizer\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003edeny_all_requests\u003c/span\u003e\n      \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003eunifier\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ecreate_jwt\u003c/span\u003e\n\n  \u003cspan style=\"color: #a6e22e\"\u003eproviders\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003efile_system\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e  \u003ci class=\"conum\" data-value=\"7\"\u003e\u003c/i\u003e\u003cb\u003e(7)\u003c/b\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003esrc\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e/heimdall/conf/rule.yaml\u003c/span\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003ewatch\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #66d9ef\"\u003etrue\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"colist arabic\"\u003e\n\u003ctable\u003e\n\u003ctbody\u003e\u003ctr\u003e\n\u003ctd\u003e\u003ci class=\"conum\" data-value=\"1\"\u003e\u003c/i\u003e\u003cb\u003e1\u003c/b\u003e\u003c/td\u003e\n\u003ctd\u003eHere we are setting the log level to \u003ccode\u003einfo\u003c/code\u003e to be able to see any log output. By default, heimdall logs on \u003ccode\u003eerror\u003c/code\u003e log level.\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ci class=\"conum\" data-value=\"2\"\u003e\u003c/i\u003e\u003cb\u003e2\u003c/b\u003e\u003c/td\u003e\n\u003ctd\u003eConfigures the \u003ccode\u003eanonymous\u003c/code\u003e authenticator.\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ci class=\"conum\" data-value=\"3\"\u003e\u003c/i\u003e\u003cb\u003e3\u003c/b\u003e\u003c/td\u003e\n\u003ctd\u003eConfigures the \u003ccode\u003edeny\u003c/code\u003e authorizer.\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ci class=\"conum\" data-value=\"4\"\u003e\u003c/i\u003e\u003cb\u003e4\u003c/b\u003e\u003c/td\u003e\n\u003ctd\u003eConfigures the \u003ccode\u003eallow\u003c/code\u003e authorizer. It will be used in our rule to allow requests.\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ci class=\"conum\" data-value=\"5\"\u003e\u003c/i\u003e\u003cb\u003e5\u003c/b\u003e\u003c/td\u003e\n\u003ctd\u003eConfigures the \u003ccode\u003ejwt\u003c/code\u003e unifier.\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ci class=\"conum\" data-value=\"6\"\u003e\u003c/i\u003e\u003cb\u003e6\u003c/b\u003e\u003c/td\u003e\n\u003ctd\u003eConfigures the default rule.\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ci class=\"conum\" data-value=\"7\"\u003e\u003c/i\u003e\u003cb\u003e7\u003c/b\u003e\u003c/td\u003e\n\u003ctd\u003eConfigures the \u003ccode\u003efile_system\u003c/code\u003e provider, which will allow loading of our rule from the file system.\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003ePut together, this configuration will let heimdall create a JSON Web Token (JWT) with \u003ccode\u003esub\u003c/code\u003e claim set to \u003ccode\u003eanonymous\u003c/code\u003e for every request on every URL for the HTTP methods GET and POST. The JWT itself will be put into the \u003ccode\u003eAuthorization\u003c/code\u003e header as a bearer token. Since the above default rule cannot be used to forward requests to the upstream service, the \u003ccode\u003edeny\u003c/code\u003e authenticator will reject the requests for us and enforce a configuration of an authorization mechanism in a specific rule, which we’re going to define next.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eCreate a rule file (\u003ccode\u003erule.yaml\u003c/code\u003e) with the following contents:\u003c/p\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"yaml\"\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003eid\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003erule1\u003c/span\u003e  \u003ci class=\"conum\" data-value=\"1\"\u003e\u003c/i\u003e\u003cb\u003e(1)\u003c/b\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003ematch\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003eurl\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ehttp://\u0026lt;**\u0026gt;/anonymous\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003eupstream\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ehttp://upstream\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003eexecute\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n    \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003eauthorizer\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eallow_all_requests\u003c/span\u003e\n\n\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003eid\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003erule2\u003c/span\u003e  \u003ci class=\"conum\" data-value=\"2\"\u003e\u003c/i\u003e\u003cb\u003e(2)\u003c/b\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003ematch\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003eurl\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ehttp://\u0026lt;**\u0026gt;/public\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003eupstream\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ehttp://upstream\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003eexecute\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n    \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003eauthenticator\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003enoop\u003c/span\u003e\n    \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003eauthorizer\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eallow_all_requests\u003c/span\u003e\n    \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003eunifier\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003enoop\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"colist arabic\"\u003e\n\u003ctable\u003e\n\u003ctbody\u003e\u003ctr\u003e\n\u003ctd\u003e\u003ci class=\"conum\" data-value=\"1\"\u003e\u003c/i\u003e\u003cb\u003e1\u003c/b\u003e\u003c/td\u003e\n\u003ctd\u003eThis rule matches any host and the \u003ccode\u003e/anonymous\u003c/code\u003e path and forwards the request to our upstream service (which we’re going to define next). In addition, it reuses the configuration from the default rule. Here, the methods, which are allowed, as well as the authorizers and unifiers. So we don’t need to define them here.\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ci class=\"conum\" data-value=\"2\"\u003e\u003c/i\u003e\u003cb\u003e2\u003c/b\u003e\u003c/td\u003e\n\u003ctd\u003eThis rule matches any host and the \u003ccode\u003e/public\u003c/code\u003e path and forwards the request as the previous rule to our upstream service. This rule doesn’t perform any kind of request verification or transformation.\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eCreate or copy the following \u003ccode\u003edocker-compose.yaml\u003c/code\u003e file and modify it to include the correct paths to your \u003ccode\u003econfig.yaml\u003c/code\u003e and \u003ccode\u003erule.yaml\u003c/code\u003e files:\u003c/p\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"yaml\"\u003e\u003cspan style=\"color: #a6e22e\"\u003eversion\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e3\u0026#34;\u003c/span\u003e\n\n\u003cspan style=\"color: #a6e22e\"\u003eservices\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003eheimdall\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e  \u003ci class=\"conum\" data-value=\"1\"\u003e\u003c/i\u003e\u003cb\u003e(1)\u003c/b\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003eimage\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003edadrus/heimdall:latest\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003evolumes\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n      \u003cspan style=\"color: #75715e\"\u003e# Mount your config file:\u003c/span\u003e\n      \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e./config.yaml:/heimdall/conf/config.yaml:ro\u003c/span\u003e\n      \u003cspan style=\"color: #75715e\"\u003e# Mount your rule file:\u003c/span\u003e\n      \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e./rule.yaml:/heimdall/conf/rule.yaml:ro\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003eports\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n      \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e4455:4455\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003ecommand\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e-c /heimdall/conf/config.yaml serve proxy\u003c/span\u003e\n\n  \u003cspan style=\"color: #a6e22e\"\u003eupstream\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e  \u003ci class=\"conum\" data-value=\"2\"\u003e\u003c/i\u003e\u003cb\u003e(2)\u003c/b\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003eimage\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003econtainous/whoami:latest\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"colist arabic\"\u003e\n\u003ctable\u003e\n\u003ctbody\u003e\u003ctr\u003e\n\u003ctd\u003e\u003ci class=\"conum\" data-value=\"1\"\u003e\u003c/i\u003e\u003cb\u003e1\u003c/b\u003e\u003c/td\u003e\n\u003ctd\u003eConfigures heimdall to use our config and rule files and to run in proxy operation mode.\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ci class=\"conum\" data-value=\"2\"\u003e\u003c/i\u003e\u003cb\u003e2\u003c/b\u003e\u003c/td\u003e\n\u003ctd\u003eConfigures the \u0026#34;upstream\u0026#34; service. Here it is a very simple service, which just echoes back everything it receives.\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect1\"\u003e\n\u003ch2 id=\"_run\"\u003eRun\u003c/h2\u003e\n\u003cdiv class=\"sectionbody\"\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eRun docker compose:\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"bash\"\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e$ \u003c/span\u003edocker-compose up\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eDocker will automatically download the required container images. Then, heimdall will start in the \u003ca href=\"/docs/getting_started/concepts/#_proxy_mode\"\u003eproxy\u003c/a\u003e mode and run with the configuration details set in the previous steps. You’ll then be able to see an output similar to\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"bash\"\u003eCreating network \u003cspan style=\"color: #e6db74\"\u003e\u0026#34;heimdall_default\u0026#34;\u003c/span\u003e with the default driver\nStarting heimdall_heimdall_1 ... \u003cspan style=\"color: #f92672\"\u003edone\n\u003c/span\u003eStarting heimdall_upstream_1 ... \u003cspan style=\"color: #f92672\"\u003edone\n\u003c/span\u003eAttaching to heimdall_heimdall_1, heimdall_upstream_1\nupstream_1  | Starting up on port 80\nheimdall_1  | 2022-08-04T07:50:08+02:00 INF No opentracing provider configured. Tracing will be disabled.\nheimdall_1  | 2022-08-04T07:50:08+02:00 INF Instantiating \u003cspan style=\"color: #f92672\"\u003ein \u003c/span\u003ememory cache\nheimdall_1  | 2022-08-04T07:50:08+02:00 INF Loading pipeline definitions\nheimdall_1  | 2022-08-04T07:50:08+02:00 WRN Key store is not configured. NEVER DO IT IN PRODUCTION!!!!\n                                        Generating an RSA key pair.\nheimdall_1  | 2022-08-04T07:50:08+02:00 WRN No key \u003cspan style=\"color: #f6aa11\"\u003eid \u003c/span\u003e\u003cspan style=\"color: #f92672\"\u003efor \u003c/span\u003esigner configured. Taking first entry from the\n                                        key store\nheimdall_1  | 2022-08-04T07:50:08+02:00 INF Starting cache evictor\nheimdall_1  | 2022-08-04T07:50:08+02:00 INF Starting rule definition loader\nheimdall_1  | 2022-08-04T07:50:08+02:00 INF Starting rule definitions provider: file_system\nheimdall_1  | 2022-08-04T07:50:08+02:00 INF Loading initial rule \u003cspan style=\"color: #f6aa11\"\u003eset\n\u003c/span\u003eheimdall_1  | 2022-08-04T07:50:08+02:00 INF Rule \u003cspan style=\"color: #f6aa11\"\u003eset \u003c/span\u003echanged \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003esrc\u003c/span\u003e\u003cspan style=\"color: #f92672\"\u003e=\u003c/span\u003efile_system:/heimdall/conf/rule.yaml\n                                        \u003cspan style=\"color: #f6aa11\"\u003etype\u003c/span\u003e\u003cspan style=\"color: #f92672\"\u003e=\u003c/span\u003eCreate\nheimdall_1  | 2022-08-04T07:50:08+02:00 INF Loading rule \u003cspan style=\"color: #f6aa11\"\u003eset \u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003esrc\u003c/span\u003e\u003cspan style=\"color: #f92672\"\u003e=\u003c/span\u003efile_system:/heimdall/conf/rule.yaml\nheimdall_1  | 2022-08-04T07:50:08+02:00 INF Metrics service starts listening on: :9000\nheimdall_1  | 2022-08-04T07:50:08+02:00 INF Proxy service starts listening on: :4455\nheimdall_1  | 2022-08-04T07:50:08+02:00 INF Management service starts listening on: :4457\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eIgnore the warnings. They are expected and will not have any effects in this case.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect1\"\u003e\n\u003ch2 id=\"_use\"\u003eUse\u003c/h2\u003e\n\u003cdiv class=\"sectionbody\"\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eSend a request to heimdall’s proxy endpoint:\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"bash\"\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e$ \u003c/span\u003ecurl \u003cspan style=\"color: #f92672\"\u003e-v\u003c/span\u003e 127.0.0.1:4455/foobar\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eHere, heimdall will not match any of the defined rules, which will result in the execution of the default rule. Thus, you’ll see \u003ccode\u003e403 Forbidden\u003c/code\u003e as answer.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eTry sending requests to the \u003ccode\u003e/public\u003c/code\u003e and the \u003ccode\u003e/anonymous\u003c/code\u003e endpoints and see what happens. In both cases, the response will be an HTTP \u003ccode\u003e200 OK\u003c/code\u003e. And the response from the \u003ccode\u003e/anonymous\u003c/code\u003e endpoint will also contain an \u003ccode\u003eAuthorization\u003c/code\u003e header containing a JWT, e.g. as shown below.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"bash\"\u003e\u003cspan style=\"color: #f92672\"\u003e*\u003c/span\u003e   Trying 127.0.0.1:4455...\n\u003cspan style=\"color: #f92672\"\u003e*\u003c/span\u003e Connected to 127.0.0.1 \u003cspan style=\"color: #f92672\"\u003e(\u003c/span\u003e127.0.0.1\u003cspan style=\"color: #f92672\"\u003e)\u003c/span\u003e port 4455 \u003cspan style=\"color: #f92672\"\u003e(\u003c/span\u003e\u003cspan style=\"color: #75715e\"\u003e#0)\u003c/span\u003e\n\u003cspan style=\"color: #f92672\"\u003e\u0026gt;\u003c/span\u003e GET /foobar HTTP/1.1\n\u003cspan style=\"color: #f92672\"\u003e\u0026gt;\u003c/span\u003e Host: 127.0.0.1:4455\n\u003cspan style=\"color: #f92672\"\u003e\u0026gt;\u003c/span\u003e User-Agent: curl/7.74.0\n\u003cspan style=\"color: #f92672\"\u003e\u0026gt;\u003c/span\u003e Accept: \u003cspan style=\"color: #f92672\"\u003e*\u003c/span\u003e/\u003cspan style=\"color: #f92672\"\u003e*\u003c/span\u003e\n\u003cspan style=\"color: #f92672\"\u003e\u0026gt;\u003c/span\u003e\n\u003cspan style=\"color: #f92672\"\u003e*\u003c/span\u003e Mark bundle as not supporting multiuse\n\u0026lt; HTTP/1.1 200 OK\n\u0026lt; Date: Thu, 04 Aug 2022 07:53:41 GMT\n\u0026lt; Content-Type: text/plain\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e;\u003c/span\u003e \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003echarset\u003c/span\u003e\u003cspan style=\"color: #f92672\"\u003e=\u003c/span\u003eutf-8\n\u0026lt; Content-Length: 872\n\u0026lt;\nHostname: 4f809f75f31b\nIP: 127.0.0.1\nIP: 172.22.0.3\nRemoteAddr: 172.22.0.2:42100\nGET /foobar HTTP/1.1\nHost: upstream\nUser-Agent: curl/7.74.0\nAccept: \u003cspan style=\"color: #f92672\"\u003e*\u003c/span\u003e/\u003cspan style=\"color: #f92672\"\u003e*\u003c/span\u003e\nAuthorization: Bearer eyJhbGciOiJQUzI1NiIsImtpZCI6IjNhYjFiMDdmMmMyNjlkMWVlMTRjNzQ2NDA4\nOTAyZjRlNWQ1MDAyOTgiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2NTkzMzczMjEsImlhdCI6MTY1OTMzNzAyMSw\niaXNzIjoiaGVpbWRhbGwiLCJqdGkiOiJjMmEzNjczMy04ZDBjLTQzYWQtOGFkNi0xM2Q4NGVhNDI1MTgiLCJuY\nmYiOjE2NTkzMzcwMjEsInN1YiI6ImFub255bW91cyJ9.gw-h15LaUUYV-Sjk6Vf-kZflnZxn88lejVIIatKliv\nFkeUz8oo9x9juKBSzr4nIVWjGZ_atGVmLoKshudHdnpvABx5cgBaz2_KDgifVzGORE1zld9vGDpU7IPjOyC9-M\nb7vOOA1fq9pbQ4nfXw100AJJKFXSct9cYa3163kk_s-jEIPclhB0ZiPqGI-t_GiYJBCVKOTJPkkLKB51KCgn2y\nPvO3qLCwO81JdCSFG9k2WLjWZlQe-a8u4El-2qctx8yB-vBFPIaQlwCJh66of3hcUs98IoVlMLGdTJSI4pX9nK\ns8OMxVO37eI501gZXXkF5IiSsRAqV_o8pMcGZ47Ztg\nForwarded: \u003cspan style=\"color: #f92672\"\u003efor\u003c/span\u003e\u003cspan style=\"color: #f92672\"\u003e=\u003c/span\u003e172.22.0.1\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003eproto\u003c/span\u003e\u003cspan style=\"color: #f92672\"\u003e=\u003c/span\u003ehttp\nX-Forwarded-For: 172.22.0.1\n\n\u003cspan style=\"color: #f92672\"\u003e*\u003c/span\u003e Connection \u003cspan style=\"color: #75715e\"\u003e#0 to host 127.0.0.1 left intact\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eYou should also be able to see similar output as below from the docker-compose environment:\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"bash\"\u003e...\n2022-08-04T07:53:41+02:00 INF TX started \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e_client_ip\u003c/span\u003e\u003cspan style=\"color: #f92672\"\u003e=\u003c/span\u003e127.0.0.1 \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e_http_host\u003c/span\u003e\u003cspan style=\"color: #f92672\"\u003e=\u003c/span\u003e127.0.0.1:4455 \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e_http_method\u003c/span\u003e\u003cspan style=\"color: #f92672\"\u003e=\u003c/span\u003eGET\n \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e_http_path\u003c/span\u003e\u003cspan style=\"color: #f92672\"\u003e=\u003c/span\u003e/foobar \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e_http_scheme\u003c/span\u003e\u003cspan style=\"color: #f92672\"\u003e=\u003c/span\u003ehttp \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e_http_user_agent\u003c/span\u003e\u003cspan style=\"color: #f92672\"\u003e=\u003c/span\u003ecurl/7.74.0 \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e_tx_start\u003c/span\u003e\u003cspan style=\"color: #f92672\"\u003e=\u003c/span\u003e1659599621\n2022-08-04T07:53:41+02:00 INF TX finished \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e_access_granted\u003c/span\u003e\u003cspan style=\"color: #f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color: #f6aa11\"\u003etrue \u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e_body_bytes_sent\u003c/span\u003e\u003cspan style=\"color: #f92672\"\u003e=\u003c/span\u003e872 \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e_client_ip\u003c/span\u003e\u003cspan style=\"color: #f92672\"\u003e=\u003c/span\u003e127.0.0.1\n \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e_http_host\u003c/span\u003e\u003cspan style=\"color: #f92672\"\u003e=\u003c/span\u003e127.0.0.1:4455 \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e_http_method\u003c/span\u003e\u003cspan style=\"color: #f92672\"\u003e=\u003c/span\u003eGET \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e_http_path\u003c/span\u003e\u003cspan style=\"color: #f92672\"\u003e=\u003c/span\u003e/foobar \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e_http_scheme\u003c/span\u003e\u003cspan style=\"color: #f92672\"\u003e=\u003c/span\u003ehttp \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e_http_status_code\u003c/span\u003e\u003cspan style=\"color: #f92672\"\u003e=\u003c/span\u003e200\n \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e_http_user_agent\u003c/span\u003e\u003cspan style=\"color: #f92672\"\u003e=\u003c/span\u003ecurl/7.74.0 \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e_subject\u003c/span\u003e\u003cspan style=\"color: #f92672\"\u003e=\u003c/span\u003eanonymous \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e_tx_duration_ms\u003c/span\u003e\u003cspan style=\"color: #f92672\"\u003e=\u003c/span\u003e0 \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e_tx_start\u003c/span\u003e\u003cspan style=\"color: #f92672\"\u003e=\u003c/span\u003e1659599621\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eBy the way, this quickstart is also available on \u003ca href=\"https://github.com/dadrus/heimdall/tree/main/examples/docker-compose/quickstarts\"\u003eGitHub\u003c/a\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n","sections":["Getting Started"],"tags":null,"title":"Proxy Service Quickstart","url":"/docs/getting_started/proxy_service_quickstart/"},{"categories":null,"content":" Configuration in heimdall can refer to two different things:\nThe fully dynamic configuration of rules - the rule set\nThe static startup configuration\nElements in the static configuration set up the services, like decision service, which basically define the entry points, heimdall will listen to, the observability capabilities, like logging, the supported pipeline mechanisms, the default rule, as well as the rule providers (these elements are not expected to change often).\nThe rule set contains everything that defines how the requests are handled by heimdall for your system. This configuration can change and is seamlessly hot-reloaded, without any request interruption or connection loss.\nRule Set Configuration Heimdall gets the rule sets from rule providers, which, depending on the provider, can load rules from a plain old configuration file, residing in the local file system, or even integrate with Kubernetes to load rules from custom resources.\nIn all cases, a single rule definition adheres to the schema defined in rule configuration.\nStatic Configuration There are two different, not mutually exclusive (you can combine them), ways to define static configuration options in Heimdall:\nin a configuration file (only YAML is supported as format)\nas environment variables\nThe evaluation happens also in the order stated above. That also means, you can always overwrite configuration options defined in a configuration file with corresponding environment variables.\nIf no configuration is provided, heimdall will set useful defaults. These are however not enough, as heimdall doesn’t know your context - which mechanisms are required for the one or the other of your upstream services. So, you’ll not really be able to use heimdall as all requests will be answered with an HTTP 405 Method Not Allowed response code.\nConfiguration File At start up, heimdall searches for static configuration in a file named heimdall.yaml in\n/etc/heimdall\n$HOME/.config\nthe current working directory\nYou can also override this using the config argument: heimdall --config \u0026lt;path-to-your-config-file\u0026gt;.\nThe values in the configuration file can also make use of environment variables. Access to these happens using Bash syntax. Following expressions are supported:\n${var} - Value of $var\n${var=default} - If $var is not set, evaluate expression as default\n${var:=default} - If $var is not set or is empty, evaluate expression as default\nExample 1. Possible minimal fully working configuration The configuration below defines a default rule which lets heimdall create a JSON Web Token (JWT) with sub claim set to anonymous for every request on every URL for the HTTP methods GET and POST. The JWT itself will be put into the Authorization header as a bearer token.\nlog: level: info rules: mechanisms: authenticators: - id: anonymous_authenticator type: anonymous unifiers: - id: create_jwt type: jwt default: methods: - GET - POST execute: - authenticator: anonymous_authenticator - unifier: create_jwt Example 2. Configuration with a mechanism defined using environment variables substitution rules: mechanisms: authenticators: - id: hydra_authenticator type: oauth2_introspection config: introspection_endpoint: url: http://hydra:4445/oauth2/introspect auth: type: basic_auth config: user: ${INTROSPECT_EP_USER} password: ${INTROSPECT_EP_PASSWORD} unifiers: - id: create_jwt type: jwt Environment Variables Every configuration property, which can be defined in a configuration file can also be defined as environment variable. Following rules apply:\nIf not specified while starting heimdall, all variables start with HEIMDALLCFG_ prefix.\nIf for whatever reason, your environment configuration contains variables starting with HEIMDALLCFG_, which do not define heimdall specific configuration, heimdall will refuse starting if such configuration variable clashes (has an unexpected type) with heimdall’s configuration properties (even for environment variables, the configuration is type safe). You can overcome such situation, by ether renaming such variables, or, if this is not possible, make use of the --env-config-prefix flag with heimdall’s serve command. Properties in a hierarchy are separated by _\nE.g. the log level can be set to info in a config file as also shown in the above example with\nlog: level: info and using an environment variable with\nHEIMDALLCFG_LOG_LEVEL=info Array entries must be defined using _\u0026lt;IDX\u0026gt;[_], with IDX being the index of the array starting with 0 and _ in brackets being only required, if the value of the configured element has a structure/hierarchy.\nE.g. the methods of the default rule can be configured in a config file as\nrules: default: methods: - GET - POST and using environment variables with\nHEIMDALLCFG_RULES_DEFAULT_METHODS_0=GET HEIMDALLCFG_RULES_DEFAULT_METHODS_1=POST For structured configuration, like the definition of the authenticators in the example above\nrules: mechanisms: authenticators: - id: anonymous_authenticator type: anonymous The corresponding environment variables would be\nHEIMDALLCFG_RULES_MECHANISMS_AUTHENTICATORS_0_ID=anonymous_authenticator HEIMDALLCFG_RULES_MECHANISMS__AUTHENTICATORS_0_TYPE=anonymous If a name of a property has _ it must be escaped with an additional _.\nE.g. the service name, appearing for heimdall for your tracing backend can be configured in a configuration file with\ntracing: service_name: foobar and using the environment variables with\nHEIMDALLCFG_TRACING_SERVICE__NAME=foobar ","description":"","html_content":"\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eConfiguration in heimdall can refer to two different things:\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"ulist\"\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eThe fully dynamic \u003ca href=\"/docs/configuration/rules/configuration/\"\u003econfiguration of rules\u003c/a\u003e - the rule set\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eThe static startup configuration\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eElements in the static configuration set up the services, like \u003ca href=\"/docs/configuration/services/decision/\"\u003edecision service\u003c/a\u003e, which basically define the entry points, heimdall will listen to, the observability capabilities, like \u003ca href=\"/docs/configuration/observability/logging/\"\u003elogging\u003c/a\u003e, the supported \u003ca href=\"/docs/configuration/rules/pipeline_mechanisms/overview/\"\u003epipeline mechanisms\u003c/a\u003e, the \u003ca href=\"/docs/configuration/rules/default/\"\u003edefault rule\u003c/a\u003e, as well as the \u003ca href=\"/docs/configuration/rules/providers/\"\u003erule providers\u003c/a\u003e (these elements are not expected to change often).\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThe rule set contains everything that defines how the requests are handled by heimdall for your system.\nThis configuration can change and is seamlessly hot-reloaded, without any request interruption or connection loss.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect1\"\u003e\n\u003ch2 id=\"_rule_set_configuration\"\u003eRule Set Configuration\u003c/h2\u003e\n\u003cdiv class=\"sectionbody\"\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eHeimdall gets the rule sets from \u003ca href=\"/docs/configuration/rules/providers/\"\u003erule providers\u003c/a\u003e, which, depending on the provider, can load rules from a plain old configuration file, residing in the local file system, or even integrate with Kubernetes to load rules from custom resources.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eIn all cases, a single rule definition adheres to the schema defined in \u003ca href=\"/docs/configuration/rules/configuration/\"\u003erule configuration\u003c/a\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect1\"\u003e\n\u003ch2 id=\"_static_configuration\"\u003eStatic Configuration\u003c/h2\u003e\n\u003cdiv class=\"sectionbody\"\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThere are two different, not mutually exclusive (you can combine them), ways to define static configuration options in Heimdall:\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"olist arabic\"\u003e\n\u003col class=\"arabic\"\u003e\n\u003cli\u003e\n\u003cp\u003ein a \u003ca href=\"#_configuration_file\"\u003econfiguration file\u003c/a\u003e (only \u003ca href=\"https://yaml.org/spec/1.2.2/\"\u003eYAML\u003c/a\u003e is supported as format)\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eas \u003ca href=\"#_environment_variables\"\u003eenvironment variables\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThe evaluation happens also in the order stated above.\nThat also means, you can always overwrite configuration options defined in a configuration file with corresponding environment variables.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eIf no configuration is provided, heimdall will set useful defaults.\nThese are however not enough, as heimdall doesn’t know your context - which mechanisms are required for the one or the other of your upstream services.\nSo, you’ll not really be able to use heimdall as all requests will be answered with an HTTP \u003ccode\u003e405 Method Not Allowed\u003c/code\u003e response code.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect2\"\u003e\n\u003ch3 id=\"_configuration_file\"\u003eConfiguration File\u003c/h3\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eAt start up, heimdall searches for static configuration in a file named \u003ccode\u003eheimdall.yaml\u003c/code\u003e in\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"ulist\"\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003e/etc/heimdall\u003c/code\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003e$HOME/.config\u003c/code\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003ethe current working directory\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eYou can also override this using the \u003ccode\u003econfig\u003c/code\u003e argument: \u003ccode\u003eheimdall --config \u0026lt;path-to-your-config-file\u0026gt;\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThe values in the configuration file can also make use of environment variables. Access to these happens using Bash syntax. Following expressions are supported:\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"ulist\"\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003e${var}\u003c/code\u003e - Value of \u003ccode\u003e$var\u003c/code\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003e${var=default}\u003c/code\u003e - If \u003ccode\u003e$var\u003c/code\u003e is not set, evaluate expression as \u003ccode\u003edefault\u003c/code\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003e${var:=default}\u003c/code\u003e - If \u003ccode\u003e$var\u003c/code\u003e is not set or is empty, evaluate expression as \u003ccode\u003edefault\u003c/code\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\u003cdiv class=\"exampleblock\"\u003e\n\u003cdiv class=\"title\"\u003eExample 1. Possible minimal fully working configuration\u003c/div\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThe configuration below defines a \u003ca href=\"/docs/configuration/rules/default/\"\u003edefault rule\u003c/a\u003e which lets heimdall create a JSON Web Token (JWT) with \u003ccode\u003esub\u003c/code\u003e claim set to \u003ccode\u003eanonymous\u003c/code\u003e for every request on every URL for the HTTP methods GET and POST.\nThe JWT itself will be put into the \u003ccode\u003eAuthorization\u003c/code\u003e header as a bearer token.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"yaml\"\u003e\u003cspan style=\"color: #a6e22e\"\u003elog\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003elevel\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003einfo\u003c/span\u003e\n\n\u003cspan style=\"color: #a6e22e\"\u003erules\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003emechanisms\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003eauthenticators\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n    \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003eid\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eanonymous_authenticator\u003c/span\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003etype\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eanonymous\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003eunifiers\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n    \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003eid\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ecreate_jwt\u003c/span\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003etype\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ejwt\u003c/span\u003e\n\n  \u003cspan style=\"color: #a6e22e\"\u003edefault\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003emethods\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n      \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eGET\u003c/span\u003e\n      \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ePOST\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003eexecute\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n      \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003eauthenticator\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eanonymous_authenticator\u003c/span\u003e\n      \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003eunifier\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ecreate_jwt\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"exampleblock\"\u003e\n\u003cdiv class=\"title\"\u003eExample 2. Configuration with a mechanism defined using environment variables substitution\u003c/div\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"yaml\"\u003e\u003cspan style=\"color: #a6e22e\"\u003erules\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003emechanisms\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003eauthenticators\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n    \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003eid\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ehydra_authenticator\u003c/span\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003etype\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eoauth2_introspection\u003c/span\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003econfig\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n        \u003cspan style=\"color: #a6e22e\"\u003eintrospection_endpoint\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n          \u003cspan style=\"color: #a6e22e\"\u003eurl\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ehttp://hydra:4445/oauth2/introspect\u003c/span\u003e\n          \u003cspan style=\"color: #a6e22e\"\u003eauth\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n            \u003cspan style=\"color: #a6e22e\"\u003etype\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ebasic_auth\u003c/span\u003e\n            \u003cspan style=\"color: #a6e22e\"\u003econfig\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n              \u003cspan style=\"color: #a6e22e\"\u003euser\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e${INTROSPECT_EP_USER}\u003c/span\u003e\n              \u003cspan style=\"color: #a6e22e\"\u003epassword\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e${INTROSPECT_EP_PASSWORD}\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003eunifiers\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n    \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003eid\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ecreate_jwt\u003c/span\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003etype\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ejwt\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect2\"\u003e\n\u003ch3 id=\"_environment_variables\"\u003eEnvironment Variables\u003c/h3\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eEvery configuration property, which can be defined in a \u003ca href=\"#_configuration_file\"\u003econfiguration file\u003c/a\u003e can also be defined as environment variable.\nFollowing rules apply:\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"ulist\"\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eIf not specified while starting heimdall, all variables start with \u003ccode\u003eHEIMDALLCFG_\u003c/code\u003e prefix.\u003c/p\u003e\n\u003cdiv class=\"admonitionblock caution\"\u003e\n\u003ctable\u003e\n\u003ctbody\u003e\u003ctr\u003e\n\u003ctd class=\"icon\"\u003e\n\u003ci class=\"fa icon-caution\" title=\"Caution\"\u003e\u003c/i\u003e\n\u003c/td\u003e\n\u003ctd class=\"content\"\u003e\nIf for whatever reason, your environment configuration contains variables starting with \u003ccode\u003eHEIMDALLCFG_\u003c/code\u003e, which do not define heimdall specific configuration, heimdall will refuse starting if such configuration variable clashes (has an unexpected type) with heimdall’s configuration properties (even for environment variables, the configuration is type safe).\nYou can overcome such situation, by ether renaming such variables, or, if this is not possible, make use of the \u003ccode\u003e--env-config-prefix\u003c/code\u003e flag with heimdall’s \u003ccode\u003eserve\u003c/code\u003e command.\n\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eProperties in a hierarchy are separated by \u003ccode\u003e_\u003c/code\u003e\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eE.g. the log level can be set to \u003ccode\u003einfo\u003c/code\u003e in a config file as also shown in the above example with\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"yaml\"\u003e\u003cspan style=\"color: #a6e22e\"\u003elog\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003elevel\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003einfo\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eand using an environment variable with\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"bash\"\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003eHEIMDALLCFG_LOG_LEVEL\u003c/span\u003e\u003cspan style=\"color: #f92672\"\u003e=\u003c/span\u003einfo\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eArray entries must be defined using \u003ccode\u003e_\u0026lt;IDX\u0026gt;[_]\u003c/code\u003e, with \u003ccode\u003eIDX\u003c/code\u003e being the index of the array starting with \u003ccode\u003e0\u003c/code\u003e and \u003ccode\u003e_\u003c/code\u003e in brackets being only required, if the value of the configured element has a structure/hierarchy.\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eE.g. the \u003ccode\u003emethods\u003c/code\u003e of the \u003ca href=\"/docs/configuration/rules/default/\"\u003edefault rule\u003c/a\u003e can be configured in a config file as\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"yaml\"\u003e\u003cspan style=\"color: #a6e22e\"\u003erules\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003edefault\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003emethods\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n      \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eGET\u003c/span\u003e\n      \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ePOST\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eand using environment variables with\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"bash\"\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003eHEIMDALLCFG_RULES_DEFAULT_METHODS_0\u003c/span\u003e\u003cspan style=\"color: #f92672\"\u003e=\u003c/span\u003eGET\n\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003eHEIMDALLCFG_RULES_DEFAULT_METHODS_1\u003c/span\u003e\u003cspan style=\"color: #f92672\"\u003e=\u003c/span\u003ePOST\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eFor structured configuration, like the definition of the authenticators in the example above\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"yaml\"\u003e\u003cspan style=\"color: #a6e22e\"\u003erules\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003emechanisms\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003eauthenticators\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n    \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003eid\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eanonymous_authenticator\u003c/span\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003etype\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eanonymous\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThe corresponding environment variables would be\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"bash\"\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003eHEIMDALLCFG_RULES_MECHANISMS_AUTHENTICATORS_0_ID\u003c/span\u003e\u003cspan style=\"color: #f92672\"\u003e=\u003c/span\u003eanonymous_authenticator\n\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003eHEIMDALLCFG_RULES_MECHANISMS__AUTHENTICATORS_0_TYPE\u003c/span\u003e\u003cspan style=\"color: #f92672\"\u003e=\u003c/span\u003eanonymous\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eIf a name of a property has \u003ccode\u003e_\u003c/code\u003e it must be escaped with an additional \u003ccode\u003e_\u003c/code\u003e.\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eE.g. the service name, appearing for heimdall for your tracing backend can be configured in a configuration file with\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"yaml\"\u003e\u003cspan style=\"color: #a6e22e\"\u003etracing\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003eservice_name\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003efoobar\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eand using the environment variables with\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"bash\"\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003eHEIMDALLCFG_TRACING_SERVICE__NAME\u003c/span\u003e\u003cspan style=\"color: #f92672\"\u003e=\u003c/span\u003efoobar\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n","sections":["Getting Started"],"tags":null,"title":"Configuration Introduction","url":"/docs/getting_started/configuration_introduction/"},{"categories":null,"content":" Heimdall is shipped in multiple formats and architectures to suit a variety of deployment patterns. Available installation options are:\nSource code\nBinary\nDocker Image\nHelm Chart\nSource Code You can always build a copy of heimdall by following the following instructions for your OS/environment.\nPrerequisites git\nThe Go programming language \u0026gt;= 1.19\nDownload Retrieve the latest copy of heimdall source code by cloning the git repository\n$ git clone git@github.com:dadrus/heimdall.git Build with go Build using a single line with go build\n$ CGO_ENABLED=0 go build -trimpath -ldflags=\u0026#34;-buildid= -w -s -X github.com/dadrus/heimdall/version.Version==my-custom-build\u0026#34; The flags are set by intention. Using -trimpath and -buildid= as part of the -ldflags argument ensures the build is reproducible (See also Reproducible Builds). Other flags remove unused symbols and debug information.\nBinary Prebuild binaries are available with every released version on GitHub, as well as for every merged PR to the main branch. The version of the latter is set to the git SHA1. Supported operating systems/architectures are:\nlinux/amd64\nlinux/arm64\nlinux/arm - which is armv7 architecture\ndarwin/amd64\ndarwin/arm64, and\nwindows/amd64\nFor Linux and Darwin the binaries are archived with tar.gz and for Windows with zip.\nDownload Retrieve the desired released version of heimdall binary for your operating system/architecture\nARCH=[your arch] OS=[your os] VERSION=[desired version] curl -L https://github.com/dadrus/heimdall/releases/download/${VERSION}/heimdall-${VERSION}-${OS}-${ARCH}.tar.gz \\ | tar -z -x Docker Image Heimdall utilizes a minimal docker multi-arch image which you can find on DockerHub. As with Binary releases, heimdall can be pulled in several flavors. These are however currently limited to the Linux OS. Supported architectures are:\namd64\narm64\narmv7\nAll docker images are rootless - so heimdall will always run as a non-root user. Since Heimdall does not have any dependencies, the images contain only the binary of Heimdall and the settings related to the OS user and group permissions, heimdall is running with.\nPrerequisites Docker\nPull Image Following tag patterns exist:\nx.y.z[-\u0026lt;prerelease-identifier\u0026gt;] - will pull a specific tagged release.\n$ docker pull dadrus/heimdall:0.6.0-alpha \u0026amp;\u0026amp; docker run dadrus/heimdall:0.6.0-alpha --version heimdall version v0.6.0-alpha latest - will pull the most recent tagged release.\n$ docker pull dadrus/heimdall:latest \u0026amp;\u0026amp; docker run dadrus/heimdall:latest --version heimdall version v0.6.0-alpha Helm Chart Heimdall can be installed via a Helm chart with a few simple steps, depending on if you are deploying for the first time, or upgrading from an existing installation.\nPrerequisites A Kubernetes version \u0026gt;= 1.19 or \u0026gt;= 1.23 if you would like to use HPA\nHelm 3.0+\nAdding the Helm Repository The heimdall Helm Chart is published at https://dadrus.github.io/heimdall/charts. You can add this repo with the following command:\n$ helm repo add dadrus https://dadrus.github.io/heimdall/charts $ helm repo update Installing the Chart This chart expects a heimdall configuration file with authentication, authorization and so on mechanisms, required for your particular setup, which can be passed by using the -f heimdall.yaml flag during the installation.\nIf you need to override the name of the heimdall resources such as the deployment or services, the traditional nameOverride and fullnameOverride properties are supported.\nBy default, heimdall requires custom resource definitions (CRDs) installed in the cluster. The Helm client will install it for you.\nTo install the chart with the release name my-release (my-release is the name that you choose) and configure heimdall to operate in decision mode:\n$ helm install my-release -f heimdall.yaml dadrus/heimdall If you need proxy mode, install it with:\n$ helm install my-release -f heimdall.yaml --set operationMode=proxy dadrus/heimdall For more advanced configuration and details about helm values, please see the helm chart.\nPost-Install Steps Integration with Ingress After having installed heimdall, you have to integrate it with your ingress controller. For decision mode that means setting corresponding annotations on Ingress resources to let the traffic first be verified by heimdall before it is forwarded to the upstream services by the Ingress Controller.\nMetrics Collection Since heimdall exposes a comprehensive set of Prometheus style metrics on the Metrics endpoint, you can, assuming you are running a Prometheus Operator in your cluster, create the following PodMonitor resource to enable metrics collection.\napiVersion: monitoring.coreos.com/v1 kind: PodMonitor metadata: name: heimdall-pod-monitor labels: release: prometheus app.kubernetes.io/instance: my-release app.kubernetes.io/name: heimdall app.kubernetes.io/part-of: heimdall spec: selector: matchLabels: app.kubernetes.io/instance: my-release app.kubernetes.io/name: heimdall podMetricsEndpoints: - path: /metrics port: http-metrics scheme: http interval: 30s jobLabel: heimdall-pod-monitor namespaceSelector: matchNames: - default The definition of the PodMonitor above assumes, you’ve installed heimdall in the default namespace as shown in the Installing the Chart section. If this is not the case, you need to adjust the metadata property by adding the corresponding namespace information, as well as the namespaceSelector.\nIf your Prometheus deployment is not done through the operator, you don’t need to do anything, as the chart already sets the relevant annotations: prometheus.io/scrape, prometheus.io/path and prometheus.io/port.\n","description":"","html_content":"\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eHeimdall is shipped in multiple formats and architectures to suit a variety of deployment patterns. Available installation options are:\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"ulist\"\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"#_source_code\"\u003eSource code\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"#_binary\"\u003eBinary\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"#_docker_image\"\u003eDocker Image\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"#_helm_chart\"\u003eHelm Chart\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect1\"\u003e\n\u003ch2 id=\"_source_code\"\u003eSource Code\u003c/h2\u003e\n\u003cdiv class=\"sectionbody\"\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eYou can always build a copy of heimdall by following the following instructions for your OS/environment.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect2\"\u003e\n\u003ch3 id=\"_prerequisites\"\u003ePrerequisites\u003c/h3\u003e\n\u003cdiv class=\"ulist\"\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://git-scm.com/\"\u003egit\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eThe \u003ca href=\"https://go.dev/dl/\"\u003eGo\u003c/a\u003e programming language \u0026gt;= 1.19\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect2\"\u003e\n\u003ch3 id=\"_download\"\u003eDownload\u003c/h3\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eRetrieve the latest copy of heimdall source code by cloning the git repository\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"bash\"\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e$ \u003c/span\u003egit clone git@github.com:dadrus/heimdall.git\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect2\"\u003e\n\u003ch3 id=\"_build_with_go\"\u003eBuild with go\u003c/h3\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eBuild using a single line with \u003ccode\u003ego build\u003c/code\u003e\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"bash\"\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e$ CGO_ENABLED\u003c/span\u003e\u003cspan style=\"color: #f92672\"\u003e=\u003c/span\u003e0 go build \u003cspan style=\"color: #f92672\"\u003e-trimpath\u003c/span\u003e \u003cspan style=\"color: #f92672\"\u003e-ldflags\u003c/span\u003e\u003cspan style=\"color: #f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;-buildid= -w -s -X github.com/dadrus/heimdall/version.Version==my-custom-build\u0026#34;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThe flags are set by intention. Using \u003ccode\u003e-trimpath\u003c/code\u003e and \u003ccode\u003e-buildid=\u003c/code\u003e as part of the \u003ccode\u003e-ldflags\u003c/code\u003e argument ensures the build is reproducible (See also \u003ca href=\"https://reproducible-builds.org/\"\u003eReproducible Builds\u003c/a\u003e). Other flags remove unused symbols and debug information.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect1\"\u003e\n\u003ch2 id=\"_binary\"\u003eBinary\u003c/h2\u003e\n\u003cdiv class=\"sectionbody\"\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003ePrebuild binaries are available with every released version on \u003ca href=\"https://github.com/dadrus/heimdall/releases/latest\"\u003eGitHub\u003c/a\u003e, as well as for every merged PR to the main branch. The version of the latter is set to the git SHA1. Supported operating systems/architectures are:\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"ulist\"\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003elinux/amd64\u003c/code\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003elinux/arm64\u003c/code\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003elinux/arm\u003c/code\u003e - which is \u003ccode\u003earmv7\u003c/code\u003e architecture\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003edarwin/amd64\u003c/code\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003edarwin/arm64\u003c/code\u003e, and\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003ewindows/amd64\u003c/code\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eFor Linux and Darwin the binaries are archived with tar.gz and for Windows with zip.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect2\"\u003e\n\u003ch3 id=\"_download_2\"\u003eDownload\u003c/h3\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eRetrieve the desired released version of heimdall binary for your operating system/architecture\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"bash\"\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003eARCH\u003c/span\u003e\u003cspan style=\"color: #f92672\"\u003e=[\u003c/span\u003eyour \u003cspan style=\"color: #f6aa11\"\u003earch\u003c/span\u003e\u003cspan style=\"color: #f92672\"\u003e]\u003c/span\u003e\n\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003eOS\u003c/span\u003e\u003cspan style=\"color: #f92672\"\u003e=[\u003c/span\u003eyour os]\n\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003eVERSION\u003c/span\u003e\u003cspan style=\"color: #f92672\"\u003e=[\u003c/span\u003edesired version]\ncurl \u003cspan style=\"color: #f92672\"\u003e-L\u003c/span\u003e https://github.com/dadrus/heimdall/releases/download/\u003cspan style=\"color: #f92672\"\u003e${\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003eVERSION\u003c/span\u003e\u003cspan style=\"color: #f92672\"\u003e}\u003c/span\u003e/heimdall-\u003cspan style=\"color: #f92672\"\u003e${\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003eVERSION\u003c/span\u003e\u003cspan style=\"color: #f92672\"\u003e}\u003c/span\u003e-\u003cspan style=\"color: #f92672\"\u003e${\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003eOS\u003c/span\u003e\u003cspan style=\"color: #f92672\"\u003e}\u003c/span\u003e-\u003cspan style=\"color: #f92672\"\u003e${\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003eARCH\u003c/span\u003e\u003cspan style=\"color: #f92672\"\u003e}\u003c/span\u003e.tar.gz \u003cspan style=\"color: #ae81ff\"\u003e\\\u003c/span\u003e\n    | \u003cspan style=\"color: #f6aa11\"\u003etar\u003c/span\u003e \u003cspan style=\"color: #f92672\"\u003e-z\u003c/span\u003e \u003cspan style=\"color: #f92672\"\u003e-x\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect1\"\u003e\n\u003ch2 id=\"_docker_image\"\u003eDocker Image\u003c/h2\u003e\n\u003cdiv class=\"sectionbody\"\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eHeimdall utilizes a minimal docker multi-arch image which you can find on \u003ca href=\"https://hub.docker.com/r/dadrus/heimdall\"\u003eDockerHub\u003c/a\u003e. As with \u003ca href=\"#_binary\"\u003eBinary\u003c/a\u003e releases, heimdall can be pulled in several flavors. These are however currently limited to the Linux OS. Supported architectures are:\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"ulist\"\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003eamd64\u003c/code\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003earm64\u003c/code\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003earmv7\u003c/code\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eAll docker images are rootless - so heimdall will always run as a non-root user. Since Heimdall does not have any dependencies, the images contain only the binary of Heimdall and the settings related to the OS user and group permissions, heimdall is running with.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect2\"\u003e\n\u003ch3 id=\"_prerequisites_2\"\u003ePrerequisites\u003c/h3\u003e\n\u003cdiv class=\"ulist\"\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://docs.docker.com/install/\"\u003eDocker\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect2\"\u003e\n\u003ch3 id=\"_pull_image\"\u003ePull Image\u003c/h3\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eFollowing tag patterns exist:\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"ulist\"\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003ex.y.z[-\u0026lt;prerelease-identifier\u0026gt;]\u003c/code\u003e - will pull a specific tagged release.\u003c/p\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"bash\"\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e$ \u003c/span\u003edocker pull dadrus/heimdall:0.6.0-alpha \u003cspan style=\"color: #f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e docker run dadrus/heimdall:0.6.0-alpha \u003cspan style=\"color: #f92672\"\u003e--version\u003c/span\u003e\nheimdall version v0.6.0-alpha\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003elatest\u003c/code\u003e - will pull the most recent tagged release.\u003c/p\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"bash\"\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e$ \u003c/span\u003edocker pull dadrus/heimdall:latest \u003cspan style=\"color: #f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e docker run dadrus/heimdall:latest \u003cspan style=\"color: #f92672\"\u003e--version\u003c/span\u003e\nheimdall version v0.6.0-alpha\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect1\"\u003e\n\u003ch2 id=\"_helm_chart\"\u003eHelm Chart\u003c/h2\u003e\n\u003cdiv class=\"sectionbody\"\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eHeimdall can be installed via a Helm chart with a few simple steps, depending on if you are deploying for the first time, or upgrading from an existing installation.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect2\"\u003e\n\u003ch3 id=\"_prerequisites_3\"\u003ePrerequisites\u003c/h3\u003e\n\u003cdiv class=\"ulist\"\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eA Kubernetes version \u0026gt;= 1.19 or \u0026gt;= 1.23 if you would like to use HPA\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://helm.sh/docs/intro/install/\"\u003eHelm\u003c/a\u003e 3.0+\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect2\"\u003e\n\u003ch3 id=\"_adding_the_helm_repository\"\u003eAdding the Helm Repository\u003c/h3\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThe heimdall Helm Chart is published at \u003ccode\u003ehttps://dadrus.github.io/heimdall/charts\u003c/code\u003e. You can add this repo with the following command:\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"bash\"\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e$ \u003c/span\u003ehelm repo add dadrus https://dadrus.github.io/heimdall/charts\n\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e$ \u003c/span\u003ehelm repo update\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect2\"\u003e\n\u003ch3 id=\"_installing_the_chart\"\u003eInstalling the Chart\u003c/h3\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThis chart expects a \u003ca href=\"/docs/getting_started/configuration_introduction/#_configuration_file\"\u003eheimdall configuration file\u003c/a\u003e with authentication, authorization and so on mechanisms, required for your particular setup, which can be passed by using the \u003ccode\u003e-f heimdall.yaml\u003c/code\u003e flag during the installation.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eIf you need to override the name of the heimdall resources such as the deployment or services, the traditional \u003ccode\u003enameOverride\u003c/code\u003e and \u003ccode\u003efullnameOverride\u003c/code\u003e properties are supported.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eBy default, heimdall requires custom resource definitions (CRDs) installed in the cluster. The Helm client will install it for you.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eTo install the chart with the release name \u003ccode\u003emy-release\u003c/code\u003e (\u003ccode\u003emy-release\u003c/code\u003e is the name that you choose) and configure heimdall to operate in decision mode:\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"bash\"\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e$ \u003c/span\u003ehelm \u003cspan style=\"color: #f6aa11\"\u003einstall \u003c/span\u003emy-release \u003cspan style=\"color: #f92672\"\u003e-f\u003c/span\u003e heimdall.yaml dadrus/heimdall\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eIf you need proxy mode, install it with:\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"bash\"\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e$ \u003c/span\u003ehelm \u003cspan style=\"color: #f6aa11\"\u003einstall \u003c/span\u003emy-release \u003cspan style=\"color: #f92672\"\u003e-f\u003c/span\u003e heimdall.yaml \u003cspan style=\"color: #f92672\"\u003e--set\u003c/span\u003e \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003eoperationMode\u003c/span\u003e\u003cspan style=\"color: #f92672\"\u003e=\u003c/span\u003eproxy dadrus/heimdall\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eFor more advanced configuration and details about helm values, \u003ca href=\"https://github.com/dadrus/heimdall/tree/main/charts/heimdall\"\u003eplease see the helm chart\u003c/a\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect2\"\u003e\n\u003ch3 id=\"_post_install_steps\"\u003ePost-Install Steps\u003c/h3\u003e\n\u003cdiv class=\"sect3\"\u003e\n\u003ch4 id=\"_integration_with_ingress\"\u003eIntegration with Ingress\u003c/h4\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eAfter having installed heimdall, you have to integrate it with your ingress controller. For decision mode that means setting corresponding annotations on Ingress resources to let the traffic first be verified by heimdall before it is forwarded to the upstream services by the Ingress Controller.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect3\"\u003e\n\u003ch4 id=\"_metrics_collection\"\u003eMetrics Collection\u003c/h4\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eSince heimdall exposes a comprehensive set of Prometheus style metrics on the \u003ca href=\"/docs/configuration/observability/metrics/\"\u003eMetrics\u003c/a\u003e endpoint, you can, assuming you are running a \u003ca href=\"https://github.com/prometheus-operator/prometheus-operator\"\u003ePrometheus Operator\u003c/a\u003e in your cluster, create the following \u003ccode\u003ePodMonitor\u003c/code\u003e resource to enable metrics collection.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"yaml\"\u003e\u003cspan style=\"color: #a6e22e\"\u003eapiVersion\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003emonitoring.coreos.com/v1\u003c/span\u003e\n\u003cspan style=\"color: #a6e22e\"\u003ekind\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ePodMonitor\u003c/span\u003e\n\u003cspan style=\"color: #a6e22e\"\u003emetadata\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003ename\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eheimdall-pod-monitor\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003elabels\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003erelease\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eprometheus\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003eapp.kubernetes.io/instance\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003emy-release\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003eapp.kubernetes.io/name\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eheimdall\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003eapp.kubernetes.io/part-of\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eheimdall\u003c/span\u003e\n\u003cspan style=\"color: #a6e22e\"\u003espec\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003eselector\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003ematchLabels\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003eapp.kubernetes.io/instance\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003emy-release\u003c/span\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003eapp.kubernetes.io/name\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eheimdall\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003epodMetricsEndpoints\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n    \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003epath\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e/metrics\u003c/span\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003eport\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ehttp-metrics\u003c/span\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003escheme\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ehttp\u003c/span\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003einterval\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e30s\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003ejobLabel\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eheimdall-pod-monitor\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003enamespaceSelector\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003ematchNames\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n      \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003edefault\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThe definition of the \u003ccode\u003ePodMonitor\u003c/code\u003e above assumes, you’ve installed heimdall in the default namespace as shown in the \u003ca href=\"#_installing_the_chart\"\u003eInstalling the Chart\u003c/a\u003e section. If this is not the case, you need to adjust the \u003ccode\u003emetadata\u003c/code\u003e property by adding the corresponding \u003ccode\u003enamespace\u003c/code\u003e information, as well as the \u003ccode\u003enamespaceSelector\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eIf your Prometheus deployment is not done through the operator, you don’t need to do anything, as the chart already sets the relevant annotations: \u003ccode\u003eprometheus.io/scrape\u003c/code\u003e, \u003ccode\u003eprometheus.io/path\u003c/code\u003e and \u003ccode\u003eprometheus.io/port\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n","sections":["Operations"],"tags":null,"title":"Install","url":"/docs/operations/install/"},{"categories":null,"content":" Heimdall’s Command Line Interface\nGeneral heimdall [command] [flags] [arguments] Use heimdall help to get overview about available commands, respectively heimdall [command] help for help on any command.\nFlag’s usage:\n# set flag_argument to flag(s) heimdall [--flag=flag_argument] [-f [flag_argument]] E.g.\nheimdall validate config -c config.yaml Commands completion\nGenerates the autocompletion script for the specified shell.\nhealth\nCalls heimdall’s healthcheck endpoint to verify the status of the deployment.\nhelp\nProvides an overview about the available commands and their descriptions.\nserve\nStarts heimdall in the decision, or the reverse proxy operation mode.\nvalidate\nValidates heimdall configuration, like rules or the actual configuration.\n","description":"","html_content":"\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eHeimdall’s Command Line Interface\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect1\"\u003e\n\u003ch2 id=\"_general\"\u003eGeneral\u003c/h2\u003e\n\u003cdiv class=\"sectionbody\"\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"bash\"\u003eheimdall \u003cspan style=\"color: #f92672\"\u003e[\u003c/span\u003e\u003cspan style=\"color: #f6aa11\"\u003ecommand\u003c/span\u003e\u003cspan style=\"color: #f92672\"\u003e]\u003c/span\u003e \u003cspan style=\"color: #f92672\"\u003e[\u003c/span\u003eflags] \u003cspan style=\"color: #f92672\"\u003e[\u003c/span\u003earguments]\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eUse \u003ccode\u003eheimdall help\u003c/code\u003e to get overview about available commands, respectively \u003ccode\u003eheimdall [command] help\u003c/code\u003e for help on any command.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eFlag’s usage:\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"bash\"\u003e\u003cspan style=\"color: #75715e\"\u003e# set flag_argument to flag(s)\u003c/span\u003e\nheimdall \u003cspan style=\"color: #f92672\"\u003e[\u003c/span\u003e\u003cspan style=\"color: #f92672\"\u003e--flag\u003c/span\u003e\u003cspan style=\"color: #f92672\"\u003e=\u003c/span\u003eflag_argument] \u003cspan style=\"color: #f92672\"\u003e[\u003c/span\u003e\u003cspan style=\"color: #f92672\"\u003e-f\u003c/span\u003e \u003cspan style=\"color: #f92672\"\u003e[\u003c/span\u003eflag_argument]]\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eE.g.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"bash\"\u003eheimdall validate config \u003cspan style=\"color: #f92672\"\u003e-c\u003c/span\u003e config.yaml\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect1\"\u003e\n\u003ch2 id=\"_commands\"\u003eCommands\u003c/h2\u003e\n\u003cdiv class=\"sectionbody\"\u003e\n\u003cdiv class=\"ulist\"\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003ecompletion\u003c/code\u003e\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eGenerates the autocompletion script for the specified shell.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003ehealth\u003c/code\u003e\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eCalls heimdall’s healthcheck endpoint to verify the status of the deployment.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003ehelp\u003c/code\u003e\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eProvides an overview about the available commands and their descriptions.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003eserve\u003c/code\u003e\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eStarts heimdall in the decision, or the reverse proxy operation mode.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003evalidate\u003c/code\u003e\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eValidates heimdall configuration, like rules or the actual configuration.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n","sections":["Operations"],"tags":null,"title":"CLI","url":"/docs/operations/cli/"},{"categories":null,"content":" Hemdall implements different observability mechanisms to support easier operation and integration in different APM products. The following sections provide insights about what can be expected.\nLogging in Heimdall Heimdall’s implementation uses zerolog - Zero Allocation JSON Logger, which can however also log in plain text. All emitted log statements include information related to distributed tracing (if tracing is enabled) so that not only log statements can be correlated to traces, but also all log statements belonging to single request/transaction can be correlated as well.\nAvailable Logging configuration options are described in Logging Configuration.\nRegular Log Events If you configure heimdall to log in text format, you can expect output similar to the one shown below:\n2022-08-03T12:51:48+02:00 INF Opentelemetry tracing initialized. 2022-08-03T12:51:48+02:00 INF Instantiating in memory cache 2022-08-03T12:51:48+02:00 DBG Creating rule set event queue. 2022-08-03T12:51:48+02:00 INF Loading pipeline definitions 2022-08-03T12:51:48+02:00 DBG Loading definitions for authenticators 2022-08-03T12:51:48+02:00 DBG Loading pipeline definition id=noop_authenticator type=noop 2022-08-03T12:51:48+02:00 DBG Loading pipeline definition id=anonymous_authenticator type=anonymous ... 2022-08-03T12:51:52+02:00 DBG Decision endpoint called 2022-08-03T12:51:52+02:00 DBG Executing default rule 2022-08-03T12:51:52+02:00 DBG Authenticating using anonymous authenticator 2022-08-03T12:51:52+02:00 DBG Mutating using JWT unifier 2022-08-03T12:51:52+02:00 DBG Generating new JWT 2022-08-03T12:51:52+02:00 DBG Finalizing request Usage of this format is not recommended for production deployments as it requires more computational resources and is hence slow. Otherwise, if you configure it to use gelf (see GELF for format details) format, the output will look as follows:\n{\u0026#34;_level_name\u0026#34;: \u0026#34;INFO\u0026#34;, \u0026#34;version\u0026#34;:\u0026#34;1.1\u0026#34;, \u0026#34;host\u0026#34;: \u0026#34;unknown\u0026#34;, \u0026#34;timestamp\u0026#34;: 1659523288, \u0026#34;level\u0026#34;: 6, \u0026#34;short_message\u0026#34;: \u0026#34;Opentracing tracer initialized.\u0026#34;} {\u0026#34;_level_name\u0026#34;: \u0026#34;INFO\u0026#34;, \u0026#34;version\u0026#34;: \u0026#34;1.1\u0026#34;, \u0026#34;host\u0026#34;: \u0026#34;unknown\u0026#34;, \u0026#34;timestamp\u0026#34;: 1659523288, \u0026#34;level\u0026#34;: 6, \u0026#34;short_message\u0026#34;: \u0026#34;Instantiating in memory cache\u0026#34;} {\u0026#34;_level_name\u0026#34;: \u0026#34;DEBUG\u0026#34;, \u0026#34;version\u0026#34;: \u0026#34;1.1\u0026#34;, \u0026#34;host\u0026#34;: \u0026#34;unknown\u0026#34;, \u0026#34;timestamp\u0026#34;: 1659523288, \u0026#34;level\u0026#34;: 7, \u0026#34;short_message\u0026#34;: \u0026#34;Creating rule set event queue.\u0026#34;} {\u0026#34;_level_name\u0026#34;: \u0026#34;INFO\u0026#34;, \u0026#34;version\u0026#34;: \u0026#34;1.1\u0026#34;, \u0026#34;host\u0026#34;: \u0026#34;unknown\u0026#34;, \u0026#34;timestamp\u0026#34;: 1659523288, \u0026#34;level\u0026#34;: 6, \u0026#34;short_message\u0026#34;: \u0026#34;Loading pipeline definitions\u0026#34;} {\u0026#34;_level_name\u0026#34;: \u0026#34;DEBUG\u0026#34;, \u0026#34;version\u0026#34;: \u0026#34;1.1\u0026#34;, \u0026#34;host\u0026#34;: \u0026#34;unknown\u0026#34;, \u0026#34;timestamp\u0026#34;: 1659523288, \u0026#34;level\u0026#34;: 7,\u0026#34;short_message\u0026#34;: \u0026#34;Loading definitions for authenticators\u0026#34;} {\u0026#34;_level_name\u0026#34;: \u0026#34;DEBUG\u0026#34;, \u0026#34;version\u0026#34;: \u0026#34;1.1\u0026#34;, \u0026#34;host\u0026#34;: \u0026#34;unknown\u0026#34;, \u0026#34;id\u0026#34;: \u0026#34;noop_authenticator\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;noop\u0026#34;,\u0026#34;timestamp\u0026#34;: 1659523288, \u0026#34;level\u0026#34;: 7, \u0026#34;short_message\u0026#34;: \u0026#34;Loading pipeline definition\u0026#34;} {\u0026#34;_level_name\u0026#34;: \u0026#34;DEBUG\u0026#34;, \u0026#34;version\u0026#34;: \u0026#34;1.1\u0026#34;, \u0026#34;host\u0026#34;: \u0026#34;unknown\u0026#34;, \u0026#34;id\u0026#34;: \u0026#34;anonymous_authenticator\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;anonymous\u0026#34;,\u0026#34;timestamp\u0026#34;: 1659523288, \u0026#34;level\u0026#34;: 7, \u0026#34;short_message\u0026#34;: \u0026#34;Loading pipeline definition\u0026#34;} ... {\u0026#34;_level_name\u0026#34;: \u0026#34;DEBUG\u0026#34;, \u0026#34;version\u0026#34;: \u0026#34;1.1\u0026#34;, \u0026#34;host\u0026#34;: \u0026#34;unknown\u0026#34;, \u0026#34;timestamp\u0026#34;: 1659523295, \u0026#34;level\u0026#34;: 7, \u0026#34;_parent_id\u0026#34;: \u0026#34;3449bda63ed70206\u0026#34;, \u0026#34;_span_id\u0026#34;: \u0026#34;f57c007257fee0ed\u0026#34;, \u0026#34;_trace_id\u0026#34;: \u0026#34;00000000000000000a5af97bffe6a8a2\u0026#34;, \u0026#34;short_message\u0026#34;: \u0026#34;Decision endpoint called\u0026#34;} {\u0026#34;_level_name\u0026#34;: \u0026#34;DEBUG\u0026#34;, \u0026#34;version\u0026#34;: \u0026#34;1.1\u0026#34;, \u0026#34;host\u0026#34;: \u0026#34;unknown\u0026#34;, \u0026#34;timestamp\u0026#34;:1659523295, \u0026#34;level\u0026#34;: 7, \u0026#34;_parent_id\u0026#34;: \u0026#34;3449bda63ed70206\u0026#34;, \u0026#34;_span_id\u0026#34;: \u0026#34;f57c007257fee0ed\u0026#34;, \u0026#34;_trace_id\u0026#34;: \u0026#34;00000000000000000a5af97bffe6a8a2\u0026#34;, \u0026#34;short_message\u0026#34;: \u0026#34;Executing default rule\u0026#34;} {\u0026#34;_level_name\u0026#34;: \u0026#34;DEBUG\u0026#34;, \u0026#34;version\u0026#34;:\u0026#34;1.1\u0026#34;, \u0026#34;host\u0026#34;: \u0026#34;unknown\u0026#34;, \u0026#34;timestamp\u0026#34;:1659523295, \u0026#34;level\u0026#34;: 7, \u0026#34;_parent_id\u0026#34;: \u0026#34;3449bda63ed70206\u0026#34;, \u0026#34;_span_id\u0026#34;: \u0026#34;f57c007257fee0ed\u0026#34;, \u0026#34;_trace_id\u0026#34;: \u0026#34;00000000000000000a5af97bffe6a8a2\u0026#34;, \u0026#34;short_message\u0026#34;: \u0026#34;Authenticating using anonymous authenticator\u0026#34;} {\u0026#34;_level_name\u0026#34;: \u0026#34;DEBUG\u0026#34;, \u0026#34;version\u0026#34;: \u0026#34;1.1\u0026#34;, \u0026#34;host\u0026#34;: \u0026#34;unknown\u0026#34;, \u0026#34;timestamp\u0026#34;: 1659523295, \u0026#34;level\u0026#34;: 7, \u0026#34;_parent_id\u0026#34;: \u0026#34;3449bda63ed70206\u0026#34;, \u0026#34;_span_id\u0026#34;: \u0026#34;f57c007257fee0ed\u0026#34;, \u0026#34;_trace_id\u0026#34;: \u0026#34;00000000000000000a5af97bffe6a8a2\u0026#34;, \u0026#34;short_message\u0026#34;: \u0026#34;Mutating using JWT unifier\u0026#34;} {\u0026#34;_level_name\u0026#34;: \u0026#34;DEBUG\u0026#34;, \u0026#34;version\u0026#34;: \u0026#34;1.1\u0026#34;, \u0026#34;host\u0026#34;: \u0026#34;unknown\u0026#34;, \u0026#34;timestamp\u0026#34;: 1659523295, \u0026#34;level\u0026#34;: 7, \u0026#34;_parent_id\u0026#34;: \u0026#34;3449bda63ed70206\u0026#34;, \u0026#34;_span_id\u0026#34;: \u0026#34;f57c007257fee0ed\u0026#34;, \u0026#34;_trace_id\u0026#34;: \u0026#34;00000000000000000a5af97bffe6a8a2\u0026#34;, \u0026#34;short_message\u0026#34;: \u0026#34;Generating new JWT\u0026#34;} {\u0026#34;_level_name\u0026#34;: \u0026#34;DEBUG\u0026#34;, \u0026#34;version\u0026#34;: \u0026#34;1.1\u0026#34;, \u0026#34;host\u0026#34;: \u0026#34;unknown\u0026#34;, \u0026#34;timestamp\u0026#34;: 1659523295, \u0026#34;level\u0026#34;: 7, \u0026#34;_parent_id\u0026#34;: \u0026#34;3449bda63ed70206\u0026#34;, \u0026#34;_span_id\u0026#34;: \u0026#34;f57c007257fee0ed\u0026#34;, \u0026#34;_trace_id\u0026#34;: \u0026#34;00000000000000000a5af97bffe6a8a2\u0026#34;, \u0026#34;short_message\u0026#34;: \u0026#34;Finalizing request\u0026#34;} Each log statement does also include the following fields in both log formats for incoming requests if tracing is enabled:\n_trace_id - The trace id as defined by OpenTelemetry.\n_span_id - The span id as defined by OpenTelemetry of the current transaction.\n_parent_id - The span id of the callee, which started the given transaction. Only present if the callee set the corresponding tracing header.\nAccess Log Events In addition to regular logs, heimdall emits access logs. These events are always emitted regardless the configured log level and the log level of these events in the log output is always INFO.\nEach request to any of heimdall’s endpoints will result in two access events:\nevent describing the start of the transaction, and an\nevent describing the finalization of the transaction.\nFollowing are the fields, which are always set for both events:\n_tx_start - Timestamp in Unix epoch format, when the transaction started.\n_client_ip - The IP of the client of the request.\n_http_method - The HTTP method used by the client while calling heimdall’s endpoint.\n_http_path - The used HTTP path.\n_http_user_agent - The agent used by the client. The value is taken from the HTTP \u0026#34;User-Agent\u0026#34; header.\n_http_host - The host part of the URI, the client is using while communicating with Heimdall.\n_http_scheme - The scheme part of the URI, the client is using while communicating with Heimdall.\nIf the request comes from an intermediary, like e.g. an API Gateway and heimdall is configured to trust that \u0026#34;proxy\u0026#34; (see trusted_proxies configuration of the Decision service, as well as the trusted_proxies configuration of the Proxy service), then following fields will be part of the events as well if the corresponding HTTP headers were sent.\n_http_x_forwarded_proto - The value of the \u0026#34;X-Forwarded-Proto\u0026#34; header.\n_http_x_forwarded_host - The value of the \u0026#34;X-Forwarded-Host\u0026#34; header.\n_http_x_forwarded_path - The value of the \u0026#34;X-Forwarded-Path\u0026#34; header.\n_http_x_forwarded_uri - The value of the \u0026#34;X-Forwarded-Uri\u0026#34; header.\n_http_x_forwarded_for - The value of the \u0026#34;X-Forwarded-For\u0026#34; header.\n_http_forwarded - The value of the \u0026#34;Forwarded\u0026#34; header.\nFollowing are the fields, which are set in the transaction finalization event in addition:\n_body_bytes_sent - The length of the response body.\n_http_status_code - The numeric HTTP response status code\n_tx_duration_ms - The duration of the transaction in milliseconds. If heimdall is operated in proxy mode, it will also include the time used to communicate with the upstream service.\n_access_granted - Set either to true or false, indicating whether heimdall granted access or not.\n_subject - The subject identifier if the access was granted.\n_error - The information about an error, which e.g. led to the denial of the request.\nFollowing are the fields, which are set if tracing is enabled:\n_trace_id - The trace id as defined by OpenTelemetry.\n_span_id - The span id as defined by OpenTelemetry of the current transaction.\n_parent_id - The span id of the callee, which started the given transaction. Only present if the callee set the corresponding tracing header.\nIf you configure heimdall to log in text format, you can expect output as shown below:\n2022-08-03T12:40:16+02:00 INF TX started _client_ip=127.0.0.1 _http_host=127.0.0.1:4468 _http_method=GET _http_path=/foo _http_scheme=http _http_user_agent=curl/7.74.0 _parent_id=3449bda63ed70206 _span_id=f57c007257fee0ed _trace_id=00000000000000000a5af97bffe6a8a2 _tx_start=1659523216 .... 2022-08-03T12:40:16+02:00 INF TX finished _access_granted=true _body_bytes_sent=0 _client_ip=127.0.0.1 _http_host=127.0.0.1:4468 _http_method=GET _http_path=/foo _http_scheme=http _http_status_code=202 _http_user_agent=curl/7.74.0 _subject=anonymous _parent_id=3449bda63ed70206 _span_id=f57c007257fee0ed _trace_id=00000000000000000a5af97bffe6a8a2 _tx_duration_ms=0 _tx_start=1659523216 Otherwise, if you configure it to use gelf format, the output will look as follows:\n{\u0026#34;_level_name\u0026#34;: \u0026#34;INFO\u0026#34;, \u0026#34;version\u0026#34;:\u0026#34;1.1\u0026#34;, \u0026#34;host\u0026#34;:\u0026#34;unknown\u0026#34;, \u0026#34;_tx_start\u0026#34;:1659523295, \u0026#34;_client_ip\u0026#34;: \u0026#34;127.0.0.1\u0026#34;, \u0026#34;_http_method\u0026#34;: \u0026#34;GET\u0026#34;, \u0026#34;_http_path\u0026#34;:\u0026#34;/foo\u0026#34;, \u0026#34;_http_user_agent\u0026#34;: \u0026#34;curl/7.74.0\u0026#34;, \u0026#34;_http_host\u0026#34;: \u0026#34;127.0.0.1:4468\u0026#34;, \u0026#34;_http_scheme\u0026#34;: \u0026#34;http\u0026#34;, \u0026#34;timestamp\u0026#34;: 1659523295, \u0026#34;level\u0026#34;: 6, \u0026#34;_parent_id\u0026#34;: \u0026#34;3449bda63ed70206\u0026#34;, \u0026#34;_span_id\u0026#34;: \u0026#34;f57c007257fee0ed\u0026#34;, \u0026#34;_trace_id\u0026#34;: \u0026#34;00000000000000000a5af97bffe6a8a2\u0026#34;, \u0026#34;short_message\u0026#34;: \u0026#34;TX started\u0026#34;} .... {\u0026#34;_level_name\u0026#34;: \u0026#34;INFO\u0026#34;, \u0026#34;version\u0026#34;: \u0026#34;1.1\u0026#34;, \u0026#34;host\u0026#34;: \u0026#34;unknown\u0026#34;, \u0026#34;_tx_start\u0026#34;: 1659523295, \u0026#34;_client_ip\u0026#34;: \u0026#34;127.0.0.1\u0026#34;, \u0026#34;_http_method\u0026#34;: \u0026#34;GET\u0026#34;, \u0026#34;_http_path\u0026#34;: \u0026#34;/foo\u0026#34;, \u0026#34;_http_user_agent\u0026#34;: \u0026#34;curl/7.74.0\u0026#34;, \u0026#34;_http_host\u0026#34;: \u0026#34;127.0.0.1:4468\u0026#34;, \u0026#34;_http_scheme\u0026#34;: \u0026#34;http\u0026#34;, \u0026#34;_body_bytes_sent\u0026#34;: 0, \u0026#34;_http_status_code\u0026#34;:200, \u0026#34;_tx_duration_ms\u0026#34;:0, \u0026#34;_subject\u0026#34;: \u0026#34;anonymous\u0026#34;, \u0026#34;_access_granted\u0026#34;: true, \u0026#34;timestamp\u0026#34;:1659523295, \u0026#34;level\u0026#34;: 6, \u0026#34;_parent_id\u0026#34;: \u0026#34;3449bda63ed70206\u0026#34;, \u0026#34;_span_id\u0026#34;: \u0026#34;f57c007257fee0ed\u0026#34;, \u0026#34;_trace_id\u0026#34;: \u0026#34;00000000000000000a5af97bffe6a8a2\u0026#34;, \u0026#34;short_message\u0026#34;: \u0026#34;TX finished\u0026#34;} Tracing in Heimdall Heimdall makes use of OpenTelemetry for distributed tracing to support recording of paths taken by requests and supports all environment variables including the defined values according to OpenTelemetry Environment Variable Specification. In addition to these environment variables, heimdall defines its own tracing options, which are described in Tracing Configuration and can be used to tune the behaviour.\nTracing is enabled by default. On one hand, this chapter serves the purpose of a quick introduction to distributed tracing with heimdall and on the other hand to list the options that go beyond the standard OTEL definitions.\nTracing Context Propagation When a request arrives at heimdall, it will create a trace context object based on the received headers, which according to OTEL are the traceparent and tracestate HTTP headers, defined in W3C Trace Context as well as baggage HTTP header, defined in W3C Baggage. The creation of that context, as well as the transformation of it into new HTTP headers, set by heimdall while communicating with further services is named propagation and the components responsible for the creation of such context object are named propagators.\nSince not every service in a multi-service system may set or understand the above OTEL specific HTTP headers (as these might still be using tracing vendor specific headers), interoperability can be achieved by configuring the required propagators by making use of the OTEL_PROPAGATORS environment variable. OTEL defines the following values for this variable:\ntracecontext - W3C Trace Context propagator. Enabled by default, if OTEL_PROPAGATORS is not set.\nbaggage - W3C Baggage propagator. Enabled by default if OTEL_PROPAGATORS is not set.\nb3 - Zipkin B3 Single Header propagator.\nb3multi - Zipkin B3 Multiple Header propagator.\njaeger - Jaeger Header propagator.\nxray - AWS X-Ray Header propagator.\nottrace - OT Trace Header propagator.\nnone - No automatically configured propagator.\nAll of these are supported by heimdall. In addition, following propagators can be configured as well:\ndatadog - Datadog APM Trace Header propagator.[1]\nConfigured propagators are used for inbound, as well as for outbound traffic.\nSpan Exporters Span Exporter handle the delivery of spans to external receivers (collectors, or agents). This is the final component in the trace export pipeline and typically provided by the APM vendor, like Jaeger, Zipkin, Instana, etc. Since not every multi-service system may have an up to day telemetry receiver supporting protocols defined by OTEL, interoperability can be achieved by configuring the required exporters by making use of the OTEL_TRACES_EXPORTER environment variable. OTEL defines the following values for this variable:\notlp - OTLP exporter. Enabled by default if OTEL_TRACES_EXPORTER is not set.\njaeger - Jaeger Thrift exporter to export spans in Jaeger data model.\nzipkin - Zipkin exporter to export spans in Zipkin data model.\nnone - No automatically configured exporter for traces.\nAll of these are supported by heimdall. In addition, following exporters can be configured as well:\ninstana - Instana exporter to export spans in Instana data model.[2]\nExample Configuration The environment variables set below configure heimdall to use Jaeger propagator and to export the spans via OTLP over grpc to the collector available under http://collector:4317.\nOTEL_PROPAGATORS=jaeger OTEL_TRACES_EXPORTER=otlp OTEL_EXPORTER_OTLP_TRACES_PROTOCOL=grpc OTEL_EXPORTER_OTLP_TRACES_ENDPOINT=http://collector:4317 If your environment supports OpenTelemetry and usage of defaults is ok, most probably, the only required environment variable to be set might be the OTEL_EXPORTER_OTLP_TRACES_ENDPOINT.\nMetrics in Heimdall By default, heimdall exposes Prometheus style metrics on the 127.0.0.1:10250/metrics HTTP endpoint (See also Metrics Configuration) which comprise the following information:\nProcess information, like CPU, memory, file descriptor usage and start time\nGo runtime information, including details about GC, number of goroutines and OS threats\nInformation about the metrics endpoint itself, including the number of internal errors encountered while gathering the metrics, number of current inflight and overall scrapes done.\nInformation about the decision and proxy requests handled, including the total amount and duration of http requests by status code, method and path, as well as information about requests in progress.\nInformation about expiry for configured certificates.\nThe following table provide detailed information about these\nMetric Type Description Process Information\nprocess_cpu_seconds_total\nCounter\nTotal user and system CPU time spent in seconds.\nprocess_max_fds\nGauge\nMaximum number of open file descriptors.\nprocess_open_fds\nGauge\nNumber of open file descriptors.\nprocess_resident_memory_bytes\nGauge\nResident memory size in bytes.\nprocess_start_time_seconds\nGauge\nStart time of the process since unix epoch in seconds.\nprocess_virtual_memory_bytes\nGauge\nVirtual memory size in bytes.\nprocess_virtual_memory_max_bytes\nGauge\nMaximum amount of virtual memory available in bytes.\nGo Runtime Information\ngo_cgo_go_to_c_calls_calls_total\nCounter\nCount of calls made from Go to C by the current process.\ngo_gc_cycles_automatic_gc_cycles_total\nCounter\nCount of completed GC cycles generated by the Go runtime.\ngo_gc_cycles_forced_gc_cycles_total\nCounter\nCount of completed GC cycles forced by the application.\ngo_gc_cycles_total_gc_cycles_total\nCounter\nCount of all completed GC cycles.\ngo_gc_duration_seconds\nSummary\nA summary of the pause duration of garbage collection cycles.\ngo_gc_heap_allocs_by_size_bytes\nHistogram\nDistribution of heap allocations by approximate size. Note that this does not include tiny objects as defined by /gc/heap/tiny/allocs:objects, only tiny blocks.\ngo_gc_heap_allocs_bytes_total\nCounter\nCumulative sum of memory allocated to the heap by the application.\ngo_gc_heap_allocs_objects_total\nCounter\nCumulative count of heap allocations triggered by the application. Note that this does not include tiny objects as defined by /gc/heap/tiny/allocs:objects, only tiny blocks.\ngo_gc_heap_frees_by_size_bytes\nHistogram\nistribution of freed heap allocations by approximate size. Note that this does not include tiny objects as defined by /gc/heap/tiny/allocs:objects, only tiny blocks.\ngo_gc_heap_frees_bytes_total\nCounter\nCumulative sum of heap memory freed by the garbage collector.\ngo_gc_heap_frees_objects_total\nCounter\nCumulative count of heap allocations whose storage was freed by the garbage collector. Note that this does not include tiny objects as defined by /gc/heap/tiny/allocs:objects, only tiny blocks.\ngo_gc_heap_goal_bytes\nGauge\nHeap size target for the end of the GC cycle.\ngo_gc_heap_objects_objects\nGauge\nNumber of objects, live or unswept, occupying heap memory.\ngo_gc_heap_tiny_allocs_objects_total\nCounter\nCount of small allocations that are packed together into blocks. These allocations are counted separately from other allocations because each individual allocation is not tracked by the runtime, only their block. Each block is already accounted for in allocs-by-size and frees-by-size.\ngo_gc_limiter_last_enabled_gc_cycle\nGauge\nGC cycle the last time the GC CPU limiter was enabled. This metric is useful for diagnosing the root cause of an out-of-memory error, because the limiter trades memory for CPU time when the GC’s CPU time gets too high. This is most likely to occur with use of SetMemoryLimit. The first GC cycle is cycle 1, so a value of 0 indicates that it was never enabled.\ngo_gc_pauses_seconds\nHistogram\nDistribution individual GC-related stop-the-world pause latencies.\ngo_gc_stack_starting_size_bytes\nGauge\nThe stack size of new goroutines.\ngo_goroutines\nGauge\nNumber of goroutines that currently exist.\ngo_info\nGauge\nInformation about the Go environment.\ngo_memory_classes_heap_free_bytes\nGauge\nMemory that is completely free and eligible to be returned to the underlying system, but has not been. This metric is the runtime’s estimate of free address space that is backed by physical memory.\ngo_memory_classes_heap_objects_bytes\nGauge\nMemory occupied by live objects and dead objects that have not yet been marked free by the garbage collector.\ngo_memory_classes_heap_released_bytes\nGauge\nMemory that is completely free and has been returned to the underlying system. This metric is the runtime’s estimate of free address space that is still mapped into the process, but is not backed by physical memory.\ngo_memory_classes_heap_stacks_bytes\nGauge\nMemory allocated from the heap that is reserved for stack space, whether or not it is currently in-use.\ngo_memory_classes_heap_stacks_bytes\nGauge\nMemory allocated from the heap that is reserved for stack space, whether or not it is currently in-use.\ngo_memory_classes_heap_unused_bytes\nGauge\nMemory that is reserved for heap objects but is not currently used to hold heap objects.\ngo_memory_classes_metadata_mcache_free_bytes\nGauge\nMemory that is reserved for runtime mcache structures, but not in-use.\ngo_memory_classes_metadata_mcache_inuse_bytes\nGauge\nMemory that is occupied by runtime mcache structures that are currently being used.\ngo_memory_classes_metadata_mspan_free_bytes\nGauge\nMemory that is reserved for runtime mspan structures, but not in-use.\ngo_memory_classes_metadata_mspan_inuse_bytes\nGauge\nMemory that is occupied by runtime mspan structures that are currently being used.\ngo_memory_classes_metadata_other_bytes\nGauge\nMemory that is reserved for or used to hold runtime metadata.\ngo_memory_classes_os_stacks_bytes\nGauge\nStack memory allocated by the underlying operating system.\ngo_memory_classes_other_bytes\nGauge\nMemory used by execution trace buffers, structures for debugging the runtime, finalizer and profiler specials, and more.\ngo_memory_classes_profiling_buckets_bytes\nGauge\nMemory that is used by the stack trace hash map used for profiling.\ngo_memory_classes_total_bytes\nGauge\nAll memory mapped by the Go runtime into the current process as read-write. Note that this does not include memory mapped by code called via cgo or via the syscall package. Sum of all metrics in /memory/classes.\ngo_memstats_last_gc_time_seconds\nGauge\nNumber of seconds since 1970 of last garbage collection.\ngo_sched_gomaxprocs_threads\nGauge\nThe current runtime.GOMAXPROCS setting, or the number of operating system threads that can execute user-level Go code simultaneously.\ngo_sched_goroutines_goroutines\nGauge\nCount of live goroutines.\ngo_sched_latencies_seconds\nHistogram\nDistribution of the time goroutines have spent in the scheduler in a runnable state before actually running.\ngo_threads\nGauge\nNumber of OS threads created.\nDecision / Proxy / Management Service request related\nhttp_request_duration_seconds\nHistogram\nDuration of all HTTP requests by service (decision, proxy, management), status code, method and path.\nhttp_requests_in_progress_total\nGauge\nAll the requests in progress by service (decision, proxy, management) and method\nhttp_requests_total\nCounter\nCount all http requests by service (decision, proxy, management), status code, method and path.\nCertificate expiry information\ncertificate_expiry_seconds\nGauge\nNumber of seconds until a certificate used by a particular service (decision, proxy, management), as well as signer expires. Contains certificate identification information as well.\nMetrics endpoint statistics\npromhttp_metric_handler_requests_in_flight\nGauge\nCurrent number of scrapes being served.\npromhttp_metric_handler_requests_total\nCounter\nTotal number of scrapes by HTTP status code.\npromhttp_metric_handler_errors_total\nCounter\nTotal number of internal errors encountered by the promhttp metric handler.\nMore details about Prometheus metric types can be found here. Runtime Profiling in Heimdall If enabled, heimdall exposes a /debug/pprof HTTP endpoint on port 10251 (See also Runtime Profiling Configuration) on which runtime profiling data in the profile.proto format (also known as pprof format) can be consumed by APM tools, like Google’s pprof, Grafana Phlare, Pyroscope and many more for visualization purposes. Following information is available:\nallocs - A sampling of all past memory allocations.\nblock - Stack traces that led to blocking on synchronization primitives.\ncmdline - The command line invocation of the current program, with arguments separated by NUL bytes.\ngoroutine - Stack traces of all current goroutines.\nheap - A sampling of memory allocations of live objects.\nmutex - Stack traces of holders of contended mutexes.\nprofile - Cpu profile. Profiling lasts for duration specified in seconds parameter, or for 30 seconds if not specified\nsymbol - Looks up the program counters listed in the request, responding with a table mapping program counters to function names.\nthreadcreate - Stack traces that led to the creation of new OS threads.\ntrace - Execution trace in binary form. Tracing lasts for duration specified in seconds parameter, or for 1 second if not specified.\nSee also the API documentation for the documentation of the actual API.\n1. Datadog supports the OTLP protokoll. For that reason, there is no exporter available. 2. Instana supports the W3C header used by OTEL. For that reason, there is no propagator available. ","description":"","html_content":"\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eHemdall implements different observability mechanisms to support easier operation and integration in different APM products. The following sections provide insights about what can be expected.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect1\"\u003e\n\u003ch2 id=\"_logging_in_heimdall\"\u003eLogging in Heimdall\u003c/h2\u003e\n\u003cdiv class=\"sectionbody\"\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eHeimdall’s implementation uses \u003ca href=\"https://github.com/rs/zerolog\"\u003ezerolog\u003c/a\u003e - Zero Allocation JSON Logger, which can however also log in plain text. All emitted log statements include information related to distributed tracing (if tracing is enabled) so that not only log statements can be correlated to traces, but also all log statements belonging to single request/transaction can be correlated as well.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eAvailable Logging configuration options are described in \u003ca href=\"/docs/configuration/observability/logging/\"\u003eLogging Configuration\u003c/a\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect2\"\u003e\n\u003ch3 id=\"_regular_log_events\"\u003eRegular Log Events\u003c/h3\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eIf you configure heimdall to log in \u003ccode\u003etext\u003c/code\u003e format, you can expect output similar to the one shown below:\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"log\"\u003e2022-08-03T12:51:48+02:00 INF Opentelemetry tracing initialized.\n2022-08-03T12:51:48+02:00 INF Instantiating in memory cache\n2022-08-03T12:51:48+02:00 DBG Creating rule set event queue.\n2022-08-03T12:51:48+02:00 INF Loading pipeline definitions\n2022-08-03T12:51:48+02:00 DBG Loading definitions for authenticators\n2022-08-03T12:51:48+02:00 DBG Loading pipeline definition id=noop_authenticator type=noop\n2022-08-03T12:51:48+02:00 DBG Loading pipeline definition id=anonymous_authenticator type=anonymous\n...\n2022-08-03T12:51:52+02:00 DBG Decision endpoint called\n2022-08-03T12:51:52+02:00 DBG Executing default rule\n2022-08-03T12:51:52+02:00 DBG Authenticating using anonymous authenticator\n2022-08-03T12:51:52+02:00 DBG Mutating using JWT unifier\n2022-08-03T12:51:52+02:00 DBG Generating new JWT\n2022-08-03T12:51:52+02:00 DBG Finalizing request\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"admonitionblock warning\"\u003e\n\u003ctable\u003e\n\u003ctbody\u003e\u003ctr\u003e\n\u003ctd class=\"icon\"\u003e\n\u003ci class=\"fa icon-warning\" title=\"Warning\"\u003e\u003c/i\u003e\n\u003c/td\u003e\n\u003ctd class=\"content\"\u003e\nUsage of this format is not recommended for production deployments as it requires more computational resources and is hence slow.\n\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eOtherwise, if you configure it to use \u003ccode\u003egelf\u003c/code\u003e (see \u003ca href=\"https://docs.graylog.org/v1/docs/gelf\"\u003eGELF\u003c/a\u003e for format details) format, the output will look as follows:\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"json\"\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e{\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;_level_name\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;INFO\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;version\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;1.1\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;host\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;unknown\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;timestamp\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #ae81ff\"\u003e1659523288\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\n \u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;level\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #ae81ff\"\u003e6\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;short_message\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;Opentracing tracer initialized.\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e}\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\n\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e{\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;_level_name\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;INFO\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;version\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;1.1\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;host\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;unknown\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;timestamp\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #ae81ff\"\u003e1659523288\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\n \u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;level\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #ae81ff\"\u003e6\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;short_message\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;Instantiating in memory cache\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e}\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\n\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e{\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;_level_name\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;DEBUG\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;version\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;1.1\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;host\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;unknown\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;timestamp\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #ae81ff\"\u003e1659523288\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\n \u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;level\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #ae81ff\"\u003e7\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;short_message\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;Creating rule set event queue.\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e}\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\n\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e{\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;_level_name\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;INFO\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;version\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;1.1\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;host\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;unknown\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;timestamp\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #ae81ff\"\u003e1659523288\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\n \u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;level\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #ae81ff\"\u003e6\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;short_message\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;Loading pipeline definitions\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e}\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\n\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e{\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;_level_name\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;DEBUG\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;version\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;1.1\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;host\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;unknown\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;timestamp\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #ae81ff\"\u003e1659523288\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\n \u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;level\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #ae81ff\"\u003e7\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;short_message\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;Loading definitions for authenticators\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e}\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\n\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e{\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;_level_name\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;DEBUG\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;version\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;1.1\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;host\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;unknown\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;id\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;noop_authenticator\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\n \u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;type\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;noop\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;timestamp\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #ae81ff\"\u003e1659523288\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\n \u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;level\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #ae81ff\"\u003e7\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;short_message\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;Loading pipeline definition\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e}\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\n\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e{\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;_level_name\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;DEBUG\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;version\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;1.1\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;host\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;unknown\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;id\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;anonymous_authenticator\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\n \u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;type\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;anonymous\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;timestamp\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #ae81ff\"\u003e1659523288\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\n \u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;level\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #ae81ff\"\u003e7\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;short_message\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;Loading pipeline definition\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e}\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\n\n\u003c/span\u003e\u003cspan style=\"color: #960050\"\u003e...\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\n\n\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e{\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;_level_name\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;DEBUG\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;version\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;1.1\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;host\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;unknown\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;timestamp\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #ae81ff\"\u003e1659523295\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\n \u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;level\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #ae81ff\"\u003e7\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;_parent_id\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;3449bda63ed70206\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;_span_id\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;f57c007257fee0ed\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\n \u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;_trace_id\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;00000000000000000a5af97bffe6a8a2\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;short_message\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;Decision endpoint called\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e}\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\n\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e{\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;_level_name\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;DEBUG\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;version\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;1.1\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;host\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;unknown\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;timestamp\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ae81ff\"\u003e1659523295\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\n \u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;level\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #ae81ff\"\u003e7\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;_parent_id\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;3449bda63ed70206\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;_span_id\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;f57c007257fee0ed\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\n \u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;_trace_id\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;00000000000000000a5af97bffe6a8a2\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;short_message\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;Executing default rule\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e}\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\n\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e{\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;_level_name\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;DEBUG\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;version\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;1.1\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;host\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;unknown\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;timestamp\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ae81ff\"\u003e1659523295\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\n \u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;level\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #ae81ff\"\u003e7\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;_parent_id\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;3449bda63ed70206\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;_span_id\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;f57c007257fee0ed\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\n \u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;_trace_id\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;00000000000000000a5af97bffe6a8a2\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;short_message\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;Authenticating using anonymous authenticator\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e}\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\n\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e{\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;_level_name\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;DEBUG\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;version\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;1.1\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;host\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;unknown\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;timestamp\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #ae81ff\"\u003e1659523295\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\n \u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;level\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #ae81ff\"\u003e7\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;_parent_id\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;3449bda63ed70206\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;_span_id\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;f57c007257fee0ed\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\n \u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;_trace_id\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;00000000000000000a5af97bffe6a8a2\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;short_message\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;Mutating using JWT unifier\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e}\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\n\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e{\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;_level_name\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;DEBUG\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;version\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;1.1\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;host\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;unknown\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;timestamp\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #ae81ff\"\u003e1659523295\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\n \u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;level\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #ae81ff\"\u003e7\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;_parent_id\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;3449bda63ed70206\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;_span_id\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;f57c007257fee0ed\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\n \u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;_trace_id\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;00000000000000000a5af97bffe6a8a2\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;short_message\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;Generating new JWT\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e}\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\n\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e{\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;_level_name\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;DEBUG\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;version\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;1.1\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;host\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;unknown\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;timestamp\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #ae81ff\"\u003e1659523295\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\n \u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;level\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #ae81ff\"\u003e7\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;_parent_id\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;3449bda63ed70206\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;_span_id\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;f57c007257fee0ed\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\n \u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;_trace_id\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;00000000000000000a5af97bffe6a8a2\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;short_message\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;Finalizing request\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eEach log statement does also include the following fields in both log formats for incoming requests if tracing is enabled:\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"ulist\"\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003e_trace_id\u003c/code\u003e - The trace id as defined by OpenTelemetry.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003e_span_id\u003c/code\u003e - The span id as defined by OpenTelemetry of the current transaction.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003e_parent_id\u003c/code\u003e - The span id of the callee, which started the given transaction. Only present if the callee set the corresponding tracing header.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect2\"\u003e\n\u003ch3 id=\"_access_log_events\"\u003eAccess Log Events\u003c/h3\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eIn addition to regular logs, heimdall emits access logs. These events are always emitted regardless the configured log level and the log level of these events in the log output is always \u003ccode\u003eINFO\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eEach request to any of heimdall’s endpoints will result in two access events:\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"ulist\"\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eevent describing the start of the transaction, and an\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eevent describing the finalization of the transaction.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eFollowing are the fields, which are always set for both events:\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"ulist\"\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003e_tx_start\u003c/code\u003e - Timestamp in Unix epoch format, when the transaction started.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003e_client_ip\u003c/code\u003e - The IP of the client of the request.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003e_http_method\u003c/code\u003e - The HTTP method used by the client while calling heimdall’s endpoint.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003e_http_path\u003c/code\u003e - The used HTTP path.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003e_http_user_agent\u003c/code\u003e - The agent used by the client. The value is taken from the HTTP \u0026#34;User-Agent\u0026#34; header.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003e_http_host\u003c/code\u003e - The host part of the URI, the client is using while communicating with Heimdall.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003e_http_scheme\u003c/code\u003e - The scheme part of the URI, the client is using while communicating with Heimdall.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eIf the request comes from an intermediary, like e.g. an API Gateway and heimdall is configured to trust that \u0026#34;proxy\u0026#34; (see \u003ca href=\"/docs/configuration/services/decision/#_trusted_proxies\"\u003e\u003ccode\u003etrusted_proxies\u003c/code\u003e configuration\u003c/a\u003e of the Decision service, as well as the \u003ca href=\"/docs/configuration/services/proxy/#_trusted_proxies\"\u003e\u003ccode\u003etrusted_proxies\u003c/code\u003e configuration\u003c/a\u003e of the Proxy service), then following fields will be part of the events as well if the corresponding HTTP headers were sent.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"ulist\"\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003e_http_x_forwarded_proto\u003c/code\u003e - The value of the \u0026#34;X-Forwarded-Proto\u0026#34; header.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003e_http_x_forwarded_host\u003c/code\u003e - The value of the \u0026#34;X-Forwarded-Host\u0026#34; header.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003e_http_x_forwarded_path\u003c/code\u003e - The value of the \u0026#34;X-Forwarded-Path\u0026#34; header.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003e_http_x_forwarded_uri\u003c/code\u003e - The value of the \u0026#34;X-Forwarded-Uri\u0026#34; header.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003e_http_x_forwarded_for\u003c/code\u003e - The value of the \u0026#34;X-Forwarded-For\u0026#34; header.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003e_http_forwarded\u003c/code\u003e - The value of the \u0026#34;Forwarded\u0026#34; header.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eFollowing are the fields, which are set in the transaction finalization event in addition:\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"ulist\"\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003e_body_bytes_sent\u003c/code\u003e - The length of the response body.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003e_http_status_code\u003c/code\u003e - The numeric HTTP response status code\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003e_tx_duration_ms\u003c/code\u003e - The duration of the transaction in milliseconds. If heimdall is operated in proxy mode, it will also include the time used to communicate with the upstream service.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003e_access_granted\u003c/code\u003e - Set either to \u003ccode\u003etrue\u003c/code\u003e or \u003ccode\u003efalse\u003c/code\u003e, indicating whether heimdall granted access or not.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003e_subject\u003c/code\u003e - The subject identifier if the access was granted.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003e_error\u003c/code\u003e - The information about an error, which e.g. led to the denial of the request.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eFollowing are the fields, which are set if tracing is enabled:\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"ulist\"\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003e_trace_id\u003c/code\u003e - The trace id as defined by OpenTelemetry.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003e_span_id\u003c/code\u003e - The span id as defined by OpenTelemetry of the current transaction.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003e_parent_id\u003c/code\u003e - The span id of the callee, which started the given transaction. Only present if the callee set the corresponding tracing header.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eIf you configure heimdall to log in \u003ccode\u003etext\u003c/code\u003e format, you can expect output as shown below:\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"text\"\u003e2022-08-03T12:40:16+02:00 INF TX started _client_ip=127.0.0.1 _http_host=127.0.0.1:4468 _http_method=GET\n _http_path=/foo _http_scheme=http _http_user_agent=curl/7.74.0 _parent_id=3449bda63ed70206\n _span_id=f57c007257fee0ed _trace_id=00000000000000000a5af97bffe6a8a2 _tx_start=1659523216\n\n....\n\n2022-08-03T12:40:16+02:00 INF TX finished _access_granted=true _body_bytes_sent=0 _client_ip=127.0.0.1\n _http_host=127.0.0.1:4468 _http_method=GET _http_path=/foo _http_scheme=http _http_status_code=202\n _http_user_agent=curl/7.74.0 _subject=anonymous _parent_id=3449bda63ed70206 _span_id=f57c007257fee0ed\n _trace_id=00000000000000000a5af97bffe6a8a2 _tx_duration_ms=0 _tx_start=1659523216\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eOtherwise, if you configure it to use \u003ccode\u003egelf\u003c/code\u003e format, the output will look as follows:\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"json\"\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e{\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;_level_name\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;INFO\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;version\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;1.1\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;host\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;unknown\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;_tx_start\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ae81ff\"\u003e1659523295\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\n \u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;_client_ip\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;127.0.0.1\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;_http_method\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;GET\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;_http_path\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;/foo\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\n \u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;_http_user_agent\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;curl/7.74.0\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;_http_host\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;127.0.0.1:4468\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;_http_scheme\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;http\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\n \u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;timestamp\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #ae81ff\"\u003e1659523295\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;level\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #ae81ff\"\u003e6\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;_parent_id\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;3449bda63ed70206\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\n \u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;_span_id\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;f57c007257fee0ed\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;_trace_id\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;00000000000000000a5af97bffe6a8a2\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\n \u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;short_message\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;TX started\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e}\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\n\n\u003c/span\u003e\u003cspan style=\"color: #960050\"\u003e....\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\n\n\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e{\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;_level_name\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;INFO\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;version\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;1.1\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;host\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;unknown\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;_tx_start\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #ae81ff\"\u003e1659523295\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\n \u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;_client_ip\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;127.0.0.1\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;_http_method\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;GET\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;_http_path\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;/foo\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\n \u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;_http_user_agent\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;curl/7.74.0\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;_http_host\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;127.0.0.1:4468\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;_http_scheme\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;http\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\n \u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;_body_bytes_sent\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #ae81ff\"\u003e0\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;_http_status_code\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ae81ff\"\u003e200\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;_tx_duration_ms\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ae81ff\"\u003e0\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;_subject\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;anonymous\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\n \u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;_access_granted\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #66d9ef\"\u003etrue\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;timestamp\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ae81ff\"\u003e1659523295\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;level\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #ae81ff\"\u003e6\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;_parent_id\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;3449bda63ed70206\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\n \u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;_span_id\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;f57c007257fee0ed\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;_trace_id\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;00000000000000000a5af97bffe6a8a2\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\n \u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;short_message\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;TX finished\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect1\"\u003e\n\u003ch2 id=\"_tracing_in_heimdall\"\u003eTracing in Heimdall\u003c/h2\u003e\n\u003cdiv class=\"sectionbody\"\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eHeimdall makes use of \u003ca href=\"https://opentelemetry.io/\"\u003eOpenTelemetry\u003c/a\u003e for distributed tracing to support recording of paths taken by requests and supports all environment variables including the defined values according to \u003ca href=\"https://opentelemetry.io/docs/reference/specification/sdk-environment-variables/\"\u003eOpenTelemetry Environment Variable Specification\u003c/a\u003e. In addition to these environment variables, heimdall defines its own tracing options, which are described in \u003ca href=\"/docs/configuration/observability/tracing/\"\u003eTracing Configuration\u003c/a\u003e and can be used to tune the behaviour.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"admonitionblock note\"\u003e\n\u003ctable\u003e\n\u003ctbody\u003e\u003ctr\u003e\n\u003ctd class=\"icon\"\u003e\n\u003ci class=\"fa icon-note\" title=\"Note\"\u003e\u003c/i\u003e\n\u003c/td\u003e\n\u003ctd class=\"content\"\u003e\nTracing is enabled by default.\n\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eOn one hand, this chapter serves the purpose of a quick introduction to distributed tracing with heimdall and on the other hand to list the options that go beyond the standard OTEL definitions.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect2\"\u003e\n\u003ch3 id=\"_tracing_context_propagation\"\u003eTracing Context Propagation\u003c/h3\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eWhen a request arrives at heimdall, it will create a trace context object based on the received headers, which according to OTEL are the \u003ccode\u003etraceparent\u003c/code\u003e and \u003ccode\u003etracestate\u003c/code\u003e HTTP headers, defined in \u003ca href=\"https://www.w3.org/TR/trace-context/\"\u003eW3C Trace Context\u003c/a\u003e as well as \u003ccode\u003ebaggage\u003c/code\u003e HTTP header, defined in \u003ca href=\"https://www.w3.org/TR/baggage/\"\u003eW3C Baggage\u003c/a\u003e. The creation of that context, as well as the transformation of it into new HTTP headers, set by heimdall while communicating with further services is named propagation and the components responsible for the creation of such context object are named propagators.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eSince not every service in a multi-service system may set or understand the above OTEL specific HTTP headers (as these might still be using tracing vendor specific headers), interoperability can be achieved by configuring the required propagators by making use of the \u003ccode\u003eOTEL_PROPAGATORS\u003c/code\u003e environment variable. OTEL defines the following values for this variable:\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"ulist\"\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003etracecontext\u003c/code\u003e - \u003ca href=\"https://www.w3.org/TR/trace-context/\"\u003eW3C Trace Context\u003c/a\u003e propagator. Enabled by default, if \u003ccode\u003eOTEL_PROPAGATORS\u003c/code\u003e is not set.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003ebaggage\u003c/code\u003e - \u003ca href=\"https://www.w3.org/TR/baggage/\"\u003eW3C Baggage\u003c/a\u003e propagator. Enabled by default if \u003ccode\u003eOTEL_PROPAGATORS\u003c/code\u003e is not set.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003eb3\u003c/code\u003e - \u003ca href=\"https://github.com/openzipkin/b3-propagation#single-header\"\u003eZipkin B3 Single Header\u003c/a\u003e propagator.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003eb3multi\u003c/code\u003e - \u003ca href=\"https://github.com/openzipkin/b3-propagation#multiple-headers\"\u003eZipkin B3 Multiple Header\u003c/a\u003e propagator.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003ejaeger\u003c/code\u003e - \u003ca href=\"https://www.jaegertracing.io/docs/1.38/client-libraries/#propagation-format\"\u003eJaeger Header\u003c/a\u003e propagator.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003exray\u003c/code\u003e - \u003ca href=\"https://docs.aws.amazon.com/xray/latest/devguide/xray-concepts.html#xray-concepts-tracingheader\"\u003eAWS X-Ray Header\u003c/a\u003e propagator.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003eottrace\u003c/code\u003e - \u003ca href=\"https://github.com/opentracing?q=basic\u0026amp;type=\u0026amp;language=\"\u003eOT Trace Header\u003c/a\u003e propagator.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003enone\u003c/code\u003e - No automatically configured propagator.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eAll of these are supported by heimdall. In addition, following propagators can be configured as well:\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"ulist\"\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003edatadog\u003c/code\u003e - \u003ca href=\"https://www.datadoghq.com/product/apm/\"\u003eDatadog APM Trace Header\u003c/a\u003e propagator.\u003csup class=\"footnote\"\u003e[\u003ca id=\"_footnoteref_1\" class=\"footnote\" href=\"#_footnotedef_1\" title=\"View footnote.\"\u003e1\u003c/a\u003e]\u003c/sup\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eConfigured propagators are used for inbound, as well as for outbound traffic.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect2\"\u003e\n\u003ch3 id=\"_span_exporters\"\u003eSpan Exporters\u003c/h3\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eSpan Exporter handle the delivery of spans to external receivers (collectors, or agents). This is the final component in the trace export pipeline and typically provided by the APM vendor, like Jaeger, Zipkin, Instana, etc. Since not every multi-service system may have an up to day telemetry receiver supporting protocols defined by OTEL, interoperability can be achieved by configuring the required exporters by making use of the \u003ccode\u003eOTEL_TRACES_EXPORTER\u003c/code\u003e environment variable. OTEL defines the following values for this variable:\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"ulist\"\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003eotlp\u003c/code\u003e - \u003ca href=\"https://opentelemetry.io/docs/reference/specification/protocol/otlp/\"\u003eOTLP\u003c/a\u003e exporter. Enabled by default if \u003ccode\u003eOTEL_TRACES_EXPORTER\u003c/code\u003e is not set.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003ejaeger\u003c/code\u003e - \u003ca href=\"https://github.com/jaegertracing/jaeger-idl/blob/main/thrift/jaeger.thrift\"\u003eJaeger Thrift\u003c/a\u003e exporter to export spans in Jaeger data model.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003ezipkin\u003c/code\u003e - \u003ca href=\"https://zipkin.io/zipkin-api/\"\u003eZipkin\u003c/a\u003e exporter to export spans in Zipkin data model.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003enone\u003c/code\u003e - No automatically configured exporter for traces.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eAll of these are supported by heimdall. In addition, following exporters can be configured as well:\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"ulist\"\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003einstana\u003c/code\u003e - \u003ca href=\"https://www.instana.com/\"\u003eInstana\u003c/a\u003e exporter to export spans in Instana data model.\u003csup class=\"footnote\"\u003e[\u003ca id=\"_footnoteref_2\" class=\"footnote\" href=\"#_footnotedef_2\" title=\"View footnote.\"\u003e2\u003c/a\u003e]\u003c/sup\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect2\"\u003e\n\u003ch3 id=\"_example_configuration\"\u003eExample Configuration\u003c/h3\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThe environment variables set below configure heimdall to use Jaeger propagator and to export the spans via OTLP over grpc to the collector available under \u003ccode\u003ehttp://collector:4317\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"text\"\u003eOTEL_PROPAGATORS=jaeger\nOTEL_TRACES_EXPORTER=otlp\nOTEL_EXPORTER_OTLP_TRACES_PROTOCOL=grpc\nOTEL_EXPORTER_OTLP_TRACES_ENDPOINT=http://collector:4317\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eIf your environment supports OpenTelemetry and usage of defaults is ok, most probably, the only required environment variable to be set might be the \u003ccode\u003eOTEL_EXPORTER_OTLP_TRACES_ENDPOINT\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect1\"\u003e\n\u003ch2 id=\"_metrics_in_heimdall\"\u003eMetrics in Heimdall\u003c/h2\u003e\n\u003cdiv class=\"sectionbody\"\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eBy default, heimdall exposes \u003ca href=\"https://grafana.com/oss/prometheus/\"\u003ePrometheus\u003c/a\u003e style metrics on the \u003ccode\u003e127.0.0.1:10250/metrics\u003c/code\u003e HTTP endpoint (See also \u003ca href=\"/docs/configuration/observability/metrics/\"\u003eMetrics Configuration\u003c/a\u003e) which comprise the following information:\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"ulist\"\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eProcess information, like CPU, memory, file descriptor usage and start time\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eGo runtime information, including details about GC, number of goroutines and OS threats\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eInformation about the metrics endpoint itself, including the number of internal errors encountered while gathering the metrics, number of current inflight and overall scrapes done.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eInformation about the decision and proxy requests handled, including the total amount and duration of http requests by status code, method and path, as well as information about requests in progress.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eInformation about expiry for configured certificates.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThe following table provide detailed information about these\u003c/p\u003e\n\u003c/div\u003e\n\u003ctable class=\"tableblock frame-all grid-all stretch\"\u003e\n\u003ccolgroup\u003e\n\u003ccol style=\"width: 25%;\"/\u003e\n\u003ccol style=\"width: 12.5%;\"/\u003e\n\u003ccol style=\"width: 62.5%;\"/\u003e\n\u003c/colgroup\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth class=\"tableblock halign-left valign-top\"\u003eMetric\u003c/th\u003e\n\u003cth class=\"tableblock halign-left valign-top\"\u003eType\u003c/th\u003e\n\u003cth class=\"tableblock halign-left valign-top\"\u003eDescription\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd class=\"tableblock halign-left valign-top\" colspan=\"3\"\u003e\u003cp class=\"tableblock\"\u003e\u003cem\u003eProcess Information\u003c/em\u003e\u003c/p\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003e\u003ccode\u003eprocess_cpu_seconds_total\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003eCounter\u003c/p\u003e\u003c/td\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003eTotal user and system CPU time spent in seconds.\u003c/p\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003e\u003ccode\u003eprocess_max_fds\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003eGauge\u003c/p\u003e\u003c/td\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003eMaximum number of open file descriptors.\u003c/p\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003e\u003ccode\u003eprocess_open_fds\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003eGauge\u003c/p\u003e\u003c/td\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003eNumber of open file descriptors.\u003c/p\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003e\u003ccode\u003eprocess_resident_memory_bytes\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003eGauge\u003c/p\u003e\u003c/td\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003eResident memory size in bytes.\u003c/p\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003e\u003ccode\u003eprocess_start_time_seconds\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003eGauge\u003c/p\u003e\u003c/td\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003eStart time of the process since unix epoch in seconds.\u003c/p\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003e\u003ccode\u003eprocess_virtual_memory_bytes\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003eGauge\u003c/p\u003e\u003c/td\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003eVirtual memory size in bytes.\u003c/p\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003e\u003ccode\u003eprocess_virtual_memory_max_bytes\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003eGauge\u003c/p\u003e\u003c/td\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003eMaximum amount of virtual memory available in bytes.\u003c/p\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd class=\"tableblock halign-left valign-top\" colspan=\"3\"\u003e\u003cp class=\"tableblock\"\u003e\u003cem\u003eGo Runtime Information\u003c/em\u003e\u003c/p\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003e\u003ccode\u003ego_cgo_go_to_c_calls_calls_total\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003eCounter\u003c/p\u003e\u003c/td\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003eCount of calls made from Go to C by the current process.\u003c/p\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003e\u003ccode\u003ego_gc_cycles_automatic_gc_cycles_total\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003eCounter\u003c/p\u003e\u003c/td\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003eCount of completed GC cycles generated by the Go runtime.\u003c/p\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003e\u003ccode\u003ego_gc_cycles_forced_gc_cycles_total\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003eCounter\u003c/p\u003e\u003c/td\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003eCount of completed GC cycles forced by the application.\u003c/p\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003e\u003ccode\u003ego_gc_cycles_total_gc_cycles_total\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003eCounter\u003c/p\u003e\u003c/td\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003eCount of all completed GC cycles.\u003c/p\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003e\u003ccode\u003ego_gc_duration_seconds\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003eSummary\u003c/p\u003e\u003c/td\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003eA summary of the pause duration of garbage collection cycles.\u003c/p\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003e\u003ccode\u003ego_gc_heap_allocs_by_size_bytes\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003eHistogram\u003c/p\u003e\u003c/td\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003eDistribution of heap allocations by approximate size. Note that this does not include tiny objects as defined by /gc/heap/tiny/allocs:objects, only tiny blocks.\u003c/p\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003e\u003ccode\u003ego_gc_heap_allocs_bytes_total\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003eCounter\u003c/p\u003e\u003c/td\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003eCumulative sum of memory allocated to the heap by the application.\u003c/p\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003e\u003ccode\u003ego_gc_heap_allocs_objects_total\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003eCounter\u003c/p\u003e\u003c/td\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003eCumulative count of heap allocations triggered by the application. Note that this does not include tiny objects as defined by /gc/heap/tiny/allocs:objects, only tiny blocks.\u003c/p\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003e\u003ccode\u003ego_gc_heap_frees_by_size_bytes\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003eHistogram\u003c/p\u003e\u003c/td\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003eistribution of freed heap allocations by approximate size. Note that this does not include tiny objects as defined by /gc/heap/tiny/allocs:objects, only tiny blocks.\u003c/p\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003e\u003ccode\u003ego_gc_heap_frees_bytes_total\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003eCounter\u003c/p\u003e\u003c/td\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003eCumulative sum of heap memory freed by the garbage collector.\u003c/p\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003e\u003ccode\u003ego_gc_heap_frees_objects_total\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003eCounter\u003c/p\u003e\u003c/td\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003eCumulative count of heap allocations whose storage was freed by the garbage collector. Note that this does not include tiny objects as defined by /gc/heap/tiny/allocs:objects, only tiny blocks.\u003c/p\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003e\u003ccode\u003ego_gc_heap_goal_bytes\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003eGauge\u003c/p\u003e\u003c/td\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003eHeap size target for the end of the GC cycle.\u003c/p\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003e\u003ccode\u003ego_gc_heap_objects_objects\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003eGauge\u003c/p\u003e\u003c/td\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003eNumber of objects, live or unswept, occupying heap memory.\u003c/p\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003e\u003ccode\u003ego_gc_heap_tiny_allocs_objects_total\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003eCounter\u003c/p\u003e\u003c/td\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003eCount of small allocations that are packed together into blocks. These allocations are counted separately from other allocations because each individual allocation is not tracked by the runtime, only their block. Each block is already accounted for in allocs-by-size and frees-by-size.\u003c/p\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003e\u003ccode\u003ego_gc_limiter_last_enabled_gc_cycle\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003eGauge\u003c/p\u003e\u003c/td\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003eGC cycle the last time the GC CPU limiter was enabled. This metric is useful for diagnosing the root cause of an out-of-memory error, because the limiter trades memory for CPU time when the GC’s CPU time gets too high. This is most likely to occur with use of SetMemoryLimit. The first GC cycle is cycle 1, so a value of 0 indicates that it was never enabled.\u003c/p\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003e\u003ccode\u003ego_gc_pauses_seconds\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003eHistogram\u003c/p\u003e\u003c/td\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003eDistribution individual GC-related stop-the-world pause latencies.\u003c/p\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003e\u003ccode\u003ego_gc_stack_starting_size_bytes\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003eGauge\u003c/p\u003e\u003c/td\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003eThe stack size of new goroutines.\u003c/p\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003e\u003ccode\u003ego_goroutines\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003eGauge\u003c/p\u003e\u003c/td\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003eNumber of goroutines that currently exist.\u003c/p\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003e\u003ccode\u003ego_info\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003eGauge\u003c/p\u003e\u003c/td\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003eInformation about the Go environment.\u003c/p\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003e\u003ccode\u003ego_memory_classes_heap_free_bytes\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003eGauge\u003c/p\u003e\u003c/td\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003eMemory that is completely free and eligible to be returned to the underlying system, but has not been. This metric is the runtime’s estimate of free address space that is backed by physical memory.\u003c/p\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003e\u003ccode\u003ego_memory_classes_heap_objects_bytes\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003eGauge\u003c/p\u003e\u003c/td\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003eMemory occupied by live objects and dead objects that have not yet been marked free by the garbage collector.\u003c/p\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003e\u003ccode\u003ego_memory_classes_heap_released_bytes\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003eGauge\u003c/p\u003e\u003c/td\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003eMemory that is completely free and has been returned to the underlying system. This metric is the runtime’s estimate of free address space that is still mapped into the process, but is not backed by physical memory.\u003c/p\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003e\u003ccode\u003ego_memory_classes_heap_stacks_bytes\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003eGauge\u003c/p\u003e\u003c/td\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003eMemory allocated from the heap that is reserved for stack space, whether or not it is currently in-use.\u003c/p\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003e\u003ccode\u003ego_memory_classes_heap_stacks_bytes\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003eGauge\u003c/p\u003e\u003c/td\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003eMemory allocated from the heap that is reserved for stack space, whether or not it is currently in-use.\u003c/p\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003e\u003ccode\u003ego_memory_classes_heap_unused_bytes\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003eGauge\u003c/p\u003e\u003c/td\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003eMemory that is reserved for heap objects but is not currently used to hold heap objects.\u003c/p\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003e\u003ccode\u003ego_memory_classes_metadata_mcache_free_bytes\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003eGauge\u003c/p\u003e\u003c/td\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003eMemory that is reserved for runtime mcache structures, but not in-use.\u003c/p\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003e\u003ccode\u003ego_memory_classes_metadata_mcache_inuse_bytes\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003eGauge\u003c/p\u003e\u003c/td\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003eMemory that is occupied by runtime mcache structures that are currently being used.\u003c/p\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003e\u003ccode\u003ego_memory_classes_metadata_mspan_free_bytes\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003eGauge\u003c/p\u003e\u003c/td\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003eMemory that is reserved for runtime mspan structures, but not in-use.\u003c/p\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003e\u003ccode\u003ego_memory_classes_metadata_mspan_inuse_bytes\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003eGauge\u003c/p\u003e\u003c/td\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003eMemory that is occupied by runtime mspan structures that are currently being used.\u003c/p\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003e\u003ccode\u003ego_memory_classes_metadata_other_bytes\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003eGauge\u003c/p\u003e\u003c/td\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003eMemory that is reserved for or used to hold runtime metadata.\u003c/p\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003e\u003ccode\u003ego_memory_classes_os_stacks_bytes\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003eGauge\u003c/p\u003e\u003c/td\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003eStack memory allocated by the underlying operating system.\u003c/p\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003e\u003ccode\u003ego_memory_classes_other_bytes\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003eGauge\u003c/p\u003e\u003c/td\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003eMemory used by execution trace buffers, structures for debugging the runtime, finalizer and profiler specials, and more.\u003c/p\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003e\u003ccode\u003ego_memory_classes_profiling_buckets_bytes\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003eGauge\u003c/p\u003e\u003c/td\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003eMemory that is used by the stack trace hash map used for profiling.\u003c/p\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003e\u003ccode\u003ego_memory_classes_total_bytes\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003eGauge\u003c/p\u003e\u003c/td\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003eAll memory mapped by the Go runtime into the current process as read-write. Note that this does not include memory mapped by code called via cgo or via the syscall package. Sum of all metrics in /memory/classes.\u003c/p\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003e\u003ccode\u003ego_memstats_last_gc_time_seconds\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003eGauge\u003c/p\u003e\u003c/td\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003eNumber of seconds since 1970 of last garbage collection.\u003c/p\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003e\u003ccode\u003ego_sched_gomaxprocs_threads\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003eGauge\u003c/p\u003e\u003c/td\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003eThe current runtime.GOMAXPROCS setting, or the number of operating system threads that can execute user-level Go code simultaneously.\u003c/p\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003e\u003ccode\u003ego_sched_goroutines_goroutines\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003eGauge\u003c/p\u003e\u003c/td\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003eCount of live goroutines.\u003c/p\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003e\u003ccode\u003ego_sched_latencies_seconds\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003eHistogram\u003c/p\u003e\u003c/td\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003eDistribution of the time goroutines have spent in the scheduler in a runnable state before actually running.\u003c/p\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003e\u003ccode\u003ego_threads\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003eGauge\u003c/p\u003e\u003c/td\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003eNumber of OS threads created.\u003c/p\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd class=\"tableblock halign-left valign-top\" colspan=\"3\"\u003e\u003cp class=\"tableblock\"\u003e\u003cem\u003eDecision / Proxy / Management Service request related\u003c/em\u003e\u003c/p\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003e\u003ccode\u003ehttp_request_duration_seconds\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003eHistogram\u003c/p\u003e\u003c/td\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003eDuration of all HTTP requests by service (decision, proxy, management), status code, method and path.\u003c/p\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003e\u003ccode\u003ehttp_requests_in_progress_total\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003eGauge\u003c/p\u003e\u003c/td\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003eAll the requests in progress by service (decision, proxy, management) and method\u003c/p\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003e\u003ccode\u003ehttp_requests_total\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003eCounter\u003c/p\u003e\u003c/td\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003eCount all http requests by service (decision, proxy, management), status code, method and path.\u003c/p\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd class=\"tableblock halign-left valign-top\" colspan=\"3\"\u003e\u003cp class=\"tableblock\"\u003e\u003cem\u003eCertificate expiry information\u003c/em\u003e\u003c/p\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003e\u003ccode\u003ecertificate_expiry_seconds\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003eGauge\u003c/p\u003e\u003c/td\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003eNumber of seconds until a certificate used by a particular service (decision, proxy, management), as well as signer expires. Contains certificate identification information as well.\u003c/p\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd class=\"tableblock halign-left valign-top\" colspan=\"3\"\u003e\u003cp class=\"tableblock\"\u003e\u003cem\u003eMetrics endpoint statistics\u003c/em\u003e\u003c/p\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003e\u003ccode\u003epromhttp_metric_handler_requests_in_flight\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003eGauge\u003c/p\u003e\u003c/td\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003eCurrent number of scrapes being served.\u003c/p\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003e\u003ccode\u003epromhttp_metric_handler_requests_total\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003eCounter\u003c/p\u003e\u003c/td\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003eTotal number of scrapes by HTTP status code.\u003c/p\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003e\u003ccode\u003epromhttp_metric_handler_errors_total\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003eCounter\u003c/p\u003e\u003c/td\u003e\n\u003ctd class=\"tableblock halign-left valign-top\"\u003e\u003cp class=\"tableblock\"\u003eTotal number of internal errors encountered by the promhttp metric handler.\u003c/p\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cdiv class=\"admonitionblock note\"\u003e\n\u003ctable\u003e\n\u003ctbody\u003e\u003ctr\u003e\n\u003ctd class=\"icon\"\u003e\n\u003ci class=\"fa icon-note\" title=\"Note\"\u003e\u003c/i\u003e\n\u003c/td\u003e\n\u003ctd class=\"content\"\u003e\nMore details about Prometheus metric types can be found \u003ca href=\"https://prometheus.io/docs/concepts/metric_types/\"\u003ehere\u003c/a\u003e.\n\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect1\"\u003e\n\u003ch2 id=\"_runtime_profiling_in_heimdall\"\u003eRuntime Profiling in Heimdall\u003c/h2\u003e\n\u003cdiv class=\"sectionbody\"\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eIf enabled, heimdall exposes a \u003ccode\u003e/debug/pprof\u003c/code\u003e HTTP endpoint on port \u003ccode\u003e10251\u003c/code\u003e (See also \u003ca href=\"/docs/configuration/observability/profiling/\"\u003eRuntime Profiling Configuration\u003c/a\u003e) on which runtime profiling data in the \u003ccode\u003eprofile.proto\u003c/code\u003e format (also known as \u003ccode\u003epprof\u003c/code\u003e format) can be consumed by APM tools, like \u003ca href=\"https://github.com/google/pprof\"\u003eGoogle’s pprof\u003c/a\u003e, \u003ca href=\"https://grafana.com/oss/phlare/\"\u003eGrafana Phlare\u003c/a\u003e, \u003ca href=\"https://pyroscope.io/\"\u003ePyroscope\u003c/a\u003e and many more for visualization purposes. Following information is available:\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"ulist\"\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003eallocs\u003c/code\u003e - A sampling of all past memory allocations.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003eblock\u003c/code\u003e - Stack traces that led to blocking on synchronization primitives.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003ecmdline\u003c/code\u003e - The command line invocation of the current program, with arguments separated by NUL bytes.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003egoroutine\u003c/code\u003e - Stack traces of all current goroutines.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003eheap\u003c/code\u003e - A sampling of memory allocations of live objects.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003emutex\u003c/code\u003e - Stack traces of holders of contended mutexes.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003eprofile\u003c/code\u003e - Cpu profile. Profiling lasts for duration specified in \u003ccode\u003eseconds\u003c/code\u003e parameter, or for 30 seconds if not specified\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003esymbol\u003c/code\u003e - Looks up the program counters listed in the request, responding with a table mapping program counters to function names.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003ethreadcreate\u003c/code\u003e - Stack traces that led to the creation of new OS threads.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003etrace\u003c/code\u003e - Execution trace in binary form. Tracing lasts for duration specified in \u003ccode\u003eseconds\u003c/code\u003e parameter, or for 1 second if not specified.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eSee also the \u003ca href=\"/openapi/#tag/Profiling\"\u003eAPI\u003c/a\u003e documentation for the documentation of the actual API.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv id=\"footnotes\"\u003e\n\u003chr/\u003e\n\u003cdiv class=\"footnote\" id=\"_footnotedef_1\"\u003e\n\u003ca href=\"#_footnoteref_1\"\u003e1\u003c/a\u003e. Datadog supports the OTLP protokoll. For that reason, there is no exporter available.\n\u003c/div\u003e\n\u003cdiv class=\"footnote\" id=\"_footnotedef_2\"\u003e\n\u003ca href=\"#_footnoteref_2\"\u003e2\u003c/a\u003e. Instana supports the W3C header used by OTEL. For that reason, there is no propagator available.\n\u003c/div\u003e\n\u003c/div\u003e\n","sections":["Operations"],"tags":null,"title":"Observability","url":"/docs/operations/observability/"},{"categories":null,"content":" To operate heimdall in a secure way, you should configure heimdall accordingly. Following sections address the corresponding areas.\nObservability Information Logs, metrics and profiling information is very valuable for operating heimdall. These are however also very valuable for any adversary. For this reason, the corresponding services, which expose such information are by default, if enabled, listening only on the loopback (127.0.0.1) interface. If you have to configure them to listen to other interfaces, e.g. because you operate heimdall in a container, make sure, you don’t expose them publicly.\nTLS As documented in Concepts section, the execution of heimdall’s pipeline typically includes communication to other systems. The endpoints of the corresponding systems should be TLS protected. This is however actually out of scope for heimdall. What is in scope, is the verification of the used TLS server certificate, if TLS is used. This happens by making use of the operating system-wide trust store, containing the certificates of Root and Intermediate CAs (trust anchors) shipped with the OS. That means, you should\nensure this trust store contains the certificates of the Root CAs of your PKI hierarchy and\nensure the endpoints, heimdall communicates with over TLS, provide not only their own certificates, but also the intermediate certificates and cross certificates not included within the OS trust store\nBoth is required to enable heimdall building the certificate chain for TLS server certificate verification purpose. If heimdall fails doing so, the connection will be dropped.\nAs written above, heimdall makes use of the OS wide trust store to build the certificate chain. The most common installation directory on a Linux system for that trust store is the /etc/ssl/certs directory. In addition to the separate root and intermediate CA certificates, it also contains a ca-certificates.crt file, containing all installed certificates as well. This file is used by heimdall for the aforesaid purpose.\nheimdall Docker image is shipped without any certificates by intention to ensure you take care about the up-to-date status of the trust store. This way, if you use heimdall in a container, you have to mount the OS trust store into heimdall’s container to enable its usage.\nE.g.\ndocker run -t -p 4456:4456 \\ -v $PWD:/heimdall/conf \\ -v /etc/ssl/certs/ca-certificates.crt:/etc/ssl/certs/ca-certificates.crt:ro \\ dadrus/heimdall:latest serve decision \\ -c /heimdall/conf/heimdall.yaml The verification of TLS server certificates is not the single configuration option. You should also ensure heimdall’s services, you’re using, are configured to be available via TLS as well. See TLS Configuration for all available options.\nSignatures When heimdall is used to issue signed objects, like JWTs, to enable upstream services to rely on authentic subject information, it acts as an issuer of such objects and requires corresponding configuration (see Cryptographic Material).\nIn a typical production scenario, there is a need for proper key and certificate management. This is supported by heimdall in the following way:\nyou can and should configure not only the private key for signature creation purposes, but also the corresponding certificate chain. This way your upstream services are able not only to verify the signatures of the signed objects for cryptographic validity, but also perform verification of the revocation status of used certificates and also their time validity. All of that is crucial for secure communication.\nThe cryptographic material for the above said verification purposes is available via the JWKS endpoint for the upstream services.\nyou can configure multiple keys in heimdall’s key_store and specify the key_id of the key to use. The easiest way to let heimdall use the key id, you need, is to set X-Key-ID header in the PEM block of the corresponding private key. With that in place you can perform key roll over without down-times by first updating the key stores of all heimdall instances to include the new key and certificates, and when this is done, by updating the key id to reference the new key material instance by instance. This way all upstream services can verify the signatures of the objects issued by heimdall, regardless of the used key material, as all heimdall instances, are able to serve the new and the old cryptographic material.\n","description":"","html_content":"\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eTo operate heimdall in a secure way, you should configure heimdall accordingly. Following sections address the corresponding areas.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect1\"\u003e\n\u003ch2 id=\"_observability_information\"\u003eObservability Information\u003c/h2\u003e\n\u003cdiv class=\"sectionbody\"\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eLogs, metrics and profiling information is very valuable for operating heimdall. These are however also very valuable for any adversary. For this reason, the corresponding services, which expose such information are by default, if enabled, listening only on the loopback (\u003ccode\u003e127.0.0.1\u003c/code\u003e) interface. If you have to configure them to listen to other interfaces, e.g. because you operate heimdall in a container, make sure, you don’t expose them publicly.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect1\"\u003e\n\u003ch2 id=\"_tls\"\u003eTLS\u003c/h2\u003e\n\u003cdiv class=\"sectionbody\"\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eAs documented in \u003ca href=\"/docs/getting_started/concepts/\"\u003eConcepts\u003c/a\u003e section, the execution of heimdall’s pipeline typically includes communication to other systems. The endpoints of the corresponding systems should be TLS protected. This is however actually out of scope for heimdall. What is in scope, is the verification of the used TLS server certificate, if TLS is used. This happens by making use of the operating system-wide trust store, containing the certificates of Root and Intermediate CAs (trust anchors) shipped with the OS. That means, you should\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"olist arabic\"\u003e\n\u003col class=\"arabic\"\u003e\n\u003cli\u003e\n\u003cp\u003eensure this trust store contains the certificates of the Root CAs of your PKI hierarchy and\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eensure the endpoints, heimdall communicates with over TLS, provide not only their own certificates, but also the intermediate certificates and cross certificates not included within the OS trust store\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eBoth is required to enable heimdall building the certificate chain for TLS server certificate verification purpose. If heimdall fails doing so, the connection will be dropped.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eAs written above, heimdall makes use of the OS wide trust store to build the certificate chain. The most common installation directory on a Linux system for that trust store is the \u003ccode\u003e/etc/ssl/certs\u003c/code\u003e directory. In addition to the separate root and intermediate CA certificates, it also contains a \u003ccode\u003eca-certificates.crt\u003c/code\u003e file, containing all installed certificates as well. This file is used by heimdall for the aforesaid purpose.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"admonitionblock note\"\u003e\n\u003ctable\u003e\n\u003ctbody\u003e\u003ctr\u003e\n\u003ctd class=\"icon\"\u003e\n\u003ci class=\"fa icon-note\" title=\"Note\"\u003e\u003c/i\u003e\n\u003c/td\u003e\n\u003ctd class=\"content\"\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eheimdall Docker image is shipped without any certificates by intention to ensure you take care about the up-to-date status of the trust store. This way, if you use heimdall in a container, you have to mount the OS trust store into heimdall’s container to enable its usage.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eE.g.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"bash\"\u003edocker run \u003cspan style=\"color: #f92672\"\u003e-t\u003c/span\u003e \u003cspan style=\"color: #f92672\"\u003e-p\u003c/span\u003e 4456:4456 \u003cspan style=\"color: #ae81ff\"\u003e\\\u003c/span\u003e\n  \u003cspan style=\"color: #f92672\"\u003e-v\u003c/span\u003e \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e$PWD\u003c/span\u003e:/heimdall/conf \u003cspan style=\"color: #ae81ff\"\u003e\\\u003c/span\u003e\n  \u003cspan style=\"color: #f92672\"\u003e-v\u003c/span\u003e /etc/ssl/certs/ca-certificates.crt:/etc/ssl/certs/ca-certificates.crt:ro \u003cspan style=\"color: #ae81ff\"\u003e\\\u003c/span\u003e\n   dadrus/heimdall:latest serve decision \u003cspan style=\"color: #ae81ff\"\u003e\\\u003c/span\u003e\n  \u003cspan style=\"color: #f92672\"\u003e-c\u003c/span\u003e /heimdall/conf/heimdall.yaml\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThe verification of TLS server certificates is not the single configuration option. You should also ensure heimdall’s services, you’re using, are configured to be available via TLS as well. See \u003ca href=\"/docs/configuration/reference/types/#_tls\"\u003eTLS Configuration\u003c/a\u003e for all available options.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect1\"\u003e\n\u003ch2 id=\"_signatures\"\u003eSignatures\u003c/h2\u003e\n\u003cdiv class=\"sectionbody\"\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eWhen heimdall is used to issue signed objects, like JWTs, to enable upstream services to rely on authentic subject information, it acts as an issuer of such objects and requires corresponding configuration (see \u003ca href=\"/docs/configuration/cryptographic_material/\"\u003eCryptographic Material\u003c/a\u003e).\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eIn a typical production scenario, there is a need for proper key and certificate management. This is supported by heimdall in the following way:\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"ulist\"\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eyou can and should configure not only the private key for signature creation purposes, but also the corresponding certificate chain. This way your upstream services are able not only to verify the signatures of the signed objects for cryptographic validity, but also perform verification of the revocation status of used certificates and also their time validity. All of that is crucial for secure communication.\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThe cryptographic material for the above said verification purposes is available via the \u003ca href=\"/openapi/#tag/Well-Known/operation/well_known_jwks\"\u003eJWKS endpoint\u003c/a\u003e for the upstream services.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eyou can configure multiple keys in heimdall’s \u003ccode\u003ekey_store\u003c/code\u003e and specify the \u003ccode\u003ekey_id\u003c/code\u003e of the key to use. The easiest way to let heimdall use the key id, you need, is to set \u003ccode\u003eX-Key-ID\u003c/code\u003e header in the PEM block of the corresponding private key. With that in place you can perform key roll over without down-times by first updating the key stores of all heimdall instances to include the new key and certificates, and when this is done, by updating the key id to reference the new key material instance by instance. This way all upstream services can verify the signatures of the objects issued by heimdall, regardless of the used key material, as all heimdall instances, are able to serve the new and the old cryptographic material.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n","sections":["Operations"],"tags":null,"title":"Security","url":"/docs/operations/security/"},{"categories":null,"content":" Traefik Proxy is a modern HTTP proxy and load balancer for microservices, heimdall can be integrated with via the ForwardAuth Middleware while operated in the Decision Operation Mode. In such setup, traefik delegates authentication and authorization to heimdall. If heimdall answers with a 2XX code, traefik grants access and forwards the original request to the upstream service. Otherwise, the response from heimdall is returned to the client.\nTo achieve this, configure traefik\nto make use of the aforesaid ForwardAuth middleware by setting the address property to the decision service endpoint and\nconfigure the authResponseHeaders to contain the required header name(s), heimdall sets in the HTTP responses (depends on your Contextualizers and Unifiers configuration).\nConfigure the route of your service to make use of this middleware.\nTraefik makes use of X-Forwarded-* HTTP headers to forward the HTTP method, protocol, host, etc. to the ForwardAuth middleware. These headers can be spoofed, if no caution is taken. To allow heimdall making use of such headers, you must configure trusted proxies in heimdall’s decision configuration to contain the IPs or networks of your traefik instances. For test purposes, you can set it to \u0026#34;0.0.0.0/0\u0026#34;, which would basically disable the check and let heimdall trust requests from any source.\nExample 1. Using Docker labels edge-router: image: traefik # further configuration labels: - traefik.http.middlewares.heimdall.forwardauth.address=http://heimdall:4456 - traefik.http.middlewares.heimdall.forwardauth.authResponseHeaders=X-Id-Token,Authorization # further labels service: image: my-service # further configuration labels: - traefik.http.routers.service.middlewares=heimdall # further labels A fully working example with Traefik is shown in the Decision Service Quickstart and is also available on GitHub.\n","description":"","html_content":"\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003e\u003ca href=\"https://doc.traefik.io/traefik/\"\u003eTraefik Proxy\u003c/a\u003e is a modern HTTP proxy and load balancer for microservices, heimdall can be integrated with via the \u003ca href=\"https://doc.traefik.io/traefik/middlewares/http/forwardauth/\"\u003eForwardAuth Middleware\u003c/a\u003e while operated in the \u003ca href=\"/docs/getting_started/concepts/#_decision_mode\"\u003eDecision Operation Mode\u003c/a\u003e. In such setup, traefik delegates authentication and authorization to heimdall. If heimdall answers with a 2XX code, traefik grants access and forwards the original request to the upstream service. Otherwise, the response from heimdall is returned to the client.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eTo achieve this, configure traefik\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"ulist\"\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eto make use of the aforesaid ForwardAuth middleware by setting the \u003ccode\u003eaddress\u003c/code\u003e property to the decision service endpoint and\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003econfigure the \u003ccode\u003eauthResponseHeaders\u003c/code\u003e to contain the required header name(s), heimdall sets in the HTTP responses (depends on your \u003ca href=\"/docs/configuration/rules/pipeline_mechanisms/contextualizers/\"\u003eContextualizers\u003c/a\u003e and \u003ca href=\"/docs/configuration/rules/pipeline_mechanisms/unifiers/\"\u003eUnifiers\u003c/a\u003e configuration).\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eConfigure the route of your service to make use of this middleware.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\u003cdiv class=\"admonitionblock caution\"\u003e\n\u003ctable\u003e\n\u003ctbody\u003e\u003ctr\u003e\n\u003ctd class=\"icon\"\u003e\n\u003ci class=\"fa icon-caution\" title=\"Caution\"\u003e\u003c/i\u003e\n\u003c/td\u003e\n\u003ctd class=\"content\"\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eTraefik makes use of \u003ccode\u003eX-Forwarded-*\u003c/code\u003e HTTP headers to forward the HTTP method, protocol, host, etc. to the ForwardAuth middleware. These headers can be spoofed, if no caution is taken. To allow heimdall making use of such headers, you must configure \u003ca href=\"/docs/configuration/services/decision/#_trusted_proxies\"\u003etrusted proxies\u003c/a\u003e in heimdall’s decision configuration to contain the IPs or networks of your traefik instances. For test purposes, you can set it to \u0026#34;0.0.0.0/0\u0026#34;, which would basically disable the check and let heimdall trust requests from any source.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003cdiv class=\"exampleblock\"\u003e\n\u003cdiv class=\"title\"\u003eExample 1. Using Docker labels\u003c/div\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"yaml\"\u003e\u003cspan style=\"color: #a6e22e\"\u003eedge-router\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003eimage\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003etraefik\u003c/span\u003e\n  \u003cspan style=\"color: #75715e\"\u003e# further configuration\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003elabels\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n    \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003etraefik.http.middlewares.heimdall.forwardauth.address=http://heimdall:4456\u003c/span\u003e\n    \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003etraefik.http.middlewares.heimdall.forwardauth.authResponseHeaders=X-Id-Token,Authorization\u003c/span\u003e\n    \u003cspan style=\"color: #75715e\"\u003e# further labels\u003c/span\u003e\n\n\u003cspan style=\"color: #a6e22e\"\u003eservice\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003eimage\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003emy-service\u003c/span\u003e\n  \u003cspan style=\"color: #75715e\"\u003e# further configuration\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003elabels\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n    \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003etraefik.http.routers.service.middlewares=heimdall\u003c/span\u003e\n    \u003cspan style=\"color: #75715e\"\u003e# further labels\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eA fully working example with Traefik is shown in the \u003ca href=\"/docs/getting_started/decision_service_quickstart/#_run_integrated\"\u003eDecision Service Quickstart\u003c/a\u003e and is also available on \u003ca href=\"https://github.com/dadrus/heimdall/tree/main/examples/docker-compose/quickstarts\"\u003eGitHub\u003c/a\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n","sections":["Guides"],"tags":null,"title":"Traefik Proxy Integration","url":"/docs/guides/traefik/"},{"categories":null,"content":" NGINX is an HTTP and reverse proxy server which became famous as one of the fastest web servers out there, heimdall can be integrated with by making use of the ngx_http_auth_request_module. In such setup, NGINX delegates authentication and authorization to heimdall. If heimdall answers with a 2XX code, NGINX grants access and forwards the original request to the upstream service. If heimdall returns 401 or 403, the access is denied with the corresponding error code. Any other response code returned by heimdall is considered an error.\nIf there is no matching rule on heimdall side, heimdall responds with 404 Not Found, which, as said above will be treated by NGINX as error. To avoid such situations, you can define a default rule, which is anyway recommended to have secure defaults, which, depending on the configuration, would then respond either with 401 or 403, or still 405 if you do not allow a specific HTTP method. Since NGINX is highly configurable and heimdall supports different integration options, you can use any of the configuration examples given below. All of these enable heimdall to build the URL of the protected backend server for rule matching purposes.\nIn most cases you must configure heimdall to trust your NGINX instances by setting trusted_proxies for the Decision, respectively Proxy service. Exceptions are described in the sections below.\nForward only the host information in the header With this method you set the X-Forwarded-Host to let heimdall know the host, respectively dome the request was sent to. All other URL parts (schema, path and query parameter) as well as the HTTP method are then inferred from the URL and the request heimdall receives.\nInstead of using X-Forwarded-Host you could also make use of the Host header. In that case, there is no need to configure the trusted_proxies.\nExample 1. Possible Configuration # nginx.conf ... location / { auth_request /_auth; (1) auth_request_set $auth_cookie $upstream_http_set_cookie; (2) add_header Set-Cookie $auth_cookie; auth_request_set $authHeader0 $upstream_http_authorization; (3) proxy_set_header \u0026#39;Authorization\u0026#39; $authHeader0; # mitigate HTTPoxy Vulnerability # https://www.nginx.com/blog/mitigating-the-httpoxy-vulnerability-with-nginx/ proxy_set_header Proxy \u0026#34;\u0026#34;; ... } location = /_auth { (4) internal; proxy_pass http://heimdall:4456$request_uri; (5) proxy_pass_request_body off; (6) proxy_set_header Content-Length \u0026#34;\u0026#34;; proxy_set_header X-Forwarded-Host $http_host; (7) proxy_set_header X-Forwarded-For $remote_addr; (8) } 1 Configures NGINX to forward every request to the internal /_auth endpoint (this is where the actual heimdall integration happens - see below). 2 When the response from heimdall returns, this and the next line set the Cookies set by heimdall in the response (whether you need this depends on your Contextualizers and Unifiers configuration) 3 When the response from heimdall returns, this and the next line set the Authorization header set by heimdall in the response (which header to set depends again on your Contextualizers and Unifiers configuration) 4 This is where the \u0026#34;magic\u0026#34; happens 5 Configures NGINX to pass the request to heimdall and sets the request path and queries from the original request 6 Disables sending of the request body. If your heimdall rules make use of the body, you should set this to on and remove the next line. 7 This is where you forward the host information to heimdall 8 Not really required, but makes the remote address available to heimdall and thus to the mechanisms used in by the rules. Requires trusted_proxies to be configured. Forward all information in X-Forwarded-* headers With this method you set the X-Forwarded-Method, X-Forwarded-Proto, X-Forwarded-Host and X-Forwarded-Path to let heimdall know the host, respectively domain url and the used HTTP method.\nCompared to the previous integration option, the configuration only differs in the definition of the internal /_auth endpoint. So, the example configuration is limited to that part only.\nExample 2. Possible Configuration # nginx.conf ... location = /_auth { internal; proxy_pass http://heimdall:4456; (1) proxy_pass_request_body off; proxy_set_header Content-Length \u0026#34;\u0026#34;; proxy_set_header X-Forwarded-Method $request_method; (2) proxy_set_header X-Forwarded-Proto $scheme; (3) proxy_set_header X-Forwarded-Host $http_host; (4) proxy_set_header X-Forwarded-Path $request_uri; (5) proxy_set_header X-Forwarded-For $remote_addr; } 1 Configures NGINX to pass the request to heimdall. 2 Let NGINX forward the used HTTP method to heimdall. 3 Let NGINX forward the used HTTP schema to heimdall. 4 Let NGINX forward the used host to heimdall. 5 Let NGINX forward the used path and query parameter to heimdall. Forward all information in X-Forwarded-Uri and X-Forwarded-Method headers This method is a simplified alternative to the previous one in which heimdall receives everything required to know the host url and the HTTP method in HTTP headers.\nThe difference is again in the definition of the internal /_auth endpoint. So, the example configuration is limited to that part.\nExample 3. Possible Configuration # nginx.conf ... location = /_auth { internal; proxy_pass http://heimdall:4456; (1) proxy_pass_request_body off; proxy_set_header Content-Length \u0026#34;\u0026#34;; proxy_set_header X-Forwarded-Method $request_method; (2) proxy_set_header X-Forwarded-Uri $scheme://$http_host$request_uri; (3) proxy_set_header X-Forwarded-For $remote_addr; } 1 Configures NGINX to pass the request to heimdall. 2 Let NGINX forward the used HTTP method to heimdall. 3 Let NGINX forward the entire used HTTP URL to heimdall. Integration with NGINX Ingress Controller. The integration option, described in the Forward all information in X-Forwarded-* headers section corresponds more or less to the way how the ngnix.conf file is generated by the default nginx-ingress template used by the NGINX Ingress Controller. The only missing parts are the request path and the query parameter. So you can easily integrate heimdall by adding the following annotations to your ingress configuration.\nExample 4. Possible Configuration nginx.ingress.kubernetes.io/auth-url: \u0026#34;http://\u0026lt;heimdall service name\u0026gt;.\u0026lt;namespace\u0026gt;.svc.cluster.local:\u0026lt;decision port\u0026gt;/$request_uri\u0026#34; (1) nginx.ingress.kubernetes.io/auth-response-headers: Authorization (2) # other annotations required 1 Configures the controller to pass the request path and query parameters to heimdall’s decision service endpoint with \u0026lt;heimdall service name\u0026gt;, \u0026lt;namespace\u0026gt; and \u0026lt;decision port\u0026gt; depending on your configuration. 2 Let NGINX forward the Authorization header set by heimdall to the upstream service. This configuration depends on your Contextualizers and Unifiers configuration Checkout the Kubernetes quickstarts on GitHub for a working demo.\n","description":"","html_content":"\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003e\u003ca href=\"https://nginx.org/\"\u003eNGINX\u003c/a\u003e is an HTTP and reverse proxy server which became famous as one of the fastest web servers out there, heimdall can be integrated with by making use of the \u003ca href=\"https://nginx.org/en/docs/http/ngx_http_auth_request_module.html\"\u003engx_http_auth_request_module\u003c/a\u003e. In such setup, NGINX delegates authentication and authorization to heimdall. If heimdall answers with a 2XX code, NGINX grants access and forwards the original request to the upstream service. If heimdall returns 401 or 403, the access is denied with the corresponding error code. Any other response code returned by heimdall is considered an error.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"admonitionblock note\"\u003e\n\u003ctable\u003e\n\u003ctbody\u003e\u003ctr\u003e\n\u003ctd class=\"icon\"\u003e\n\u003ci class=\"fa icon-note\" title=\"Note\"\u003e\u003c/i\u003e\n\u003c/td\u003e\n\u003ctd class=\"content\"\u003e\nIf there is no matching rule on heimdall side, heimdall responds with \u003ccode\u003e404 Not Found\u003c/code\u003e, which, as said above will be treated by NGINX as error. To avoid such situations, you can define a \u003ca href=\"/docs/configuration/rules/default/\"\u003edefault rule\u003c/a\u003e, which is anyway recommended to have secure defaults, which, depending on the configuration, would then respond either with 401 or 403, or still 405 if you do not allow a specific HTTP method.\n\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eSince NGINX is highly configurable and heimdall supports different integration options, you can use any of the configuration examples given below. All of these enable heimdall to build the URL of the protected backend server for rule matching purposes.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eIn most cases you must configure heimdall to trust your NGINX instances by setting \u003ca href=\"/docs/configuration/services/decision/#_trusted_proxies\"\u003e\u003ccode\u003etrusted_proxies\u003c/code\u003e\u003c/a\u003e for the Decision, respectively Proxy service. Exceptions are described in the sections below.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect1\"\u003e\n\u003ch2 id=\"_first_option\"\u003eForward only the host information in the header\u003c/h2\u003e\n\u003cdiv class=\"sectionbody\"\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eWith this method you set the \u003ccode\u003eX-Forwarded-Host\u003c/code\u003e to let heimdall know the host, respectively dome the request was sent to. All other URL parts (schema, path and query parameter) as well as the HTTP method are then inferred from the URL and the request heimdall receives.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eInstead of using \u003ccode\u003eX-Forwarded-Host\u003c/code\u003e you could also make use of the \u003ccode\u003eHost\u003c/code\u003e header. In that case, there is no need to configure the \u003ccode\u003etrusted_proxies\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"exampleblock\"\u003e\n\u003cdiv class=\"title\"\u003eExample 1. Possible Configuration\u003c/div\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"nginx\"\u003e\u003cspan style=\"color: #75715e\"\u003e# nginx.conf\u003c/span\u003e\n\u003cspan style=\"color: #f92672\"\u003e...\u003c/span\u003e\n\n\u003cspan style=\"color: #e6db74\"\u003elocation\u003c/span\u003e \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e/\u003c/span\u003e \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e{\u003c/span\u003e\n  \u003cspan style=\"color: #f92672\"\u003eauth_request\u003c/span\u003e            \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e/_auth\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e;\u003c/span\u003e  \u003ci class=\"conum\" data-value=\"1\"\u003e\u003c/i\u003e\u003cb\u003e(1)\u003c/b\u003e\n  \u003cspan style=\"color: #f92672\"\u003eauth_request_set\u003c/span\u003e        \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e$auth_cookie\u003c/span\u003e \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e$upstream_http_set_cookie\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e;\u003c/span\u003e  \u003ci class=\"conum\" data-value=\"2\"\u003e\u003c/i\u003e\u003cb\u003e(2)\u003c/b\u003e\n  \u003cspan style=\"color: #f92672\"\u003eadd_header\u003c/span\u003e              \u003cspan style=\"color: #e6db74\"\u003eSet-Cookie\u003c/span\u003e \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e$auth_cookie\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e;\u003c/span\u003e\n  \u003cspan style=\"color: #f92672\"\u003eauth_request_set\u003c/span\u003e        \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e$authHeader0\u003c/span\u003e \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e$upstream_http_authorization\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e;\u003c/span\u003e  \u003ci class=\"conum\" data-value=\"3\"\u003e\u003c/i\u003e\u003cb\u003e(3)\u003c/b\u003e\n  \u003cspan style=\"color: #f92672\"\u003eproxy_set_header\u003c/span\u003e        \u003cspan style=\"color: #e6db74\"\u003e\u0026#39;Authorization\u0026#39;\u003c/span\u003e \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e$authHeader0\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e;\u003c/span\u003e\n  \u003cspan style=\"color: #75715e\"\u003e# mitigate HTTPoxy Vulnerability\u003c/span\u003e\n  \u003cspan style=\"color: #75715e\"\u003e# https://www.nginx.com/blog/mitigating-the-httpoxy-vulnerability-with-nginx/\u003c/span\u003e\n  \u003cspan style=\"color: #f92672\"\u003eproxy_set_header\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eProxy\u003c/span\u003e  \u003cspan style=\"color: #e6db74\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e;\u003c/span\u003e\n  \u003cspan style=\"color: #f92672\"\u003e...\u003c/span\u003e\n\u003cspan style=\"color: #960050\"\u003e}\u003c/span\u003e\n\n\u003cspan style=\"color: #e6db74\"\u003elocation\u003c/span\u003e \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e=\u003c/span\u003e \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e/_auth\u003c/span\u003e \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e{\u003c/span\u003e  \u003ci class=\"conum\" data-value=\"4\"\u003e\u003c/i\u003e\u003cb\u003e(4)\u003c/b\u003e\n  \u003cspan style=\"color: #f92672\"\u003einternal\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e;\u003c/span\u003e\n  \u003cspan style=\"color: #f92672\"\u003eproxy_pass\u003c/span\u003e               \u003cspan style=\"color: #e6db74\"\u003ehttp://heimdall:4456\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e$request_uri\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e;\u003c/span\u003e \u003ci class=\"conum\" data-value=\"5\"\u003e\u003c/i\u003e\u003cb\u003e(5)\u003c/b\u003e\n  \u003cspan style=\"color: #f92672\"\u003eproxy_pass_request_body\u003c/span\u003e  \u003cspan style=\"color: #66d9ef\"\u003eoff\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e;\u003c/span\u003e  \u003ci class=\"conum\" data-value=\"6\"\u003e\u003c/i\u003e\u003cb\u003e(6)\u003c/b\u003e\n  \u003cspan style=\"color: #f92672\"\u003eproxy_set_header\u003c/span\u003e         \u003cspan style=\"color: #e6db74\"\u003eContent-Length\u003c/span\u003e   \u003cspan style=\"color: #e6db74\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e;\u003c/span\u003e\n  \u003cspan style=\"color: #f92672\"\u003eproxy_set_header\u003c/span\u003e         \u003cspan style=\"color: #e6db74\"\u003eX-Forwarded-Host\u003c/span\u003e \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e$http_host\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e;\u003c/span\u003e  \u003ci class=\"conum\" data-value=\"7\"\u003e\u003c/i\u003e\u003cb\u003e(7)\u003c/b\u003e\n  \u003cspan style=\"color: #f92672\"\u003eproxy_set_header\u003c/span\u003e         \u003cspan style=\"color: #e6db74\"\u003eX-Forwarded-For\u003c/span\u003e  \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e$remote_addr\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e;\u003c/span\u003e  \u003ci class=\"conum\" data-value=\"8\"\u003e\u003c/i\u003e\u003cb\u003e(8)\u003c/b\u003e\n\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"colist arabic\"\u003e\n\u003ctable\u003e\n\u003ctbody\u003e\u003ctr\u003e\n\u003ctd\u003e\u003ci class=\"conum\" data-value=\"1\"\u003e\u003c/i\u003e\u003cb\u003e1\u003c/b\u003e\u003c/td\u003e\n\u003ctd\u003eConfigures NGINX to forward every request to the internal \u003ccode\u003e/_auth\u003c/code\u003e endpoint (this is where the actual heimdall integration happens - see below).\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ci class=\"conum\" data-value=\"2\"\u003e\u003c/i\u003e\u003cb\u003e2\u003c/b\u003e\u003c/td\u003e\n\u003ctd\u003eWhen the response from heimdall returns, this and the next line set the Cookies set by heimdall in the response (whether you need this depends on your \u003ca href=\"/docs/configuration/rules/pipeline_mechanisms/contextualizers/\"\u003eContextualizers\u003c/a\u003e and \u003ca href=\"/docs/configuration/rules/pipeline_mechanisms/unifiers/\"\u003eUnifiers\u003c/a\u003e configuration)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ci class=\"conum\" data-value=\"3\"\u003e\u003c/i\u003e\u003cb\u003e3\u003c/b\u003e\u003c/td\u003e\n\u003ctd\u003eWhen the response from heimdall returns, this and the next line set the \u003ccode\u003eAuthorization\u003c/code\u003e header set by heimdall in the response (which header to set depends again on your \u003ca href=\"/docs/configuration/rules/pipeline_mechanisms/contextualizers/\"\u003eContextualizers\u003c/a\u003e and \u003ca href=\"/docs/configuration/rules/pipeline_mechanisms/unifiers/\"\u003eUnifiers\u003c/a\u003e configuration)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ci class=\"conum\" data-value=\"4\"\u003e\u003c/i\u003e\u003cb\u003e4\u003c/b\u003e\u003c/td\u003e\n\u003ctd\u003eThis is where the \u0026#34;magic\u0026#34; happens\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ci class=\"conum\" data-value=\"5\"\u003e\u003c/i\u003e\u003cb\u003e5\u003c/b\u003e\u003c/td\u003e\n\u003ctd\u003eConfigures NGINX to pass the request to heimdall and sets the request path and queries from the original request\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ci class=\"conum\" data-value=\"6\"\u003e\u003c/i\u003e\u003cb\u003e6\u003c/b\u003e\u003c/td\u003e\n\u003ctd\u003eDisables sending of the request body. If your heimdall rules make use of the body, you should set this to \u003ccode\u003eon\u003c/code\u003e and remove the next line.\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ci class=\"conum\" data-value=\"7\"\u003e\u003c/i\u003e\u003cb\u003e7\u003c/b\u003e\u003c/td\u003e\n\u003ctd\u003eThis is where you forward the host information to heimdall\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ci class=\"conum\" data-value=\"8\"\u003e\u003c/i\u003e\u003cb\u003e8\u003c/b\u003e\u003c/td\u003e\n\u003ctd\u003eNot really required, but makes the remote address available to heimdall and thus to the mechanisms used in by the rules. Requires \u003ccode\u003etrusted_proxies\u003c/code\u003e to be configured.\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect1\"\u003e\n\u003ch2 id=\"_second_option\"\u003eForward all information in \u003ccode\u003eX-Forwarded-*\u003c/code\u003e headers\u003c/h2\u003e\n\u003cdiv class=\"sectionbody\"\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eWith this method you set the \u003ccode\u003eX-Forwarded-Method\u003c/code\u003e, \u003ccode\u003eX-Forwarded-Proto\u003c/code\u003e, \u003ccode\u003eX-Forwarded-Host\u003c/code\u003e and \u003ccode\u003eX-Forwarded-Path\u003c/code\u003e to let heimdall know the host, respectively domain url and the used HTTP method.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eCompared to the \u003ca href=\"#_first_option\"\u003eprevious integration\u003c/a\u003e option, the configuration only differs in the definition of the internal \u003ccode\u003e/_auth\u003c/code\u003e endpoint. So, the example configuration is limited to that part only.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"exampleblock\"\u003e\n\u003cdiv class=\"title\"\u003eExample 2. Possible Configuration\u003c/div\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"nginx\"\u003e\u003cspan style=\"color: #75715e\"\u003e# nginx.conf\u003c/span\u003e\n\u003cspan style=\"color: #f92672\"\u003e...\u003c/span\u003e\n\n\u003cspan style=\"color: #e6db74\"\u003elocation\u003c/span\u003e \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e=\u003c/span\u003e \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e/_auth\u003c/span\u003e \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e{\u003c/span\u003e\n  \u003cspan style=\"color: #f92672\"\u003einternal\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e;\u003c/span\u003e\n  \u003cspan style=\"color: #f92672\"\u003eproxy_pass\u003c/span\u003e               \u003cspan style=\"color: #e6db74\"\u003ehttp://heimdall:4456\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e;\u003c/span\u003e  \u003ci class=\"conum\" data-value=\"1\"\u003e\u003c/i\u003e\u003cb\u003e(1)\u003c/b\u003e\n  \u003cspan style=\"color: #f92672\"\u003eproxy_pass_request_body\u003c/span\u003e  \u003cspan style=\"color: #66d9ef\"\u003eoff\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e;\u003c/span\u003e\n  \u003cspan style=\"color: #f92672\"\u003eproxy_set_header\u003c/span\u003e         \u003cspan style=\"color: #e6db74\"\u003eContent-Length\u003c/span\u003e         \u003cspan style=\"color: #e6db74\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e;\u003c/span\u003e\n  \u003cspan style=\"color: #f92672\"\u003eproxy_set_header\u003c/span\u003e         \u003cspan style=\"color: #e6db74\"\u003eX-Forwarded-Method\u003c/span\u003e     \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e$request_method\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e;\u003c/span\u003e  \u003ci class=\"conum\" data-value=\"2\"\u003e\u003c/i\u003e\u003cb\u003e(2)\u003c/b\u003e\n  \u003cspan style=\"color: #f92672\"\u003eproxy_set_header\u003c/span\u003e         \u003cspan style=\"color: #e6db74\"\u003eX-Forwarded-Proto\u003c/span\u003e      \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e$scheme\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e;\u003c/span\u003e  \u003ci class=\"conum\" data-value=\"3\"\u003e\u003c/i\u003e\u003cb\u003e(3)\u003c/b\u003e\n  \u003cspan style=\"color: #f92672\"\u003eproxy_set_header\u003c/span\u003e         \u003cspan style=\"color: #e6db74\"\u003eX-Forwarded-Host\u003c/span\u003e       \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e$http_host\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e;\u003c/span\u003e  \u003ci class=\"conum\" data-value=\"4\"\u003e\u003c/i\u003e\u003cb\u003e(4)\u003c/b\u003e\n  \u003cspan style=\"color: #f92672\"\u003eproxy_set_header\u003c/span\u003e         \u003cspan style=\"color: #e6db74\"\u003eX-Forwarded-Path\u003c/span\u003e       \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e$request_uri\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e;\u003c/span\u003e  \u003ci class=\"conum\" data-value=\"5\"\u003e\u003c/i\u003e\u003cb\u003e(5)\u003c/b\u003e\n  \u003cspan style=\"color: #f92672\"\u003eproxy_set_header\u003c/span\u003e         \u003cspan style=\"color: #e6db74\"\u003eX-Forwarded-For\u003c/span\u003e        \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e$remote_addr\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e;\u003c/span\u003e\n\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"colist arabic\"\u003e\n\u003ctable\u003e\n\u003ctbody\u003e\u003ctr\u003e\n\u003ctd\u003e\u003ci class=\"conum\" data-value=\"1\"\u003e\u003c/i\u003e\u003cb\u003e1\u003c/b\u003e\u003c/td\u003e\n\u003ctd\u003eConfigures NGINX to pass the request to heimdall.\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ci class=\"conum\" data-value=\"2\"\u003e\u003c/i\u003e\u003cb\u003e2\u003c/b\u003e\u003c/td\u003e\n\u003ctd\u003eLet NGINX forward the used HTTP method to heimdall.\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ci class=\"conum\" data-value=\"3\"\u003e\u003c/i\u003e\u003cb\u003e3\u003c/b\u003e\u003c/td\u003e\n\u003ctd\u003eLet NGINX forward the used HTTP schema to heimdall.\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ci class=\"conum\" data-value=\"4\"\u003e\u003c/i\u003e\u003cb\u003e4\u003c/b\u003e\u003c/td\u003e\n\u003ctd\u003eLet NGINX forward the used host to heimdall.\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ci class=\"conum\" data-value=\"5\"\u003e\u003c/i\u003e\u003cb\u003e5\u003c/b\u003e\u003c/td\u003e\n\u003ctd\u003eLet NGINX forward the used path and query parameter to heimdall.\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect1\"\u003e\n\u003ch2 id=\"_third_option\"\u003eForward all information in \u003ccode\u003eX-Forwarded-Uri\u003c/code\u003e and \u003ccode\u003eX-Forwarded-Method\u003c/code\u003e headers\u003c/h2\u003e\n\u003cdiv class=\"sectionbody\"\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThis method is a simplified alternative to the \u003ca href=\"#_second_option\"\u003eprevious\u003c/a\u003e one in which heimdall receives everything required to know the host url and the HTTP method in HTTP headers.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThe difference is again in the definition of the internal \u003ccode\u003e/_auth\u003c/code\u003e endpoint. So, the example configuration is limited to that part.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"exampleblock\"\u003e\n\u003cdiv class=\"title\"\u003eExample 3. Possible Configuration\u003c/div\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"nginx\"\u003e\u003cspan style=\"color: #75715e\"\u003e# nginx.conf\u003c/span\u003e\n\u003cspan style=\"color: #f92672\"\u003e...\u003c/span\u003e\n\n\u003cspan style=\"color: #e6db74\"\u003elocation\u003c/span\u003e \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e=\u003c/span\u003e \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e/_auth\u003c/span\u003e \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e{\u003c/span\u003e\n  \u003cspan style=\"color: #f92672\"\u003einternal\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e;\u003c/span\u003e\n  \u003cspan style=\"color: #f92672\"\u003eproxy_pass\u003c/span\u003e               \u003cspan style=\"color: #e6db74\"\u003ehttp://heimdall:4456\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e;\u003c/span\u003e  \u003ci class=\"conum\" data-value=\"1\"\u003e\u003c/i\u003e\u003cb\u003e(1)\u003c/b\u003e\n  \u003cspan style=\"color: #f92672\"\u003eproxy_pass_request_body\u003c/span\u003e  \u003cspan style=\"color: #66d9ef\"\u003eoff\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e;\u003c/span\u003e\n  \u003cspan style=\"color: #f92672\"\u003eproxy_set_header\u003c/span\u003e         \u003cspan style=\"color: #e6db74\"\u003eContent-Length\u003c/span\u003e         \u003cspan style=\"color: #e6db74\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e;\u003c/span\u003e\n  \u003cspan style=\"color: #f92672\"\u003eproxy_set_header\u003c/span\u003e         \u003cspan style=\"color: #e6db74\"\u003eX-Forwarded-Method\u003c/span\u003e     \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e$request_method\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e;\u003c/span\u003e  \u003ci class=\"conum\" data-value=\"2\"\u003e\u003c/i\u003e\u003cb\u003e(2)\u003c/b\u003e\n  \u003cspan style=\"color: #f92672\"\u003eproxy_set_header\u003c/span\u003e         \u003cspan style=\"color: #e6db74\"\u003eX-Forwarded-Uri\u003c/span\u003e        \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e$scheme\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e//\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e$http_host$request_uri\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e;\u003c/span\u003e  \u003ci class=\"conum\" data-value=\"3\"\u003e\u003c/i\u003e\u003cb\u003e(3)\u003c/b\u003e\n  \u003cspan style=\"color: #f92672\"\u003eproxy_set_header\u003c/span\u003e         \u003cspan style=\"color: #e6db74\"\u003eX-Forwarded-For\u003c/span\u003e        \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e$remote_addr\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e;\u003c/span\u003e\n\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"colist arabic\"\u003e\n\u003ctable\u003e\n\u003ctbody\u003e\u003ctr\u003e\n\u003ctd\u003e\u003ci class=\"conum\" data-value=\"1\"\u003e\u003c/i\u003e\u003cb\u003e1\u003c/b\u003e\u003c/td\u003e\n\u003ctd\u003eConfigures NGINX to pass the request to heimdall.\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ci class=\"conum\" data-value=\"2\"\u003e\u003c/i\u003e\u003cb\u003e2\u003c/b\u003e\u003c/td\u003e\n\u003ctd\u003eLet NGINX forward the used HTTP method to heimdall.\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ci class=\"conum\" data-value=\"3\"\u003e\u003c/i\u003e\u003cb\u003e3\u003c/b\u003e\u003c/td\u003e\n\u003ctd\u003eLet NGINX forward the entire used HTTP URL to heimdall.\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect1\"\u003e\n\u003ch2 id=\"_integration_with_nginx_ingress_controller\"\u003eIntegration with NGINX Ingress Controller.\u003c/h2\u003e\n\u003cdiv class=\"sectionbody\"\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThe integration option, described in the \u003ca href=\"#_second_option\"\u003eForward all information in \u003ccode\u003eX-Forwarded-*\u003c/code\u003e headers\u003c/a\u003e section corresponds more or less to the way how the \u003ccode\u003engnix.conf\u003c/code\u003e file is generated by the \u003ca href=\"https://github.com/kubernetes/ingress-nginx/blob/3c8817f700a4ab1713e3369fc6e5f500b008d989/rootfs/etc/nginx/template/nginx.tmpl#L977\"\u003edefault nginx-ingress template\u003c/a\u003e used by the \u003ca href=\"https://kubernetes.github.io/ingress-nginx/\"\u003eNGINX Ingress Controller\u003c/a\u003e. The only missing parts are the request path and the query parameter. So you can easily integrate heimdall by adding the following annotations to your ingress configuration.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"exampleblock\"\u003e\n\u003cdiv class=\"title\"\u003eExample 4. Possible Configuration\u003c/div\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"yaml\"\u003e\u003cspan style=\"color: #a6e22e\"\u003enginx.ingress.kubernetes.io/auth-url\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003ehttp://\u0026lt;heimdall\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003eservice\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003ename\u0026gt;.\u0026lt;namespace\u0026gt;.svc.cluster.local:\u0026lt;decision\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003eport\u0026gt;/$request_uri\u0026#34;\u003c/span\u003e \u003ci class=\"conum\" data-value=\"1\"\u003e\u003c/i\u003e\u003cb\u003e(1)\u003c/b\u003e\n\u003cspan style=\"color: #a6e22e\"\u003enginx.ingress.kubernetes.io/auth-response-headers\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eAuthorization\u003c/span\u003e \u003ci class=\"conum\" data-value=\"2\"\u003e\u003c/i\u003e\u003cb\u003e(2)\u003c/b\u003e\n    \u003cspan style=\"color: #e6db74\"\u003e# other annotations required\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"colist arabic\"\u003e\n\u003ctable\u003e\n\u003ctbody\u003e\u003ctr\u003e\n\u003ctd\u003e\u003ci class=\"conum\" data-value=\"1\"\u003e\u003c/i\u003e\u003cb\u003e1\u003c/b\u003e\u003c/td\u003e\n\u003ctd\u003eConfigures the controller to pass the request path and query parameters to heimdall’s decision service endpoint with \u003ccode\u003e\u0026lt;heimdall service name\u0026gt;\u003c/code\u003e, \u003ccode\u003e\u0026lt;namespace\u0026gt;\u003c/code\u003e and \u003ccode\u003e\u0026lt;decision port\u0026gt;\u003c/code\u003e depending on your configuration.\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ci class=\"conum\" data-value=\"2\"\u003e\u003c/i\u003e\u003cb\u003e2\u003c/b\u003e\u003c/td\u003e\n\u003ctd\u003eLet NGINX forward the \u003ccode\u003eAuthorization\u003c/code\u003e header set by heimdall to the upstream service. This configuration depends on\nyour \u003ca href=\"/docs/configuration/rules/pipeline_mechanisms/contextualizers/\"\u003eContextualizers\u003c/a\u003e and \u003ca href=\"/docs/configuration/rules/pipeline_mechanisms/unifiers/\"\u003eUnifiers\u003c/a\u003e configuration\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eCheckout the Kubernetes quickstarts on \u003ca href=\"https://github.com/dadrus/heimdall/tree/main/examples/kubernetes/quickstarts\"\u003eGitHub\u003c/a\u003e for a working demo.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n","sections":["Guides"],"tags":null,"title":"NGINX Integration","url":"/docs/guides/nginx/"},{"categories":null,"content":" Envoy is a high performance distributed proxy designed for single services and applications, as well as a communication bus and “universal data plane” designed for large microservice “service mesh” architectures. When operating heimdall in Decision Operation Mode, integration with Envoy can be achieved by making use of an External Authorization filter. In such setup, Envoy delegates authentication and authorization to heimdall. If heimdall answers with a 200 OK HTTP code, Envoy grants access and forwards the original request to the upstream service. Otherwise, the response from heimdall is treated as an error and is returned to the client.\nTo achieve this, configure Envoy\nto have heimdall instances referenced in a cluster\nFollowing snippet provides an example on how to create a cluster instance referencing heimdall. It assumes, you have just one heimdall instance deployed, which is also available via heimdall DNS name.\nclusters: # other cluster entries - name: ext-authz type: strict_dns load_assignment: cluster_name: ext-authz endpoints: - lb_endpoints: - endpoint: address: socket_address: address: heimdall port_value: 4456 # other cluster entries to include an External Authorization HTTP filter in the definition of the HTTP connection manager, as well as to let that filter contain the required header name(s), heimdall sets in the HTTP responses (depends on your Contextualizers and Unifiers configuration).\nThe following snipped shows, how an External Authorization can be defined to let Envoy communicating with heimdall by making use of the previously defined cluster (see snippet from above) as well as forwarding all request headers to heimdall and to let it forward headers, set by heimdall in its responses (here the Authorization header) to the upstream services.\nhttp_filters: # other http filter - name: envoy.filters.http.ext_authz typed_config: \u0026#34;@type\u0026#34;: type.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthz transport_api_version: V3 http_service: server_uri: uri: heimdall:4456 cluster: ext-authz timeout: 0.25s authorization_request: allowed_headers: patterns: - safe_regex: google_re2: {} regex: \u0026#34;.*\u0026#34; authorization_response: allowed_upstream_headers: patterns: - exact: authorization # other http filter Envoy does not set X-Forwarded-* headers, as long as the envoy.filters.http.dynamic_forward_proxy is not configured. That means, matching of URLs happens based on those URLs, used by Envoy while communicating with heimdall. That means your rules should ignore the scheme and host parts, respectively use the values specific for heimdall and not of the domain. Demo Setup The Envoy configuration file shown below can be used to create a fully working setup based on the Decision Service Quickstart. Just update the docker-compose.yaml file used in that guide and replace the entry for proxy service, with the one shown below. You can also remove all labels configurations, as these will have no effect.\n# docker-compose.yaml services: proxy: image: envoyproxy/envoy:v1.24.1 volumes: - ./envoy.yaml:/envoy.yaml:ro ports: - 9090:9090 command: -c /envoy.yaml # other services from the guide # envoy.yaml static_resources: listeners: - name: listener_0 address: socket_address: address: 0.0.0.0 port_value: 9090 filter_chains: - filters: - name: envoy.filters.network.http_connection_manager typed_config: \u0026#34;@type\u0026#34;: type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager stat_prefix: edge http_filters: - name: envoy.filters.http.ext_authz typed_config: \u0026#34;@type\u0026#34;: type.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthz transport_api_version: V3 http_service: server_uri: uri: heimdall:4456 cluster: ext-authz timeout: 0.25s authorization_request: allowed_headers: patterns: - safe_regex: google_re2: {} regex: \u0026#34;.*\u0026#34; authorization_response: allowed_upstream_headers: patterns: - exact: authorization - name: envoy.filters.http.router typed_config: \u0026#34;@type\u0026#34;: type.googleapis.com/envoy.extensions.filters.http.router.v3.Router route_config: virtual_hosts: - name: direct_response_service domains: [\u0026#34;*\u0026#34;] routes: - match: prefix: \u0026#34;/\u0026#34; route: cluster: services clusters: - name: ext-authz type: strict_dns load_assignment: cluster_name: ext-authz endpoints: - lb_endpoints: - endpoint: address: socket_address: address: heimdall port_value: 4456 - name: services connect_timeout: 5s type: strict_dns dns_lookup_family: V4_ONLY load_assignment: cluster_name: services endpoints: - lb_endpoints: - endpoint: address: socket_address: address: upstream port_value: 80 After starting the docker compose environment, you can run the curl commands shown in the referenced guide. This time however against envoy by using port 9090. E.g. $ curl -v 127.0.0.1:9090/anonymous. By the way, this setup is also available on GitHub.\n","description":"","html_content":"\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003e\u003ca href=\"https://www.envoyproxy.io/\"\u003eEnvoy\u003c/a\u003e is a high performance distributed proxy designed for single services and applications, as well as a communication bus and “universal data plane” designed for large microservice “service mesh” architectures. When operating heimdall in \u003ca href=\"/docs/getting_started/concepts/#_decision_mode\"\u003eDecision Operation Mode\u003c/a\u003e, integration with Envoy can be achieved by making use of an \u003ca href=\"https://www.envoyproxy.io/docs/envoy/latest/api-v3/extensions/filters/http/ext_authz/v3/ext_authz.proto.html?highlight=allowed_upstream_headers\"\u003eExternal Authorization\u003c/a\u003e filter. In such setup, Envoy delegates authentication and authorization to heimdall. If heimdall answers with a \u003ccode\u003e200 OK\u003c/code\u003e HTTP code, Envoy grants access and forwards the original request to the upstream service. Otherwise, the response from heimdall is treated as an error and is returned to the client.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eTo achieve this, configure Envoy\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"ulist\"\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eto have heimdall instances referenced in a \u003ccode\u003ecluster\u003c/code\u003e\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eFollowing snippet provides an example on how to create a \u003ccode\u003ecluster\u003c/code\u003e instance referencing heimdall. It assumes, you have just one heimdall instance deployed, which is also available via \u003ccode\u003eheimdall\u003c/code\u003e DNS name.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"yaml\"\u003e\u003cspan style=\"color: #a6e22e\"\u003eclusters\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n  \u003cspan style=\"color: #75715e\"\u003e# other cluster entries\u003c/span\u003e\n  \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003ename\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eext-authz\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003etype\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003estrict_dns\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003eload_assignment\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003ecluster_name\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eext-authz\u003c/span\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003eendpoints\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n        \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003elb_endpoints\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n            \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003eendpoint\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n                \u003cspan style=\"color: #a6e22e\"\u003eaddress\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n                  \u003cspan style=\"color: #a6e22e\"\u003esocket_address\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n                    \u003cspan style=\"color: #a6e22e\"\u003eaddress\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eheimdall\u003c/span\u003e\n                    \u003cspan style=\"color: #a6e22e\"\u003eport_value\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #ae81ff\"\u003e4456\u003c/span\u003e\n  \u003cspan style=\"color: #75715e\"\u003e# other cluster entries\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eto include an \u003ca href=\"https://www.envoyproxy.io/docs/envoy/latest/api-v3/extensions/filters/http/ext_authz/v3/ext_authz.proto.html?highlight=allowed_upstream_headers\"\u003eExternal Authorization\u003c/a\u003e HTTP filter in the definition of the HTTP connection manager, as well as to let that filter contain the required header name(s), heimdall sets in the HTTP responses (depends on your \u003ca href=\"/docs/configuration/rules/pipeline_mechanisms/contextualizers/\"\u003eContextualizers\u003c/a\u003e and \u003ca href=\"/docs/configuration/rules/pipeline_mechanisms/unifiers/\"\u003eUnifiers\u003c/a\u003e configuration).\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThe following snipped shows, how an \u003ca href=\"https://www.envoyproxy.io/docs/envoy/latest/api-v3/extensions/filters/http/ext_authz/v3/ext_authz.proto.html?highlight=allowed_upstream_headers\"\u003eExternal Authorization\u003c/a\u003e can be defined to let Envoy communicating with heimdall by making use of the previously defined \u003ccode\u003ecluster\u003c/code\u003e (see snippet from above) as well as forwarding all request headers to heimdall and to let it forward headers, set by heimdall in its responses (here the \u003ccode\u003eAuthorization\u003c/code\u003e header) to the upstream services.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"yaml\"\u003e\u003cspan style=\"color: #a6e22e\"\u003ehttp_filters\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n  \u003cspan style=\"color: #75715e\"\u003e# other http filter\u003c/span\u003e\n  \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003ename\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eenvoy.filters.http.ext_authz\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003etyped_config\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n      \u003cspan style=\"color: #e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e@type\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #960050\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003etype.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthz\u003c/span\u003e\n      \u003cspan style=\"color: #e6db74\"\u003etransport_api_version\u003c/span\u003e\u003cspan style=\"color: #960050\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eV3\u003c/span\u003e\n      \u003cspan style=\"color: #e6db74\"\u003ehttp_service\u003c/span\u003e\u003cspan style=\"color: #960050\"\u003e:\u003c/span\u003e\n        \u003cspan style=\"color: #a6e22e\"\u003eserver_uri\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n          \u003cspan style=\"color: #a6e22e\"\u003euri\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eheimdall:4456\u003c/span\u003e\n          \u003cspan style=\"color: #a6e22e\"\u003ecluster\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eext-authz\u003c/span\u003e\n          \u003cspan style=\"color: #a6e22e\"\u003etimeout\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e0.25s\u003c/span\u003e\n        \u003cspan style=\"color: #a6e22e\"\u003eauthorization_request\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n          \u003cspan style=\"color: #a6e22e\"\u003eallowed_headers\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n            \u003cspan style=\"color: #a6e22e\"\u003epatterns\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n              \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003esafe_regex\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n                  \u003cspan style=\"color: #a6e22e\"\u003egoogle_re2\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e{}\u003c/span\u003e\n                  \u003cspan style=\"color: #a6e22e\"\u003eregex\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e.*\u0026#34;\u003c/span\u003e\n        \u003cspan style=\"color: #a6e22e\"\u003eauthorization_response\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n          \u003cspan style=\"color: #a6e22e\"\u003eallowed_upstream_headers\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n            \u003cspan style=\"color: #a6e22e\"\u003epatterns\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n              \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003eexact\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eauthorization\u003c/span\u003e\n  \u003cspan style=\"color: #75715e\"\u003e# other http filter\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\u003cdiv class=\"admonitionblock note\"\u003e\n\u003ctable\u003e\n\u003ctbody\u003e\u003ctr\u003e\n\u003ctd class=\"icon\"\u003e\n\u003ci class=\"fa icon-note\" title=\"Note\"\u003e\u003c/i\u003e\n\u003c/td\u003e\n\u003ctd class=\"content\"\u003e\nEnvoy does not set \u003ccode\u003eX-Forwarded-*\u003c/code\u003e headers, as long as the \u003ccode\u003eenvoy.filters.http.dynamic_forward_proxy\u003c/code\u003e is not configured. That means, matching of URLs happens based on those URLs, used by Envoy while communicating with heimdall. That means your rules should ignore the scheme and host parts, respectively use the values specific for heimdall and not of the domain.\n\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect1\"\u003e\n\u003ch2 id=\"_demo_setup\"\u003eDemo Setup\u003c/h2\u003e\n\u003cdiv class=\"sectionbody\"\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThe Envoy configuration file shown below can be used to create a fully working setup based on the \u003ca href=\"/docs/getting_started/decision_service_quickstart/\"\u003eDecision Service Quickstart\u003c/a\u003e. Just update the \u003ccode\u003edocker-compose.yaml\u003c/code\u003e file used in that guide and replace the entry for \u003ccode\u003eproxy\u003c/code\u003e service, with the one shown below. You can also remove all \u003ccode\u003elabels\u003c/code\u003e configurations, as these will have no effect.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"yaml\"\u003e\u003cspan style=\"color: #75715e\"\u003e# docker-compose.yaml\u003c/span\u003e\n\n\u003cspan style=\"color: #a6e22e\"\u003eservices\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003eproxy\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003eimage\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eenvoyproxy/envoy:v1.24.1\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003evolumes\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n      \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e./envoy.yaml:/envoy.yaml:ro\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003eports\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n      \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e9090:9090\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003ecommand\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e-c /envoy.yaml\u003c/span\u003e\n\n  \u003cspan style=\"color: #75715e\"\u003e# other services from the guide\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"yaml\"\u003e\u003cspan style=\"color: #75715e\"\u003e# envoy.yaml\u003c/span\u003e\n\n\u003cspan style=\"color: #a6e22e\"\u003estatic_resources\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003elisteners\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n    \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003ename\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003elistener_0\u003c/span\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003eaddress\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n        \u003cspan style=\"color: #a6e22e\"\u003esocket_address\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n          \u003cspan style=\"color: #a6e22e\"\u003eaddress\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e0.0.0.0\u003c/span\u003e\n          \u003cspan style=\"color: #a6e22e\"\u003eport_value\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #ae81ff\"\u003e9090\u003c/span\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003efilter_chains\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n        \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003efilters\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n          \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003ename\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eenvoy.filters.network.http_connection_manager\u003c/span\u003e\n            \u003cspan style=\"color: #a6e22e\"\u003etyped_config\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n              \u003cspan style=\"color: #e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e@type\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #960050\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003etype.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager\u003c/span\u003e\n              \u003cspan style=\"color: #e6db74\"\u003estat_prefix\u003c/span\u003e\u003cspan style=\"color: #960050\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eedge\u003c/span\u003e\n              \u003cspan style=\"color: #e6db74\"\u003ehttp_filters\u003c/span\u003e\u003cspan style=\"color: #960050\"\u003e:\u003c/span\u003e\n                \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003ename\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eenvoy.filters.http.ext_authz\u003c/span\u003e\n                  \u003cspan style=\"color: #a6e22e\"\u003etyped_config\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n                    \u003cspan style=\"color: #e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e@type\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #960050\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003etype.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthz\u003c/span\u003e\n                    \u003cspan style=\"color: #e6db74\"\u003etransport_api_version\u003c/span\u003e\u003cspan style=\"color: #960050\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eV3\u003c/span\u003e\n                    \u003cspan style=\"color: #e6db74\"\u003ehttp_service\u003c/span\u003e\u003cspan style=\"color: #960050\"\u003e:\u003c/span\u003e\n                      \u003cspan style=\"color: #a6e22e\"\u003eserver_uri\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n                        \u003cspan style=\"color: #a6e22e\"\u003euri\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eheimdall:4456\u003c/span\u003e\n                        \u003cspan style=\"color: #a6e22e\"\u003ecluster\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eext-authz\u003c/span\u003e\n                        \u003cspan style=\"color: #a6e22e\"\u003etimeout\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e0.25s\u003c/span\u003e\n                      \u003cspan style=\"color: #a6e22e\"\u003eauthorization_request\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n                        \u003cspan style=\"color: #a6e22e\"\u003eallowed_headers\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n                          \u003cspan style=\"color: #a6e22e\"\u003epatterns\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n                            \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003esafe_regex\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n                                \u003cspan style=\"color: #a6e22e\"\u003egoogle_re2\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e{}\u003c/span\u003e\n                                \u003cspan style=\"color: #a6e22e\"\u003eregex\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e.*\u0026#34;\u003c/span\u003e\n                      \u003cspan style=\"color: #a6e22e\"\u003eauthorization_response\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n                        \u003cspan style=\"color: #a6e22e\"\u003eallowed_upstream_headers\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n                          \u003cspan style=\"color: #a6e22e\"\u003epatterns\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n                            \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003eexact\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eauthorization\u003c/span\u003e\n                \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003ename\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eenvoy.filters.http.router\u003c/span\u003e\n                  \u003cspan style=\"color: #a6e22e\"\u003etyped_config\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n                    \u003cspan style=\"color: #e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e@type\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #960050\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003etype.googleapis.com/envoy.extensions.filters.http.router.v3.Router\u003c/span\u003e\n              \u003cspan style=\"color: #a6e22e\"\u003eroute_config\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n                \u003cspan style=\"color: #a6e22e\"\u003evirtual_hosts\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n                  \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003ename\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003edirect_response_service\u003c/span\u003e\n                    \u003cspan style=\"color: #a6e22e\"\u003edomains\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e[\u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e*\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e]\u003c/span\u003e\n                    \u003cspan style=\"color: #a6e22e\"\u003eroutes\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n                      \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003ematch\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n                          \u003cspan style=\"color: #a6e22e\"\u003eprefix\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e/\u0026#34;\u003c/span\u003e\n                        \u003cspan style=\"color: #a6e22e\"\u003eroute\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n                          \u003cspan style=\"color: #a6e22e\"\u003ecluster\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eservices\u003c/span\u003e\n\n  \u003cspan style=\"color: #a6e22e\"\u003eclusters\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n    \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003ename\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eext-authz\u003c/span\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003etype\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003estrict_dns\u003c/span\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003eload_assignment\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n        \u003cspan style=\"color: #a6e22e\"\u003ecluster_name\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eext-authz\u003c/span\u003e\n        \u003cspan style=\"color: #a6e22e\"\u003eendpoints\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n          \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003elb_endpoints\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n              \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003eendpoint\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n                  \u003cspan style=\"color: #a6e22e\"\u003eaddress\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n                    \u003cspan style=\"color: #a6e22e\"\u003esocket_address\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n                      \u003cspan style=\"color: #a6e22e\"\u003eaddress\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eheimdall\u003c/span\u003e\n                      \u003cspan style=\"color: #a6e22e\"\u003eport_value\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #ae81ff\"\u003e4456\u003c/span\u003e\n    \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003ename\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eservices\u003c/span\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003econnect_timeout\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e5s\u003c/span\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003etype\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003estrict_dns\u003c/span\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003edns_lookup_family\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eV4_ONLY\u003c/span\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003eload_assignment\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n        \u003cspan style=\"color: #a6e22e\"\u003ecluster_name\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eservices\u003c/span\u003e\n        \u003cspan style=\"color: #a6e22e\"\u003eendpoints\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n          \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003elb_endpoints\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n              \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003eendpoint\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n                  \u003cspan style=\"color: #a6e22e\"\u003eaddress\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n                    \u003cspan style=\"color: #a6e22e\"\u003esocket_address\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n                      \u003cspan style=\"color: #a6e22e\"\u003eaddress\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eupstream\u003c/span\u003e\n                      \u003cspan style=\"color: #a6e22e\"\u003eport_value\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e80\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eAfter starting the docker compose environment, you can run the curl commands shown in the referenced guide. This time however against envoy by using port 9090. E.g. \u003ccode\u003e$ curl -v 127.0.0.1:9090/anonymous\u003c/code\u003e. By the way, this setup is also available on \u003ca href=\"https://github.com/dadrus/heimdall/tree/main/examples/docker-compose/quickstarts\"\u003eGitHub\u003c/a\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n","sections":["Guides"],"tags":null,"title":"Envoy Integration","url":"/docs/guides/envoy/"},{"categories":null,"content":" Open Policy Agent, or OPA, is an open source, general purpose policy engine, which decouples authorization, respectively policy decisions from other responsibilities of an application and can be used to implement fine-grained access control for your application. As such it is a very good fit for integrating with heimdall. And indeed, the integration is very simple. It is just a matter of using a Remote Authorizer or a Generic Contextualizer. Which one is better for a particular use case depends on the specific application requirements. Here some examples demonstrating these and how it can be solved with heimdall:\nExample 1. Sharing Service Imagine you have a sharing service, e.g. to let friends share all their photos with each other and the API looks roughly as follows:\nGET /\u0026lt;user\u0026gt;/photos returns all the photos of the user either to the owner of the photo collection itself or to its friends.\nTo achieve this using OPA, we would need something like the following Rego policy:\npackage share_photos default allow = false # user is owner. that is, the value of first path # fragment is equal to the identified user allow { split(input.path, \u0026#34;/\u0026#34;)[1] == input.user } # user is friend. that is, the user referenced by the # first path fragment has the identified user in its friends list allow { data.friends[split(input.path, \u0026#34;/\u0026#34;)[1]][_] == input.user } It expects two pieces of information in the payload to the OPA instance:\nthe actual user, making the request and\nthe path to witch the request is made\nSo something like this: { \u0026#34;input\u0026#34;: { \u0026#34;user\u0026#34;: \u0026#34;alice\u0026#34;, \u0026#34;path\u0026#34;: \u0026#34;bob/photos\u0026#34; } }. Since the Rego policy defined above returns just true or false, the corresponding response from the OPA endpoint would be { \u0026#34;result\u0026#34;: true } or { \u0026#34;result\u0026#34;: false }. Given this and assuming the above policy can be used by making requests to https://opa.local/v1/data/share_photos/policy/allow, the configuration of the Remote Authorizer would look like follows:\nid: photos_access type: remote config: endpoint: url: https://opa.local/v1/data/share_photos/policy/allow payload: | { \u0026#34;input\u0026#34;: { \u0026#34;user\u0026#34;: {{ quote .Subject.ID }}, \u0026#34;path\u0026#34;: {{ quote .RequestURL.Path }} } } expressions: - expression: | Payload.result == true Here the entire authorization happens within heimdall and is completely outsourced from the business logic of our sharing service.\nExample 2. Membership Verification Imagine you have a billing service, which requires information about the membership of a user to different groups, which represent different subscription options for you entire offering. Depending on this information your service would create invoices with different amounts. The imaginary API of that service could look like follows:\nPOST /create_invoice to invoice the identified user.\nYou could perform the required query to OPA entirely in your service and use the retrieved group memberships then. Alternatively, you could outsource the communication to OPA to heimdall and deal only with the group membership information in your service. Compared to the Sharing Service example, this time heimdall would not perform any authorization, but rather enrich the subject information with further information. This way, we’re not going to use a Authorizer, but a Generic Contextualizer instead. As with Sharing Service example, there is a need for a Rego policy, which could look like this:\npackage invoice groups_graph[data.groups[subject].name] = edges { edges := data.groups[subject].member_of } member_of_groups[subject] = groups { groups_graph[subject] groups := graph.reachable(groups_graph, {subject}) } groups { member_of_groups[input.user][_] } It expects just one piece of information, namely the actual user, making the request. So something like this: { \u0026#34;input\u0026#34;: { \u0026#34;user\u0026#34;: \u0026#34;alice\u0026#34; } }. Since the Rego policy defined above returns a list of groups, the corresponding response from the OPA endpoint would be { \u0026#34;result\u0026#34;: [\u0026#34;group1\u0026#34;, \u0026#34;group2\u0026#34;] }. Given this and assuming the above policy can be used by making requests to https://opa.local/v1/data/invoice/policy/groups and the authentication to that endpoint requires basic authentication, the configuration of the Generic Contextualizer would look like follows:\nid: billing_contextualizer type: generic config: endpoint: url: https://opa.local/v1/data/invoice/policy/groups auth: type: basic_auth config: user: MyOpaUser password: SuperSecretPassword payload: | { \u0026#34;input\u0026#34;: { \u0026#34;user\u0026#34;: {{ quote .Subject.ID }} } } Upon successful execution of the corresponding request, the response from the OPA endpoint will be stored in the Subject.Attributes[\u0026#34;billing_contextualizer\u0026#34;] field. That way, you can use that information in a Unifier to forward the group membership to the billing service API.\n","description":"","html_content":"\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003e\u003ca href=\"https://www.openpolicyagent.org/\"\u003eOpen Policy Agent\u003c/a\u003e, or OPA, is an open source, general purpose policy engine, which decouples authorization, respectively policy decisions from other responsibilities of an application and can be used to implement fine-grained access control for your application. As such it is a very good fit for integrating with heimdall. And indeed, the integration is very simple. It is just a matter of using a \u003ca href=\"/docs/configuration/rules/pipeline_mechanisms/authorizers/#_remote\"\u003eRemote Authorizer\u003c/a\u003e or a \u003ca href=\"/docs/configuration/rules/pipeline_mechanisms/contextualizers/#_generic\"\u003eGeneric Contextualizer\u003c/a\u003e. Which one is better for a particular use case depends on the specific application requirements. Here some examples demonstrating these and how it can be solved with heimdall:\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv id=\"_sharing_service_example\" class=\"exampleblock\"\u003e\n\u003cdiv class=\"title\"\u003eExample 1. Sharing Service\u003c/div\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eImagine you have a sharing service, e.g. to let friends share all their photos with each other and the API looks roughly as follows:\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"ulist\"\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003eGET /\u0026lt;user\u0026gt;/photos\u003c/code\u003e returns all the photos of the user either to the owner of the photo collection itself or to its friends.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eTo achieve this using OPA, we would need something like the following \u003ca href=\"https://www.openpolicyagent.org/docs/latest/policy-language/\"\u003eRego\u003c/a\u003e policy:\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"rego\"\u003e\u003cspan style=\"color: #f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003eshare_photos\u003c/span\u003e\n\n\u003cspan style=\"color: #f92672\"\u003edefault\u003c/span\u003e \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003eallow\u003c/span\u003e \u003cspan style=\"color: #f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color: #66d9ef\"\u003efalse\u003c/span\u003e\n\n\u003cspan style=\"color: #75715e\"\u003e# user is owner. that is, the value of first path\u003c/span\u003e\n\u003cspan style=\"color: #75715e\"\u003e# fragment is equal to the identified user\u003c/span\u003e\n\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003eallow\u003c/span\u003e \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e{\u003c/span\u003e \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003esplit\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e(\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003einput\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e.\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003epath\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e\u0026#34;/\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e)[\u003c/span\u003e\u003cspan style=\"color: #ae81ff\"\u003e1\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e]\u003c/span\u003e \u003cspan style=\"color: #f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003einput\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e.\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003euser\u003c/span\u003e \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e}\u003c/span\u003e\n\n\u003cspan style=\"color: #75715e\"\u003e# user is friend. that is, the user referenced by the\u003c/span\u003e\n\u003cspan style=\"color: #75715e\"\u003e# first path fragment has the identified user in its friends list\u003c/span\u003e\n\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003eallow\u003c/span\u003e \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e{\u003c/span\u003e \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003edata\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e.\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003efriends\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e[\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003esplit\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e(\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003einput\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e.\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003epath\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e\u0026#34;/\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e)[\u003c/span\u003e\u003cspan style=\"color: #ae81ff\"\u003e1\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e]][\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e_\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e]\u003c/span\u003e \u003cspan style=\"color: #f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003einput\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e.\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003euser\u003c/span\u003e \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eIt expects two pieces of information in the payload to the OPA instance:\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"ulist\"\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003ethe actual user, making the request and\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003ethe path to witch the request is made\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eSo something like this: \u003ccode\u003e{ \u0026#34;input\u0026#34;: { \u0026#34;user\u0026#34;: \u0026#34;alice\u0026#34;, \u0026#34;path\u0026#34;: \u0026#34;bob/photos\u0026#34; } }\u003c/code\u003e. Since the Rego policy defined above returns just \u003ccode\u003etrue\u003c/code\u003e or \u003ccode\u003efalse\u003c/code\u003e, the corresponding response from the OPA endpoint would be \u003ccode\u003e{ \u0026#34;result\u0026#34;: true }\u003c/code\u003e or \u003ccode\u003e{ \u0026#34;result\u0026#34;: false }\u003c/code\u003e. Given this and assuming the above policy can be used by making requests to \u003ccode\u003ehttps://opa.local/v1/data/share_photos/policy/allow\u003c/code\u003e, the configuration of the \u003ca href=\"/docs/configuration/rules/pipeline_mechanisms/authorizers/#_remote\"\u003eRemote Authorizer\u003c/a\u003e would look like follows:\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"yaml\"\u003e\u003cspan style=\"color: #a6e22e\"\u003eid\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ephotos_access\u003c/span\u003e\n\u003cspan style=\"color: #a6e22e\"\u003etype\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eremote\u003c/span\u003e\n\u003cspan style=\"color: #a6e22e\"\u003econfig\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003eendpoint\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003eurl\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ehttps://opa.local/v1/data/share_photos/policy/allow\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003epayload\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e|\u003c/span\u003e\n    \u003cspan style=\"color: #e6db74\"\u003e{ \u0026#34;input\u0026#34;: { \u0026#34;user\u0026#34;: {{ quote .Subject.ID }}, \u0026#34;path\u0026#34;: {{ quote .RequestURL.Path }} } }\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003eexpressions\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n  \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003eexpression\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e|\u003c/span\u003e\n      \u003cspan style=\"color: #e6db74\"\u003ePayload.result == true\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eHere the entire authorization happens within heimdall and is completely outsourced from the business logic of our sharing service.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"exampleblock\"\u003e\n\u003cdiv class=\"title\"\u003eExample 2. Membership Verification\u003c/div\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eImagine you have a billing service, which requires information about the membership of a user to different groups, which represent different subscription options for you entire offering. Depending on this information your service would create invoices with different amounts. The imaginary API of that service could look like follows:\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"ulist\"\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003ePOST /create_invoice\u003c/code\u003e to invoice the identified user.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eYou could perform the required query to OPA entirely in your service and use the retrieved group memberships then. Alternatively, you could outsource the communication to OPA to heimdall and deal only with the group membership information in your service. Compared to the \u003ca href=\"#_sharing_service_example\"\u003eSharing Service\u003c/a\u003e example, this time heimdall would not perform any authorization, but rather enrich the subject information with further information. This way, we’re not going to use a \u003ca href=\"/docs/configuration/rules/pipeline_mechanisms/authorizers/\"\u003eAuthorizer\u003c/a\u003e, but a \u003ca href=\"/docs/configuration/rules/pipeline_mechanisms/contextualizers/#_generic\"\u003eGeneric Contextualizer\u003c/a\u003e instead. As with \u003ca href=\"#_sharing_service_example\"\u003eSharing Service\u003c/a\u003e example, there is a need for a \u003ca href=\"https://www.openpolicyagent.org/docs/latest/policy-language/\"\u003eRego\u003c/a\u003e policy, which could look like this:\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"rego\"\u003e\u003cspan style=\"color: #f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003einvoice\u003c/span\u003e\n\n\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003egroups_graph\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e[\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003edata\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e.\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003egroups\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e[\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003esubject\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e].\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003ename\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e]\u003c/span\u003e \u003cspan style=\"color: #f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003eedges\u003c/span\u003e \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e{\u003c/span\u003e\n  \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003eedges\u003c/span\u003e \u003cspan style=\"color: #f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003edata\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e.\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003egroups\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e[\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003esubject\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e].\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003emember_of\u003c/span\u003e\n\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e}\u003c/span\u003e\n\n\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003emember_of_groups\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e[\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003esubject\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e]\u003c/span\u003e \u003cspan style=\"color: #f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003egroups\u003c/span\u003e \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e{\u003c/span\u003e\n  \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003egroups_graph\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e[\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003esubject\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e]\u003c/span\u003e\n  \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003egroups\u003c/span\u003e \u003cspan style=\"color: #f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003egraph\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e.\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003ereachable\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e(\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003egroups_graph\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e{\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003esubject\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e})\u003c/span\u003e\n\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e}\u003c/span\u003e\n\n\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003egroups\u003c/span\u003e \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e{\u003c/span\u003e\n  \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003emember_of_groups\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e[\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003einput\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e.\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003euser\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e][\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e_\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e]\u003c/span\u003e\n\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eIt expects just one piece of information, namely the actual user, making the request. So something like this: \u003ccode\u003e{ \u0026#34;input\u0026#34;: { \u0026#34;user\u0026#34;: \u0026#34;alice\u0026#34; } }\u003c/code\u003e. Since the Rego policy defined above returns a list of groups, the corresponding response from the OPA endpoint would be \u003ccode\u003e{ \u0026#34;result\u0026#34;: [\u0026#34;group1\u0026#34;, \u0026#34;group2\u0026#34;] }\u003c/code\u003e. Given this and assuming the above policy can be used by making requests to \u003ccode\u003ehttps://opa.local/v1/data/invoice/policy/groups\u003c/code\u003e and the authentication to that endpoint requires basic authentication, the configuration of the \u003ca href=\"/docs/configuration/rules/pipeline_mechanisms/contextualizers/#_generic\"\u003eGeneric Contextualizer\u003c/a\u003e would look like follows:\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"yaml\"\u003e\u003cspan style=\"color: #a6e22e\"\u003eid\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ebilling_contextualizer\u003c/span\u003e\n\u003cspan style=\"color: #a6e22e\"\u003etype\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003egeneric\u003c/span\u003e\n\u003cspan style=\"color: #a6e22e\"\u003econfig\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003eendpoint\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003eurl\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ehttps://opa.local/v1/data/invoice/policy/groups\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003eauth\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003etype\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ebasic_auth\u003c/span\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003econfig\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n        \u003cspan style=\"color: #a6e22e\"\u003euser\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eMyOpaUser\u003c/span\u003e\n        \u003cspan style=\"color: #a6e22e\"\u003epassword\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eSuperSecretPassword\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003epayload\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e|\u003c/span\u003e\n    \u003cspan style=\"color: #e6db74\"\u003e{ \u0026#34;input\u0026#34;: { \u0026#34;user\u0026#34;: {{ quote .Subject.ID }} } }\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eUpon successful execution of the corresponding request, the response from the OPA endpoint will be stored in the \u003ccode\u003eSubject.Attributes[\u0026#34;billing_contextualizer\u0026#34;]\u003c/code\u003e field. That way, you can use that information in a \u003ca href=\"/docs/configuration/rules/pipeline_mechanisms/unifiers/\"\u003eUnifier\u003c/a\u003e to forward the group membership to the billing service API.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n","sections":["Guides"],"tags":null,"title":"Integration with OPA","url":"/docs/guides/opa/"},{"categories":null,"content":" Decision is one of the operating modes supported by heimdall, used if you start heimdall with heimdall serve decision. By default, heimdall listens on 0.0.0.0:4456/ endpoint for incoming requests in this mode of operation and also configures useful default timeouts. No other options are configured. You can, and should however adjust the configuration for your needs.\nThis service exposes only the Decision service endpoint.\nConfiguration The configuration for the Decision service can be adjusted in the decision property, which lives in the serve property of heimdall’s configuration and supports the following properties.\nhost: string (optional)\nBy making use of this property, you can specify the TCP/IP address on which heimdall should listen for connections from client applications. The entry 0.0.0.0 allows listening for all IPv4 addresses. 0.0.0.0 is also the default setting.\nExample 1. Configure heimdall to allow only local TCP/IP “loopback” connections to be made. Makes actually only sense, if your reverse proxy/gateway, which communicates with Heimdall, runs on the same machine.\ndecision: host: 127.0.0.1 port: integer (optional)\nBy making use of this property, you can specify the TCP port the heimdall should listen on. Defaults to 4456.\nExample 2. Configure heimdall’s decision service to listen on port 4444 for incoming requests. decision: port: 4444 timeout: Timeout (optional)\nLike written in the introduction of this section, Heimdall configures useful timeout defaults. You can however override this by making use of the timeout option and specifying the timeouts, you need.\nExample 3. Setting the read timeout to 1 second, write timeout to 2 seconds and the idle timeout to 1 minute. decision: timeout: read: 1s write: 2s idle: 1m cors: CORS (optional)\nCORS (Cross-Origin Resource Sharing) headers can be added and configured by making use of this option. This functionality allows for advanced security features to quickly be set. If CORS headers are set, then the Heimdall does not pass preflight requests to its decision pipeline, instead the response will be generated and sent back to the client directly.\nExample 4. Possible CORS configuration decision: cors: allowed_origins: - example.org allowed_methods: - HEAD - PATCH allow_credentials: true max_age: 10s tls: TLS (optional)\nBy default, the Decision service accepts HTTP requests. Depending on your deployment scenario, you could require Heimdall to accept HTTPs requests only (which is highly recommended). You can do so by making use of this option.\nExample 5. TLS configuration decision: tls: key_store: path: /path/to/keystore.pem password: VerySecure! trusted_proxies: string array (optional)\nThe usage of the Decision service makes only sense, if operated behind some sort of proxy, like API Gateway, etc. In such cases certain header information may be sent to Heimdall using special X-Forwarded-* headers or the Forwarded header. For example, the Host HTTP header is usually used to return the requested host. But when you’re behind a proxy, the actual host may be stored in an X-Forwarded-Host header, which could, however, also be spoofed.\nTo prevent header spoofing and allowing such headers to be accepted from trusted proxies only (so the systems, you have configured to make use of Heimdall’s Decision service), you should configure the trusted_proxies option and list the IPs, or IP ranges (CIDR notation) of your proxies, which make use of that service. If not configured, Heimdall will not accept those headers from any client.\nExample 6. Enable the usage of the above said headers for only those requests, which came from the IPs listed in the configuration. decision: trusted_proxies: - 192.168.2.15 - 192.168.2.16 Example 7. Enable the usage of the above said headers for only those requests, which came from the network listed in the configuration. decision: trusted_proxies: - 192.168.2.0/24 respond: Respond (optional)\nBy making use of this property you can instruct heimdall to preserve error information and provide it in the response body to the caller, as well as to use HTTP status codes deviating from those heimdall would usually use.\nExample 8. Configure verbose errors decision: respond: verbose: true Example 9. Use 404 Not Found for authentication and authorization errors decision: respond: with: authentication_error: code: 404 authorization_error: code: 404 ","description":"","html_content":"\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eDecision is one of the operating modes supported by heimdall, used if you start heimdall with \u003ccode\u003eheimdall serve decision\u003c/code\u003e. By default, heimdall listens on \u003ccode\u003e0.0.0.0:4456/\u003c/code\u003e endpoint for incoming requests in this mode of operation and also configures useful default timeouts. No other options are configured. You can, and should however adjust the configuration for your needs.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThis service exposes only the Decision service endpoint.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect1\"\u003e\n\u003ch2 id=\"_configuration\"\u003eConfiguration\u003c/h2\u003e\n\u003cdiv class=\"sectionbody\"\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThe configuration for the Decision service can be adjusted in the \u003ccode\u003edecision\u003c/code\u003e property, which lives in the \u003ccode\u003eserve\u003c/code\u003e property of heimdall’s configuration and supports the following properties.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"ulist\"\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003ehost\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003estring\u003c/em\u003e (optional)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eBy making use of this property, you can specify the TCP/IP address on which heimdall should listen for connections from client applications. The entry \u003ccode\u003e0.0.0.0\u003c/code\u003e allows listening for all IPv4 addresses. \u003ccode\u003e0.0.0.0\u003c/code\u003e is also the default setting.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"exampleblock\"\u003e\n\u003cdiv class=\"title\"\u003eExample 1. Configure heimdall to allow only local TCP/IP “loopback” connections to be made.\u003c/div\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eMakes actually only sense, if your reverse proxy/gateway, which communicates with Heimdall, runs on the same machine.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"yaml\"\u003e\u003cspan style=\"color: #a6e22e\"\u003edecision\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003ehost\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e127.0.0.1\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003eport\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003einteger\u003c/em\u003e (optional)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eBy making use of this property, you can specify the TCP port the heimdall should listen on. Defaults to \u003ccode\u003e4456\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"exampleblock\"\u003e\n\u003cdiv class=\"title\"\u003eExample 2. Configure heimdall’s decision service to listen on port \u003ccode\u003e4444\u003c/code\u003e for incoming requests.\u003c/div\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"yaml\"\u003e\u003cspan style=\"color: #a6e22e\"\u003edecision\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003eport\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e4444\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003etimeout\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003e\u003ca href=\"/docs/configuration/reference/types/#_timeout\"\u003eTimeout\u003c/a\u003e\u003c/em\u003e (optional)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eLike written in the introduction of this section, Heimdall configures useful timeout defaults. You can however override this by making use of the \u003ccode\u003etimeout\u003c/code\u003e option and specifying the timeouts, you need.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"exampleblock\"\u003e\n\u003cdiv class=\"title\"\u003eExample 3. Setting the read timeout to 1 second, write timeout to 2 seconds and the idle timeout to 1 minute.\u003c/div\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"yaml\"\u003e\u003cspan style=\"color: #a6e22e\"\u003edecision\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003etimeout\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003eread\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e1s\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003ewrite\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e2s\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003eidle\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e1m\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003ecors\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003e\u003ca href=\"/docs/configuration/reference/types/#_cors\"\u003eCORS\u003c/a\u003e\u003c/em\u003e (optional)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS\"\u003eCORS\u003c/a\u003e (Cross-Origin Resource Sharing) headers can be added and configured by making use of this option. This functionality allows for advanced security features to quickly be set. If CORS headers are set, then the Heimdall does not pass preflight requests to its decision pipeline, instead the response will be generated and sent back to the client directly.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"exampleblock\"\u003e\n\u003cdiv class=\"title\"\u003eExample 4. Possible CORS configuration\u003c/div\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"yaml\"\u003e\u003cspan style=\"color: #a6e22e\"\u003edecision\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003ecors\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003eallowed_origins\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n      \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eexample.org\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003eallowed_methods\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n      \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eHEAD\u003c/span\u003e\n      \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ePATCH\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003eallow_credentials\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #66d9ef\"\u003etrue\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003emax_age\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e10s\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003etls\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003e\u003ca href=\"/docs/configuration/reference/types/#_tls\"\u003eTLS\u003c/a\u003e\u003c/em\u003e (optional)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eBy default, the Decision service accepts HTTP requests. Depending on your deployment scenario, you could require Heimdall to accept HTTPs requests only (which is highly recommended). You can do so by making use of this option.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"exampleblock\"\u003e\n\u003cdiv class=\"title\"\u003eExample 5. TLS configuration\u003c/div\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"yaml\"\u003e\u003cspan style=\"color: #a6e22e\"\u003edecision\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003etls\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003ekey_store\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003epath\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e/path/to/keystore.pem\u003c/span\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003epassword\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eVerySecure!\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\u003cdiv id=\"_trusted_proxies\" class=\"ulist\"\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003etrusted_proxies\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003estring array\u003c/em\u003e (optional)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThe usage of the Decision service makes only sense, if operated behind some sort of proxy, like API Gateway, etc. In such cases certain header information may be sent to Heimdall using special \u003ccode\u003eX-Forwarded-*\u003c/code\u003e headers or the \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Forwarded\"\u003eForwarded\u003c/a\u003e header. For example, the \u003ccode\u003eHost\u003c/code\u003e HTTP header is usually used to return the requested host. But when you’re behind a proxy, the actual host may be stored in an \u003ccode\u003eX-Forwarded-Host\u003c/code\u003e header, which could, however, also be spoofed.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eTo prevent header spoofing and allowing such headers to be accepted from trusted proxies only (so the systems, you have configured to make use of Heimdall’s Decision service), you should configure the \u003ccode\u003etrusted_proxies\u003c/code\u003e option and list the IPs, or IP ranges (CIDR notation) of your proxies, which make use of that service. If not configured, Heimdall will not accept those headers from any client.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"exampleblock\"\u003e\n\u003cdiv class=\"title\"\u003eExample 6. Enable the usage of the above said headers for only those requests, which came from the IPs listed in the configuration.\u003c/div\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"yaml\"\u003e\u003cspan style=\"color: #a6e22e\"\u003edecision\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003etrusted_proxies\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n    \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e192.168.2.15\u003c/span\u003e\n    \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e192.168.2.16\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"exampleblock\"\u003e\n\u003cdiv class=\"title\"\u003eExample 7. Enable the usage of the above said headers for only those requests, which came from the network listed in the configuration.\u003c/div\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"yaml\"\u003e\u003cspan style=\"color: #a6e22e\"\u003edecision\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003etrusted_proxies\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n    \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e192.168.2.0/24\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003erespond\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003e\u003ca href=\"/docs/configuration/reference/types/#_respond\"\u003eRespond\u003c/a\u003e\u003c/em\u003e (optional)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eBy making use of this property you can instruct heimdall to preserve error information and provide it in the response body to the caller, as well as to use HTTP status codes deviating from those heimdall would usually use.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"exampleblock\"\u003e\n\u003cdiv class=\"title\"\u003eExample 8. Configure verbose errors\u003c/div\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"yaml\"\u003e\u003cspan style=\"color: #a6e22e\"\u003edecision\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003erespond\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003everbose\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #66d9ef\"\u003etrue\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"exampleblock\"\u003e\n\u003cdiv class=\"title\"\u003eExample 9. Use \u003ccode\u003e404 Not Found\u003c/code\u003e for authentication and authorization errors\u003c/div\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"yaml\"\u003e\u003cspan style=\"color: #a6e22e\"\u003edecision\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003erespond\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003ewith\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003eauthentication_error\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n        \u003cspan style=\"color: #a6e22e\"\u003ecode\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #ae81ff\"\u003e404\u003c/span\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003eauthorization_error\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n        \u003cspan style=\"color: #a6e22e\"\u003ecode\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e404\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n","sections":["Configuration","Services"],"tags":null,"title":"Decision","url":"/docs/configuration/services/decision/"},{"categories":null,"content":" Proxy is one of the operating modes supported by Heimdall, used if you start Heimdall with heimdall serve proxy. By default, Heimdall listens on 0.0.0.0:4455 endpoint for incoming requests in this mode of operation and also configures useful default timeouts. No other options are configured. You can, and should however adjust the configuration for your needs.\nThis service exposes only the proxy endpoint.\nConfiguration The configuration of the Proxy endpoint can be adjusted in the proxy property, which lives in the serve property of heimdall’s configuration and supports the following properties.\nhost: string (optional)\nBy making use of this property, you can specify the TCP/IP address on which heimdall should listen for connections from client applications. The entry 0.0.0.0 allows listening for all IPv4 addresses. 0.0.0.0 is also the default setting.\nExample 1. Configure heimdall to allow only local TCP/IP “loopback” connections to be made. Makes actually only sense, if your reverse proxy/gateway, which communicates with Heimdall, runs on the same machine.\nproxy: host: 127.0.0.1 port: integer (optional)\nBy making use of this property, you can specify the TCP port the heimdall should listen on. Defaults to 4455.\nExample 2. Configure heimdall to listen on port 4444 for incoming requests. proxy: port: 4444 timeout: Timeout (optional)\nLike written in the introduction of this section, Heimdall configures useful timeout defaults. You can however override this by making use of the timeout option and specifying the timeouts, you need. The read timeout is also used while waiting for the responses from the upstream service. Setting it to 0 will make forwarding the requests to the upstream service impossible.\nExample 3. Setting the read timeout to 1 second, write timeout to 2 seconds and the idle timeout to 1 minute. proxy: timeout: read: 1s write: 2s idle: 1m cors: CORS (optional)\nCORS (Cross-Origin Resource Sharing) headers can be added and configured by making use of this option. This functionality allows for advanced security features to quickly be set. If CORS headers are set, then the Heimdall does not pass preflight requests neither to its pipeline, nor to the upstream service. Instead, the response will be generated and sent back to the client directly.\nExample 4. Possible CORS configuration proxy: cors: allowed_origins: - example.org allowed_methods: - HEAD - PATCH allow_credentials: true max_age: 10s tls: TLS (optional)\nBy default, the Proxy endpoint accepts HTTP requests. Depending on your deployment scenario, you could require Heimdall to accept HTTPs requests only (which is highly recommended). You can do so by making use of this option.\nExample 5. TLS configuration proxy: tls: key_store: path: /path/to/keystore.pem password: VerySecure! trusted_proxies: string array (optional)\nHeimdall can make use of X-Forwarded-\\*, like X-Forwarded-For, X-Forwarded-Method, etc, or the Forwarded header sent by its clients and also forward some of these (X-Forwarded-For and Forwarded) to the configured upstream services. However, since these headers can easily be spoofed, the usage of them is only possible, when the request comes from a trusted source. This is typically the case, when Heimdall is operated behind yet another proxy. For example, the Host HTTP header is usually used to return the requested host. But when you’re behind a proxy, the actual host may be stored in an X-Forwarded-Host header, which could, however, also be spoofed.\nTo prevent header spoofing and allowing such headers to be accepted from trusted clients only (so the systems, you have configured to forward requests to Heimdall), you should configure the trusted_proxies option and list the IPs, or IP ranges (CIDR notation) of your proxies, which make use of Heimdall’s Proxy endpoint.\nExample 6. Enable the usage of headers mentioned above only for clients residing in the 192.168.1.0/24 network proxy: trusted_proxies: - 192.168.1.0/24 respond: Respond (optional)\nBy making use of this property you can instruct heimdall to preserve error information and provide it in the response body to the caller, as well as to use HTTP status codes deviating from those heimdall would usually use.\nThis mapping is only applicable if the HTTP status code is set by heimdall and not by the upstream service in the response to the proxied request. For that reason you cannot configure the mapping for the accepted response (it will be ignored). Example 7. Configure verbose errors decision: respond: verbose: true Example 8. Use 404 Not Found for authentication and authorization errors decision: respond: with: authentication_error: code: 404 authorization_error: code: 404 ","description":"","html_content":"\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eProxy is one of the operating modes supported by Heimdall, used if you start Heimdall with \u003ccode\u003eheimdall serve proxy\u003c/code\u003e. By default, Heimdall listens on \u003ccode\u003e0.0.0.0:4455\u003c/code\u003e endpoint for incoming requests in this mode of operation and also configures useful default timeouts. No other options are configured. You can, and should however adjust the configuration for your needs.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThis service exposes only the proxy endpoint.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect1\"\u003e\n\u003ch2 id=\"_configuration\"\u003eConfiguration\u003c/h2\u003e\n\u003cdiv class=\"sectionbody\"\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThe configuration of the Proxy endpoint can be adjusted in the \u003ccode\u003eproxy\u003c/code\u003e property, which lives in the \u003ccode\u003eserve\u003c/code\u003e property of heimdall’s configuration and supports the following properties.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"ulist\"\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003ehost\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003estring\u003c/em\u003e (optional)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eBy making use of this property, you can specify the TCP/IP address on which heimdall should listen for connections from client applications. The entry \u003ccode\u003e0.0.0.0\u003c/code\u003e allows listening for all IPv4 addresses. \u003ccode\u003e0.0.0.0\u003c/code\u003e is also the default setting.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"exampleblock\"\u003e\n\u003cdiv class=\"title\"\u003eExample 1. Configure heimdall to allow only local TCP/IP “loopback” connections to be made.\u003c/div\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eMakes actually only sense, if your reverse proxy/gateway, which communicates with Heimdall, runs on the same machine.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"yaml\"\u003e\u003cspan style=\"color: #a6e22e\"\u003eproxy\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003ehost\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e127.0.0.1\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003eport\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003einteger\u003c/em\u003e (optional)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eBy making use of this property, you can specify the TCP port the heimdall should listen on. Defaults to \u003ccode\u003e4455\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"exampleblock\"\u003e\n\u003cdiv class=\"title\"\u003eExample 2. Configure heimdall to listen on port \u003ccode\u003e4444\u003c/code\u003e for incoming requests.\u003c/div\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"yaml\"\u003e\u003cspan style=\"color: #a6e22e\"\u003eproxy\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003eport\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e4444\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003etimeout\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003e\u003ca href=\"/docs/configuration/reference/types/#_timeout\"\u003eTimeout\u003c/a\u003e\u003c/em\u003e (optional)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eLike written in the introduction of this section, Heimdall configures useful timeout defaults. You can however override this by making use of the \u003ccode\u003etimeout\u003c/code\u003e option and specifying the timeouts, you need. The \u003ccode\u003eread\u003c/code\u003e timeout is also used while waiting for the responses from the upstream service. Setting it to \u003ccode\u003e0\u003c/code\u003e will make forwarding the requests to the upstream service impossible.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"exampleblock\"\u003e\n\u003cdiv class=\"title\"\u003eExample 3. Setting the read timeout to 1 second, write timeout to 2 seconds and the idle timeout to 1 minute.\u003c/div\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"yaml\"\u003e\u003cspan style=\"color: #a6e22e\"\u003eproxy\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003etimeout\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003eread\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e1s\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003ewrite\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e2s\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003eidle\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e1m\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003ecors\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003e\u003ca href=\"/docs/configuration/reference/types/#_cors\"\u003eCORS\u003c/a\u003e\u003c/em\u003e (optional)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS\"\u003eCORS\u003c/a\u003e (Cross-Origin Resource Sharing) headers can be added and configured by making use of this option. This functionality allows for advanced security features to quickly be set. If CORS headers are set, then the Heimdall does not pass preflight requests neither to its pipeline, nor to the upstream service. Instead, the response will be generated and sent back to the client directly.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"exampleblock\"\u003e\n\u003cdiv class=\"title\"\u003eExample 4. Possible CORS configuration\u003c/div\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"yaml\"\u003e\u003cspan style=\"color: #a6e22e\"\u003eproxy\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003ecors\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003eallowed_origins\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n      \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eexample.org\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003eallowed_methods\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n      \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eHEAD\u003c/span\u003e\n      \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ePATCH\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003eallow_credentials\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #66d9ef\"\u003etrue\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003emax_age\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e10s\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003etls\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003e\u003ca href=\"/docs/configuration/reference/types/#_tls\"\u003eTLS\u003c/a\u003e\u003c/em\u003e (optional)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eBy default, the Proxy endpoint accepts HTTP requests. Depending on your deployment scenario, you could require Heimdall to accept HTTPs requests only (which is highly recommended). You can do so by making use of this option.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"exampleblock\"\u003e\n\u003cdiv class=\"title\"\u003eExample 5. TLS configuration\u003c/div\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"yaml\"\u003e\u003cspan style=\"color: #a6e22e\"\u003eproxy\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003etls\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003ekey_store\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003epath\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e/path/to/keystore.pem\u003c/span\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003epassword\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eVerySecure!\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\u003cdiv id=\"_trusted_proxies\" class=\"ulist\"\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003etrusted_proxies\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003estring array\u003c/em\u003e (optional)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eHeimdall can make use of \u003ccode\u003eX-Forwarded-\\*\u003c/code\u003e, like \u003ccode\u003eX-Forwarded-For\u003c/code\u003e, \u003ccode\u003eX-Forwarded-Method\u003c/code\u003e, etc, or the \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Forwarded\"\u003e\u003ccode\u003eForwarded\u003c/code\u003e\u003c/a\u003e header sent by its clients and also forward some of these (\u003ccode\u003eX-Forwarded-For\u003c/code\u003e and \u003ccode\u003eForwarded\u003c/code\u003e) to the configured upstream services. However, since these headers can easily be spoofed, the usage of them is only possible, when the request comes from a trusted source. This is typically the case, when Heimdall is operated behind yet another proxy. For example, the \u003ccode\u003eHost\u003c/code\u003e HTTP header is usually used to return the requested host. But when you’re behind a proxy, the actual host may be stored in an \u003ccode\u003eX-Forwarded-Host\u003c/code\u003e header, which could, however, also be spoofed.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eTo prevent header spoofing and allowing such headers to be accepted from trusted clients only (so the systems, you have configured to forward requests to Heimdall), you should configure the \u003ccode\u003etrusted_proxies\u003c/code\u003e option and list the IPs, or IP ranges (CIDR notation) of your proxies, which make use of Heimdall’s Proxy endpoint.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"exampleblock\"\u003e\n\u003cdiv class=\"title\"\u003eExample 6. Enable the usage of headers mentioned above only for clients residing in the \u003ccode\u003e192.168.1.0/24\u003c/code\u003e network\u003c/div\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"yaml\"\u003e\u003cspan style=\"color: #a6e22e\"\u003eproxy\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003etrusted_proxies\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n    \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e192.168.1.0/24\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003erespond\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003e\u003ca href=\"/docs/configuration/reference/types/#_respond\"\u003eRespond\u003c/a\u003e\u003c/em\u003e (optional)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eBy making use of this property you can instruct heimdall to preserve error information and provide it in the response body to the caller, as well as to use HTTP status codes deviating from those heimdall would usually use.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"admonitionblock note\"\u003e\n\u003ctable\u003e\n\u003ctbody\u003e\u003ctr\u003e\n\u003ctd class=\"icon\"\u003e\n\u003ci class=\"fa icon-note\" title=\"Note\"\u003e\u003c/i\u003e\n\u003c/td\u003e\n\u003ctd class=\"content\"\u003e\nThis mapping is only applicable if the HTTP status code is set by heimdall and not by the upstream service in the response to the proxied request. For that reason you cannot configure the mapping for the \u003ccode\u003eaccepted\u003c/code\u003e response (it will be ignored).\n\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003cdiv class=\"exampleblock\"\u003e\n\u003cdiv class=\"title\"\u003eExample 7. Configure verbose errors\u003c/div\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"yaml\"\u003e\u003cspan style=\"color: #a6e22e\"\u003edecision\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003erespond\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003everbose\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #66d9ef\"\u003etrue\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"exampleblock\"\u003e\n\u003cdiv class=\"title\"\u003eExample 8. Use \u003ccode\u003e404 Not Found\u003c/code\u003e for authentication and authorization errors\u003c/div\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"yaml\"\u003e\u003cspan style=\"color: #a6e22e\"\u003edecision\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003erespond\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003ewith\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003eauthentication_error\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n        \u003cspan style=\"color: #a6e22e\"\u003ecode\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #ae81ff\"\u003e404\u003c/span\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003eauthorization_error\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n        \u003cspan style=\"color: #a6e22e\"\u003ecode\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e404\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n","sections":["Configuration","Services"],"tags":null,"title":"Proxy","url":"/docs/configuration/services/proxy/"},{"categories":null,"content":" The Management service is always there, regardless of the mode of operation Heimdall is started in. By default, Heimdall listens on 0.0.0.0:4457 endpoint for incoming requests in this mode of operation and also configures useful default timeouts. No other options are configured. You can however adjust the configuration for your needs.\nThis service exposes the health and the JWKS endpoints.\nConfiguration The configuration for of the Management endpoint can be adjusted in the management property, which lives in the serve property of heimdall’s configuration and supports the following properties.\nhost: string (optional)\nBy making use of this property, you can specify the TCP/IP address on which heimdall should listen for connections from client applications. The entry 0.0.0.0 allows listening for all IPv4 addresses. 0.0.0.0 is also the default setting.\nExample 1. Configure heimdall to allow only local TCP/IP “loopback” connections to be made. management: host: 127.0.0.1 port: integer (optional)\nBy making use of this property, you can specify the TCP port the heimdall should listen on. Defaults to 4457.\nExample 2. Configure heimdall to listen on port 4444 for incoming requests. management: port: 4444 timeout: Timeout (optional)\nLike written in the introduction of this section, Heimdall configures useful timeout defaults. You can however override this by making use of the timeout option and specifying the timeouts, you need.\nExample 3. Setting the read timeout to 1 second, write timeout to 2 seconds and the idle timeout to 1 minute. management: timeout: read: 1s write: 2s idle: 1m cors: CORS (optional)\nCORS (Cross-Origin Resource Sharing) headers can be added and configured by making use of this option. This functionality allows for advanced security features to quickly be set.\nExample 4. Possible CORS configuration management: cors: allowed_origins: - example.org allowed_methods: - HEAD - PATCH allow_credentials: true max_age: 10s tls: TLS (optional)\nBy default, the Management endpoint accepts HTTP requests. Depending on your deployment scenario, you could require Heimdall to accept HTTPs requests only (which is highly recommended). You can do so by making use of this option.\nExample 5. TLS configuration management: tls: key_store: path: /path/to/keystore.pem password: VerySecure! ","description":"","html_content":"\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThe Management service is always there, regardless of the mode of operation Heimdall is started in. By default, Heimdall listens on \u003ccode\u003e0.0.0.0:4457\u003c/code\u003e endpoint for incoming requests in this mode of operation and also configures useful default timeouts. No other options are configured. You can however adjust the configuration for your needs.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThis service exposes the health and the JWKS endpoints.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect1\"\u003e\n\u003ch2 id=\"_configuration\"\u003eConfiguration\u003c/h2\u003e\n\u003cdiv class=\"sectionbody\"\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThe configuration for of the Management endpoint can be adjusted in the \u003ccode\u003emanagement\u003c/code\u003e property, which lives in the \u003ccode\u003eserve\u003c/code\u003e property of heimdall’s configuration and supports the following properties.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"ulist\"\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003ehost\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003estring\u003c/em\u003e (optional)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eBy making use of this property, you can specify the TCP/IP address on which heimdall should listen for connections from client applications. The entry \u003ccode\u003e0.0.0.0\u003c/code\u003e allows listening for all IPv4 addresses. \u003ccode\u003e0.0.0.0\u003c/code\u003e is also the default setting.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"exampleblock\"\u003e\n\u003cdiv class=\"title\"\u003eExample 1. Configure heimdall to allow only local TCP/IP “loopback” connections to be made.\u003c/div\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"yaml\"\u003e\u003cspan style=\"color: #a6e22e\"\u003emanagement\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003ehost\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e127.0.0.1\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003eport\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003einteger\u003c/em\u003e (optional)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eBy making use of this property, you can specify the TCP port the heimdall should listen on. Defaults to \u003ccode\u003e4457\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"exampleblock\"\u003e\n\u003cdiv class=\"title\"\u003eExample 2. Configure heimdall to listen on port \u003ccode\u003e4444\u003c/code\u003e for incoming requests.\u003c/div\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"yaml\"\u003e\u003cspan style=\"color: #a6e22e\"\u003emanagement\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003eport\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e4444\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003etimeout\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003e\u003ca href=\"/docs/configuration/reference/types/#_timeout\"\u003eTimeout\u003c/a\u003e\u003c/em\u003e (optional)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eLike written in the introduction of this section, Heimdall configures useful timeout defaults. You can however override this by making use of the \u003ccode\u003etimeout\u003c/code\u003e option and specifying the timeouts, you need.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"exampleblock\"\u003e\n\u003cdiv class=\"title\"\u003eExample 3. Setting the read timeout to 1 second, write timeout to 2 seconds and the idle timeout to 1 minute.\u003c/div\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"yaml\"\u003e\u003cspan style=\"color: #a6e22e\"\u003emanagement\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003etimeout\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003eread\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e1s\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003ewrite\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e2s\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003eidle\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e1m\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003ecors\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003e\u003ca href=\"/docs/configuration/reference/types/#_cors\"\u003eCORS\u003c/a\u003e\u003c/em\u003e (optional)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS\"\u003eCORS\u003c/a\u003e (Cross-Origin Resource Sharing) headers can be added and configured by making use of this option. This functionality allows for advanced security features to quickly be set.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"exampleblock\"\u003e\n\u003cdiv class=\"title\"\u003eExample 4. Possible CORS configuration\u003c/div\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"yaml\"\u003e\u003cspan style=\"color: #a6e22e\"\u003emanagement\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003ecors\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003eallowed_origins\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n      \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eexample.org\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003eallowed_methods\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n      \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eHEAD\u003c/span\u003e\n      \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ePATCH\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003eallow_credentials\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #66d9ef\"\u003etrue\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003emax_age\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e10s\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003etls\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003e\u003ca href=\"/docs/configuration/reference/types/#_tls\"\u003eTLS\u003c/a\u003e\u003c/em\u003e (optional)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eBy default, the Management endpoint accepts HTTP requests. Depending on your deployment scenario, you could require Heimdall to accept HTTPs requests only (which is highly recommended). You can do so by making use of this option.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"exampleblock\"\u003e\n\u003cdiv class=\"title\"\u003eExample 5. TLS configuration\u003c/div\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"yaml\"\u003e\u003cspan style=\"color: #a6e22e\"\u003emanagement\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003etls\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003ekey_store\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003epath\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e/path/to/keystore.pem\u003c/span\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003epassword\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eVerySecure!\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n","sections":["Configuration","Services"],"tags":null,"title":"Management","url":"/docs/configuration/services/management/"},{"categories":null,"content":" Heimdall logs concern everything that happens to Heimdall itself (startup, configuration, events, shutdown, and so on). Logs are written to stdout by default in text format.\nConfiguration Logging configuration can be adjusted in the log property of heimdall’s configuration and supports following properties.\nformat: string (optional)\nWith text and gelf being the available formats. text is the default format. And gelf defines a JSON format adhering to GELF.\nExample 1. Configuring logging to emit logs using GELD format. log: format: gelf Usage of text (default) format is not recommended for production deployments as it requires more computational resources and is hence slow. level: string (optional)\nFollowing log levels are available: debug, info, warn, error, fatal, panic and disabled. The last one effectively disables logging. You usually do not want to do this. By default, the level is set to error.\nExample 2. Configuring logging to emit logs in debug level. log: level: debug ","description":"","html_content":"\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eHeimdall logs concern everything that happens to Heimdall itself (startup, configuration, events, shutdown, and so on). Logs are written to stdout by default in text format.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect1\"\u003e\n\u003ch2 id=\"_configuration\"\u003eConfiguration\u003c/h2\u003e\n\u003cdiv class=\"sectionbody\"\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eLogging configuration can be adjusted in the \u003ccode\u003elog\u003c/code\u003e property of heimdall’s configuration and supports following properties.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"ulist\"\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003eformat\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003estring\u003c/em\u003e (optional)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eWith \u003ccode\u003etext\u003c/code\u003e and \u003ccode\u003egelf\u003c/code\u003e being the available formats. \u003ccode\u003etext\u003c/code\u003e is the default format. And \u003ccode\u003egelf\u003c/code\u003e defines a JSON format adhering to \u003ca href=\"https://docs.graylog.org/v1/docs/gelf\"\u003eGELF\u003c/a\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"exampleblock\"\u003e\n\u003cdiv class=\"title\"\u003eExample 1. Configuring logging to emit logs using GELD format.\u003c/div\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"yaml\"\u003e\u003cspan style=\"color: #a6e22e\"\u003elog\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003eformat\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003egelf\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"admonitionblock warning\"\u003e\n\u003ctable\u003e\n\u003ctbody\u003e\u003ctr\u003e\n\u003ctd class=\"icon\"\u003e\n\u003ci class=\"fa icon-warning\" title=\"Warning\"\u003e\u003c/i\u003e\n\u003c/td\u003e\n\u003ctd class=\"content\"\u003e\nUsage of \u003ccode\u003etext\u003c/code\u003e (default) format is not recommended for production deployments as it requires more computational resources and is hence slow.\n\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003elevel\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003estring\u003c/em\u003e (optional)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eFollowing log levels are available: \u003ccode\u003edebug\u003c/code\u003e, \u003ccode\u003einfo\u003c/code\u003e, \u003ccode\u003ewarn\u003c/code\u003e, \u003ccode\u003eerror\u003c/code\u003e, \u003ccode\u003efatal\u003c/code\u003e, \u003ccode\u003epanic\u003c/code\u003e and \u003ccode\u003edisabled\u003c/code\u003e. The last one effectively disables logging. You usually do not want to do this. By default, the level is set to \u003ccode\u003eerror\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"exampleblock\"\u003e\n\u003cdiv class=\"title\"\u003eExample 2. Configuring logging to emit logs in debug level.\u003c/div\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"yaml\"\u003e\u003cspan style=\"color: #a6e22e\"\u003elog\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003elevel\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003edebug\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n","sections":["Configuration","Observability"],"tags":null,"title":"Logging","url":"/docs/configuration/observability/logging/"},{"categories":null,"content":" Heimdall exposes Prometheus style metrics on 127.0.0.1:10250/metrics endpoint for analysis and visualization purposes.\nConfiguration Configuration for this service can be adjusted in the metrics property of heimdall’s configuration by making use of the following properties.\nenabled: boolean (optional)\nBy making use of this property, you can configure heimdall to enable or disable the metrics service. Defaults to true (metrics exposure is enabled).\nExample 1. Disabling metrics. metrics: enabled: false host: string (optional)\nBy making use of this property, you can specify the TCP/IP address on which heimdall should listen for connections from client applications. The entry 0.0.0.0 allows listening for all IPv4 addresses. Defaults to 127.0.0.1 - the loopback interface to avoid unwanted exposure of metrics.\nIf you operate heimdall in a container, you should set this property to a value, which would allow your APM system to scrape this information. Example 2. Configure heimdall to allow listening on any TCP/IP interfaces. metrics: host: 0.0.0.0 port: integer (optional)\nBy making use of this property, you can specify the TCP port the heimdall should listen on. Defaults to 10250.\nExample 3. Configure heimdall to listen on port 9999 for metrics requests. metrics: port: 9999 metrics_path: string (optional)\nBy making use of this property, you can specify the path under which prometheus metrics information is made available. Defaults to /metrics.\nExample 4. Configure heimdall expose metrics information behind /prometheus path. metrics: metrics_path: /prometheus ","description":"","html_content":"\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eHeimdall exposes \u003ca href=\"https://grafana.com/oss/prometheus/\"\u003ePrometheus\u003c/a\u003e style metrics on \u003ccode\u003e127.0.0.1:10250/metrics\u003c/code\u003e endpoint for analysis and visualization purposes.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect1\"\u003e\n\u003ch2 id=\"_configuration\"\u003eConfiguration\u003c/h2\u003e\n\u003cdiv class=\"sectionbody\"\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eConfiguration for this service can be adjusted in the \u003ccode\u003emetrics\u003c/code\u003e property of heimdall’s configuration by making use of the following properties.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"ulist\"\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003eenabled\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003eboolean\u003c/em\u003e (optional)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eBy making use of this property, you can configure heimdall to enable or disable the metrics service. Defaults to \u003ccode\u003etrue\u003c/code\u003e (metrics exposure is enabled).\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"exampleblock\"\u003e\n\u003cdiv class=\"title\"\u003eExample 1. Disabling metrics.\u003c/div\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"yaml\"\u003e\u003cspan style=\"color: #a6e22e\"\u003emetrics\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003eenabled\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #66d9ef\"\u003efalse\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003ehost\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003estring\u003c/em\u003e (optional)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eBy making use of this property, you can specify the TCP/IP address on which heimdall should listen for connections from client applications. The entry \u003ccode\u003e0.0.0.0\u003c/code\u003e allows listening for all IPv4 addresses. Defaults to \u003ccode\u003e127.0.0.1\u003c/code\u003e - the loopback interface to avoid unwanted exposure of metrics.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"admonitionblock note\"\u003e\n\u003ctable\u003e\n\u003ctbody\u003e\u003ctr\u003e\n\u003ctd class=\"icon\"\u003e\n\u003ci class=\"fa icon-note\" title=\"Note\"\u003e\u003c/i\u003e\n\u003c/td\u003e\n\u003ctd class=\"content\"\u003e\nIf you operate heimdall in a container, you should set this property to a value, which would allow your APM system to scrape this information.\n\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003cdiv class=\"exampleblock\"\u003e\n\u003cdiv class=\"title\"\u003eExample 2. Configure heimdall to allow listening on any TCP/IP interfaces.\u003c/div\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"yaml\"\u003e\u003cspan style=\"color: #a6e22e\"\u003emetrics\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003ehost\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e0.0.0.0\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003eport\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003einteger\u003c/em\u003e (optional)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eBy making use of this property, you can specify the TCP port the heimdall should listen on. Defaults to \u003ccode\u003e10250\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"exampleblock\"\u003e\n\u003cdiv class=\"title\"\u003eExample 3. Configure heimdall to listen on port \u003ccode\u003e9999\u003c/code\u003e for metrics requests.\u003c/div\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"yaml\"\u003e\u003cspan style=\"color: #a6e22e\"\u003emetrics\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003eport\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e9999\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003emetrics_path\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003estring\u003c/em\u003e (optional)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eBy making use of this property, you can specify the path under which prometheus metrics information is made available. Defaults to \u003ccode\u003e/metrics\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"exampleblock\"\u003e\n\u003cdiv class=\"title\"\u003eExample 4. Configure heimdall expose metrics information behind \u003ccode\u003e/prometheus\u003c/code\u003e path.\u003c/div\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"yaml\"\u003e\u003cspan style=\"color: #a6e22e\"\u003emetrics\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003emetrics_path\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e/prometheus\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n","sections":["Configuration","Observability"],"tags":null,"title":"Metrics","url":"/docs/configuration/observability/metrics/"},{"categories":null,"content":" Heimdall makes use of OpenTelemetry for distributed tracing to support recording of paths taken by requests as they propagate through multi-service architectures and supports all environment variables including the defined values according to OpenTelemetry Environment Variable Specification.\nConfiguration By default, tracing is enabled and can be disabled and slightly tuned in the tracing property of heimdall’s configuration, which has the following properties.\nenabled: boolean (optional)\nBy making use of this property, you can configure heimdall to enable or disable tracing. Defaults to true (tracing enabled).\nExample 1. Disabling tracing. tracing: enabled: false span_processor: string (optional)\nWith simple and batch being the available options. By setting this property, you can define how heimdall shall process the created spans. Defaults to batch. This property is only there, as there is no corresponding setting option via OTEL tracing environment variables available.\nExample 2. Setting the span processor to export completed spans in batches. tracing: span_processor: batch Description of the options:\nsimple - Configures heimdall to synchronously export the created spans via configured exporters. This is not recommended for production use as it is slow and has a high computation resource usage overhead. It might be however good for testing, debugging, or showing examples of other features.\nbatch - Configures heimdall to send completed span batches to the exporter. Recommended setting for production use.\nFurther configuration of the tracing system happens via OpenTelemetry Environment Variables. Head over to Observability section and the referenced OTEL documentation for more details.\n","description":"","html_content":"\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eHeimdall makes use of \u003ca href=\"https://opentelemetry.io/\"\u003eOpenTelemetry\u003c/a\u003e for distributed tracing to support recording of paths taken by requests as they propagate through multi-service architectures and supports all environment variables including the defined values according to \u003ca href=\"https://opentelemetry.io/docs/reference/specification/sdk-environment-variables/\"\u003eOpenTelemetry Environment Variable Specification\u003c/a\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect1\"\u003e\n\u003ch2 id=\"_configuration\"\u003eConfiguration\u003c/h2\u003e\n\u003cdiv class=\"sectionbody\"\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eBy default, tracing is enabled and can be disabled and slightly tuned in the \u003ccode\u003etracing\u003c/code\u003e property of heimdall’s configuration, which has the following properties.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"ulist\"\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003eenabled\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003eboolean\u003c/em\u003e (optional)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eBy making use of this property, you can configure heimdall to enable or disable tracing. Defaults to \u003ccode\u003etrue\u003c/code\u003e (tracing enabled).\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"exampleblock\"\u003e\n\u003cdiv class=\"title\"\u003eExample 1. Disabling tracing.\u003c/div\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"yaml\"\u003e\u003cspan style=\"color: #a6e22e\"\u003etracing\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003eenabled\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #66d9ef\"\u003efalse\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003espan_processor\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003estring\u003c/em\u003e (optional)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eWith \u003ccode\u003esimple\u003c/code\u003e and \u003ccode\u003ebatch\u003c/code\u003e being the available options. By setting this property, you can define how heimdall shall process the created spans. Defaults to \u003ccode\u003ebatch\u003c/code\u003e. This property is only there, as there is no corresponding setting option via OTEL tracing environment variables available.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"exampleblock\"\u003e\n\u003cdiv class=\"title\"\u003eExample 2. Setting the span processor to export completed spans in batches.\u003c/div\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"yaml\"\u003e\u003cspan style=\"color: #a6e22e\"\u003etracing\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003espan_processor\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ebatch\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eDescription of the options:\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"ulist\"\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003esimple\u003c/code\u003e - Configures heimdall to synchronously export the created spans via configured exporters. This is not recommended for production use as it is slow and has a high computation resource usage overhead. It might be however good for testing, debugging, or showing examples of other features.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003ebatch\u003c/code\u003e - Configures heimdall to send completed span batches to the exporter. Recommended setting for production use.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eFurther configuration of the tracing system happens via \u003ca href=\"https://opentelemetry.io/docs/reference/specification/sdk-environment-variables/\"\u003eOpenTelemetry Environment Variables\u003c/a\u003e. Head over to \u003ca href=\"/docs/operations/observability/#_tracing_in_heimdall\"\u003eObservability\u003c/a\u003e section and the referenced OTEL documentation for more details.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n","sections":["Configuration","Observability"],"tags":null,"title":"Tracing","url":"/docs/configuration/observability/tracing/"},{"categories":null,"content":" Heimdall can expose runtime profiling data in the profile.proto format (also known as pprof format), which can be consumed by many APM tools, like Google’s pprof, Grafana Phlare, Pyroscope and many more for analysis and visualization purposes. By default, this service is disabled. If enabled, the profiling information is available on 127.0.0.1:10250/debug/pprof endpoint.\nConfiguration Configuration for this service can be adjusted in the profiling property of heimdall’s configuration by making use of the following properties.\nenabled: boolean (optional)\nBy making use of this property, you can configure heimdall to enable or disable runtime profiling. Defaults to false (profiling disabled).\nExample 1. Enabling profiling. profiling: enabled: true host: string (optional)\nBy making use of this property, you can specify the TCP/IP address on which heimdall should listen for connections from client applications interested in profiling data. The entry 0.0.0.0 allows listening for all IPv4 addresses. Defaults to 127.0.0.1, which allow only local TCP/IP “loopback” connections to be made.\nIf you operate heimdall in a container, you should set this property to a value, which would allow your APM system to scrape this information. Example 2. Configure heimdall to listen on 192.168.2.10. profiling: host: 192.168.2.10 port: integer (optional)\nBy making use of this property, you can specify the TCP port the heimdall should listen on. Defaults to 10251.\nExample 3. Configure heimdall to listen on port 9999 for runtime profiling requests. metrics: port: 9999 ","description":"","html_content":"\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eHeimdall can expose runtime profiling data in the \u003ccode\u003eprofile.proto\u003c/code\u003e format (also known as \u003ccode\u003epprof\u003c/code\u003e format), which can be consumed by many APM tools, like \u003ca href=\"https://github.com/google/pprof\"\u003eGoogle’s pprof\u003c/a\u003e, \u003ca href=\"https://grafana.com/oss/phlare/\"\u003eGrafana Phlare\u003c/a\u003e, \u003ca href=\"https://pyroscope.io/\"\u003ePyroscope\u003c/a\u003e and many more for analysis and visualization purposes. By default, this service is disabled. If enabled, the profiling information is available on \u003ccode\u003e127.0.0.1:10250/debug/pprof\u003c/code\u003e endpoint.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect1\"\u003e\n\u003ch2 id=\"_configuration\"\u003eConfiguration\u003c/h2\u003e\n\u003cdiv class=\"sectionbody\"\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eConfiguration for this service can be adjusted in the \u003ccode\u003eprofiling\u003c/code\u003e property of heimdall’s configuration by making use of the following properties.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"ulist\"\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003eenabled\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003eboolean\u003c/em\u003e (optional)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eBy making use of this property, you can configure heimdall to enable or disable runtime profiling. Defaults to \u003ccode\u003efalse\u003c/code\u003e (profiling disabled).\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"exampleblock\"\u003e\n\u003cdiv class=\"title\"\u003eExample 1. Enabling profiling.\u003c/div\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"yaml\"\u003e\u003cspan style=\"color: #a6e22e\"\u003eprofiling\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003eenabled\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #66d9ef\"\u003etrue\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003ehost\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003estring\u003c/em\u003e (optional)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eBy making use of this property, you can specify the TCP/IP address on which heimdall should listen for connections from client applications interested in profiling data. The entry \u003ccode\u003e0.0.0.0\u003c/code\u003e allows listening for all IPv4 addresses. Defaults to \u003ccode\u003e127.0.0.1\u003c/code\u003e, which allow only local TCP/IP “loopback” connections to be made.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"admonitionblock note\"\u003e\n\u003ctable\u003e\n\u003ctbody\u003e\u003ctr\u003e\n\u003ctd class=\"icon\"\u003e\n\u003ci class=\"fa icon-note\" title=\"Note\"\u003e\u003c/i\u003e\n\u003c/td\u003e\n\u003ctd class=\"content\"\u003e\nIf you operate heimdall in a container, you should set this property to a value, which would allow your APM system to scrape this information.\n\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003cdiv class=\"exampleblock\"\u003e\n\u003cdiv class=\"title\"\u003eExample 2. Configure heimdall to listen on \u003ccode\u003e192.168.2.10\u003c/code\u003e.\u003c/div\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"yaml\"\u003e\u003cspan style=\"color: #a6e22e\"\u003eprofiling\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003ehost\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e192.168.2.10\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003eport\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003einteger\u003c/em\u003e (optional)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eBy making use of this property, you can specify the TCP port the heimdall should listen on. Defaults to \u003ccode\u003e10251\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"exampleblock\"\u003e\n\u003cdiv class=\"title\"\u003eExample 3. Configure heimdall to listen on port \u003ccode\u003e9999\u003c/code\u003e for runtime profiling requests.\u003c/div\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"yaml\"\u003e\u003cspan style=\"color: #a6e22e\"\u003emetrics\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003eport\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e9999\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n","sections":["Configuration","Observability"],"tags":null,"title":"Runtime Profiling","url":"/docs/configuration/observability/profiling/"},{"categories":null,"content":" This section explains how rules can be defined and used in detail. Before diving onto this topic, we recommend to make yourself familiar with the principal architecture and concepts.\nCore aspects of heimdall are rules. These let heimdall execute logic required by your upstream service to authenticate, authorize the incoming requests, enrich the information about the subject and transform it according your needs. However, to be able to define even a single rule, you must configure pipeline mechanisms, which you can then use in any rules, you define. Rules are dynamic by nature and can come and go together with the upstream service defining these.\nAll rule specific static configuration, including the definition of the aforesaid mechanisms can be done within heimdall’s rules property.\nIn general, following aspects are important when dealing with rules:\nPipeline Mechanisms, which build the foundation of each and every possible pipeline defined by any single rule.\nRule, which assembles the individual pipeline by making use of previously defined mechanisms and which is executed, when the rule matches the request. For the purpose of the latter, it also defines the url patterns.\nDefault Rule, which, if defined, is executed if no other rule matched the request.\nRule Providers, which load the rules from different sources.\n","description":"","html_content":"\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThis section explains how rules can be defined and used in detail. Before diving onto this topic, we recommend to make yourself familiar with the principal \u003ca href=\"/docs/getting_started/concepts/\"\u003earchitecture and concepts\u003c/a\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eCore aspects of heimdall are rules. These let heimdall execute logic required by your upstream service to authenticate, authorize the incoming requests, enrich the information about the subject and transform it according your needs. However, to be able to define even a single rule, you must configure \u003ca href=\"/docs/configuration/rules/pipeline_mechanisms/overview/\"\u003epipeline mechanisms\u003c/a\u003e, which you can then use in any rules, you define. Rules are dynamic by nature and can come and go together with the upstream service defining these.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eAll rule specific static configuration, including the definition of the aforesaid mechanisms can be done within heimdall’s \u003ccode\u003erules\u003c/code\u003e property.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eIn general, following aspects are important when dealing with rules:\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"ulist\"\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"/docs/configuration/rules/pipeline_mechanisms/overview/\"\u003ePipeline Mechanisms\u003c/a\u003e, which build the foundation of each and every possible pipeline defined by any single rule.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"/docs/configuration/rules/configuration/\"\u003eRule\u003c/a\u003e, which assembles the individual pipeline by making use of previously defined \u003ca href=\"/docs/configuration/rules/pipeline_mechanisms/overview/\"\u003emechanisms\u003c/a\u003e and which is executed, when the rule matches the request. For the purpose of the latter, it also defines the url patterns.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"/docs/configuration/rules/default/\"\u003eDefault Rule\u003c/a\u003e, which, if defined, is executed if no other rule matched the request.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"/docs/configuration/rules/providers/\"\u003eRule Providers\u003c/a\u003e, which load the rules from different sources.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n","sections":["Configuration","Rules"],"tags":null,"title":"Rules Overview","url":"/docs/configuration/rules/overview/"},{"categories":null,"content":" All mechanisms supported by heimdall fall into following categories:\nAuthenticators, which inspect HTTP requests for presence of authentication objects, like e.g. the presence of a specific cookie. If such objects exist, authenticators verify the related authentication status and obtain information about the corresponding subject. A subject, could be a user who tries to use particular functionality of the upstream service, a machine (if you have machine-2-machine interaction), or something different. Authenticators ensure the subject is authenticated and the information available about it is valid.\nAuthorizers, which ensure that the subject obtained via an authenticator has the required permissions to submit the given HTTP request and thus to execute the corresponding logic in the upstream service. E.g. a specific endpoint of the upstream service might only be accessible to a \u0026#34;user\u0026#34; from the \u0026#34;admin\u0026#34; group, or to an HTTP request if a specific HTTP header is set.\nContextualizers, which enrich the information about the subject obtained via an authenticator with further contextual information, required either by the upstream service itself or an authorizer. This can be handy if the actual authentication system doesn’t have all information about the subject (which is usually the case in microservice architectures), or if dynamic information about the subject, like the current location based on the IP address, is required.\nUnifiers, which finalize the successful execution of the pipeline and unify the available information about the subject by transforming it into a format expected, respectively required by the upstream service. This ranges from adding a query parameter, to a structured JWT in a specific header.\nError Handlers, which are responsible for execution of logic if any of the mechanisms described above fail. These range from a simple error response to the client, which sent the request, to sophisticated ones, supporting complex logic and redirects.\nGeneral Configuration All of the above said mechanisms must be configured in the mechanisms section of heimdall’s rules configuration property. Only those mechanisms, which have been configured, can then be (re-)used by rules.\nrules: mechanisms: authenticators: \u0026lt;list of authenticators\u0026gt; authorizers: \u0026lt;list of authorizers\u0026gt; contextualizers: \u0026lt;list of contextualizers\u0026gt; unifiers: \u0026lt;list of unifiers\u0026gt; error_handlers: \u0026lt;list of error handlers\u0026gt; Each mechanism configuration entry must contain at least the following properties:\nid - The unique identifier of the mechanism. Identifiers are used to reference the required mechanism within a rule. You can choose whatever identifier, you want. It is just a name. It must however be unique across all defined mechanisms of a particular mechanism category (like authenticator, authorizer, etc.).\ntype - The specific type of the mechanism.\nDepending on the mechanism type, there can be an additional config property, which then holds the mechanism’s specific configuration.\nEvery mechanism type can be configured as many times as needed. However, for those, which don’t have a configuration, it doesn’t really make sense, as all of them would behave the same way.\nFor example, your authenticator definitions could look like this:\nrules: mechanisms: authenticators: - id: foo type: bar - id: baz type: bla config: bla: bar - id: zab type: bar - id: oof type: bla config: bar: bla The above snippet configures two instances of an imaginary authenticator of a type bar, made available for usage in rules via ids foo and zab, as well as two instances of an imaginary authenticator of a type bla, made available for usage in rule via ids baz and oof. The baz and oof authenticators are different, as they are configured differently, but foo and zab authenticators do not have any configuration. So, they behave the same way and there is actually no need to define two instances of them.\nIn simplest case a rule will just reuse mechanisms in its pipeline. In more complex cases a rule can reconfigure parts of it (More about rules configuration can be found here). Which parts can be reconfigured are mechanism specific and described in the mechanism specific documentation. Reconfiguration is always limited to the particular rule pipeline and does not affect other rules.\nHere is an example which configures a couple of mechanisms:\nrules: mechanisms: authenticators: - id: anon_authn type: anonymous - id: opaque_auth_token_authn type: oauth2_introspection config: introspection_endpoint: url: http://hydra:4445/oauth2/introspect assertions: issuers: - http://127.0.0.1:4444/ authorizers: - id: deny_all_authz type: deny - id: local_authz type: cel config: expressions: - expression: \u0026#34;manager\u0026#34; in Subject.Attributes.groups message: user is not in the expected group contextualizers: - id: group_manager type: generic config: endpoint: url: http://group-manager.local/groups method: GET forward_headers: - Authorization cache_ttl: 1m unifiers: - id: jwt_unifier type: jwt config: ttl: 5m claims: | { {{ $user_name := .Subject.Attributes.identity.user_name -}} \u0026#34;email\u0026#34;: {{ quote .Subject.Attributes.identity.email }}, \u0026#34;email_verified\u0026#34;: {{ .Subject.Attributes.identity.email_verified }}, {{ if $user_name -}} \u0026#34;name\u0026#34;: {{ quote $user_name }} {{ else -}} \u0026#34;name\u0026#34;: {{ quote $email }} {{ end -}} } error_handlers: - id: default type: default - id: authenticate_with_kratos type: redirect config: to: http://127.0.0.1:4433/self-service/login/browser?return_to={{ .Request.URL | urlenc }} when: - error: - type: authentication_error - type: authorization_error request_headers: Accept: - text/html Evaluation Objects Some mechanisms support, respectively require access to different types of objects they work on, e.g. to render a header with specific values, or to check whether some expectations apply. Following objects are available and have the following structure:\nSubject This object contains the information about the authenticated subject and has the following attributes:\nID: string\nThe identifier of the subject. This value is set by the authenticator, which was able to authenticate the subject.\nAttributes: map\nContains all attributes, which are known about the subject. The content is initially set by the authenticator, which was able to authenticate the subject. Mechanisms following the authenticator in a rule pipeline can update it, but cannot override any entries.\nEach object of this type can be thought as a JSON object. Here some examples:\nExample 1. Subject created by an Anonymous Authenticator Subject = { ID: \u0026#34;anonymous\u0026#34;, Attributes: {} } Example 2. Possible Subject created by an OAuth2 Authenticator Subject = { ID: \u0026#34;foobar\u0026#34;, Attributes: { \u0026#34;sub\u0026#34;: \u0026#34;foobar\u0026#34;, \u0026#34;exp\u0026#34;: \u0026#34;1670600805\u0026#34;, \u0026#34;jti\u0026#34;: \u0026#34;7b91ed8a-0251-4e02-8d51-9792785851e8\u0026#34;, \u0026#34;iat\u0026#34;: \u0026#34;1670600305\u0026#34;, \u0026#34;iss\u0026#34;: \u0026#34;http://testauthserver.local\u0026#34;, \u0026#34;nbf\u0026#34;: \u0026#34;1670600305\u0026#34;, \u0026#34;extra\u0026#34;: { \u0026#34;foo\u0026#34;: [\u0026#34;bar\u0026#34;, \u0026#34;baz\u0026#34;] } } } Request This object contains information about the request handled by heimdall and has the following attributes and methods:\nMethod: string\nThe HTTP method used, like GET, POST, etc.\nURL: URL\nThe URL of the matched request. This object has the following properties and methods:\nScheme: string\nThe HTTP scheme part of the url\nHost: string\nThe host part of the url\nPath: string\nThe path part of the url\nRawQuery: string\nThe raw query part of the url.\nString(): method\nThis method returns the URL as valid URL string of a form scheme:host/path?query.\nQuery(): method\nThe parsed query with each key-value pair being a string to array of strings mapping.\nClientIP: string array\nThe list of IP addresses the request passed through with the first entry being the ultimate client of the request. Only available if heimdall is configured to trust the client, sending this information, e.g. in the X-Forwarded-From header (see e.g. Decision Service trusted_proxies configuration for more details).\nHeader(name): method,\nThis method expects the name of a header as input and returns the value of it as string. If the header is not present in the HTTP request an empty string (\u0026#34;\u0026#34;) is returned.\nCookie(name): method,\nThis method expects the name of a cookie as input and returns the value of it as string. If the cookie is not present in the HTTP request an empty string (\u0026#34;\u0026#34;) is returned.\nHere is an example:\nExample 3. Example request object Request = { Method: \u0026#34;GET\u0026#34;, Url: { Scheme: \u0026#34;https\u0026#34;, Host: \u0026#34;localhost\u0026#34;, Path: \u0026#34;/test\u0026#34;, RawQuery: \u0026#34;baz=zab\u0026amp;baz=bar\u0026amp;foo=bar\u0026#34; }, ClientIP: [\u0026#34;127.0.0.1\u0026#34;, \u0026#34;10.10.10.10\u0026#34;] } Payload This object represents the contents of a payload, like the request body or a response body. The contents depend on the MIME-Type of the payload. For json, yaml or x-www-form-urlencoded encoded payload, the object is transformed to a JSON object. Otherwise, it is just a string.\nHere some examples:\nExample 4. Structured payload The following JSON object is a typical response from OPA.\nPayload = { \u0026#34;result\u0026#34;: true } Example 5. Unstructured payload Payload = \u0026#34;SomeStringValue\u0026#34; Templating Some pipeline mechanisms support templating using Golang Text Templates. To ease the usage, all sprig functions, except env and expandenv, as well as an urlenc function are available. Latter is handy if you need to generate request body or query parameters e.g. for communication with further systems. Templates can act on all objects described above (Subject, Request and Payload). Which exactly are supported is mechanism specific.\nExample 6. Template, rendering a JSON object Imagine, we have a POST request for the URL http://foobar.baz/zab?foo=bar, with a header X-Foo set to bar value, for which heimdall was able to identify a subject, with ID=foo and which Attributes contain an entry email: foo@bar, then you can generate a JSON object with this information with the following template:\n{ \u0026#34;subject_id\u0026#34;: {{ quote .Subject.ID }}, \u0026#34;email\u0026#34;: {{ quote .Subject.Attributes.email }}, \u0026#34;request_url\u0026#34;: {{ quote .Request.URL }}, \u0026#34;foo_value\u0026#34;: {{ index .Request.URL.Query.foo 0 | quote }} \u0026#34;request_method\u0026#34;: {{ quote .Request.Method }}, \u0026#34;x_foo_value\u0026#34;: {{ .Request.Header \u0026#34;X-Foo\u0026#34; | quote }} } Please note how the access to the foo query parameter is done. Since .Request.URL.Query.foo returns an array of strings, the first element is taken to render the value for the foo_value key.\nThis will result in the following JSON object:\n{ \u0026#34;subject_id\u0026#34;: \u0026#34;foo\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;foo@bar.baz\u0026#34;, \u0026#34;request_url\u0026#34;: \u0026#34;http://foobar.baz/zab?foo=bar\u0026#34;, \u0026#34;foo_value\u0026#34;: \u0026#34;bar\u0026#34;, \u0026#34;request_method\u0026#34;: \u0026#34;POST\u0026#34;, \u0026#34;x_foo_value\u0026#34;: \u0026#34;bar\u0026#34; } You can find further examples as part of mechanism descriptions, supporting templating.\nExpressions Expressions can be used to execute authorization logic. As of today only CEL is supported as expression language. Which of the evaluation objects are available to the expression depends on the mechanism.\nSome examples:\nExample 7. Evaluate Payload object Given the following Payload object\nPayload = { \u0026#34;result\u0026#34;: true } a CEL expression to check the result attribute is set to true, would look as follows:\nPayload.result == true or even simpler:\nPayload.result Example 8. Check whether the user is member of the admin group has(Subject.Attributes.groups) \u0026amp;\u0026amp; Subject.Attributes.groups.exists(g, g == \u0026#34;admin\u0026#34;) ","description":"","html_content":"\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eAll mechanisms supported by heimdall fall into following categories:\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"ulist\"\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"/docs/configuration/rules/pipeline_mechanisms/authenticators/\"\u003eAuthenticators\u003c/a\u003e, which inspect HTTP requests for presence of authentication objects, like e.g. the presence of a specific cookie. If such objects exist, authenticators verify the related authentication status and obtain information about the corresponding subject. A subject, could be a user who tries to use particular functionality of the upstream service, a machine (if you have machine-2-machine interaction), or something different. Authenticators ensure the subject is authenticated and the information available about it is valid.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"/docs/configuration/rules/pipeline_mechanisms/authorizers/\"\u003eAuthorizers\u003c/a\u003e, which ensure that the subject obtained via an authenticator has the required permissions to submit the given HTTP request and thus to execute the corresponding logic in the upstream service. E.g. a specific endpoint of the upstream service might only be accessible to a \u0026#34;user\u0026#34; from the \u0026#34;admin\u0026#34; group, or to an HTTP request if a specific HTTP header is set.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"/docs/configuration/rules/pipeline_mechanisms/contextualizers/\"\u003eContextualizers\u003c/a\u003e, which enrich the information about the subject obtained via an authenticator with further contextual information, required either by the upstream service itself or an authorizer. This can be handy if the actual authentication system doesn’t have all information about the subject (which is usually the case in microservice architectures), or if dynamic information about the subject, like the current location based on the IP address, is required.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"/docs/configuration/rules/pipeline_mechanisms/unifiers/\"\u003eUnifiers\u003c/a\u003e, which finalize the successful execution of the pipeline and unify the available information about the subject by transforming it into a format expected, respectively required by the upstream service. This ranges from adding a query parameter, to a structured JWT in a specific header.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"/docs/configuration/rules/pipeline_mechanisms/error_handlers/\"\u003eError Handlers\u003c/a\u003e, which are responsible for execution of logic if any of the mechanisms described above fail. These range from a simple error response to the client, which sent the request, to sophisticated ones, supporting complex logic and redirects.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect1\"\u003e\n\u003ch2 id=\"_general_configuration\"\u003eGeneral Configuration\u003c/h2\u003e\n\u003cdiv class=\"sectionbody\"\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eAll of the above said mechanisms must be configured in the \u003ccode\u003emechanisms\u003c/code\u003e section of heimdall’s \u003ccode\u003erules\u003c/code\u003e configuration property. Only those mechanisms, which have been configured, can then be (re-)used by rules.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"yaml\"\u003e\u003cspan style=\"color: #a6e22e\"\u003erules\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003emechanisms\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003eauthenticators\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n      \u003cspan style=\"color: #e6db74\"\u003e\u0026lt;list of authenticators\u0026gt;\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003eauthorizers\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n      \u003cspan style=\"color: #e6db74\"\u003e\u0026lt;list of authorizers\u0026gt;\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003econtextualizers\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n      \u003cspan style=\"color: #e6db74\"\u003e\u0026lt;list of contextualizers\u0026gt;\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003eunifiers\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n      \u003cspan style=\"color: #e6db74\"\u003e\u0026lt;list of unifiers\u0026gt;\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003eerror_handlers\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n      \u003cspan style=\"color: #e6db74\"\u003e\u0026lt;list of error handlers\u0026gt;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eEach mechanism configuration entry must contain at least the following properties:\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"ulist\"\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003eid\u003c/code\u003e - The unique identifier of the mechanism. Identifiers are used to reference the required mechanism within a rule. You can choose whatever identifier, you want. It is just a name. It must however be unique across all defined mechanisms of a particular mechanism category (like authenticator, authorizer, etc.).\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003etype\u003c/code\u003e - The specific type of the mechanism.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eDepending on the mechanism type, there can be an additional \u003ccode\u003econfig\u003c/code\u003e property, which then holds the mechanism’s specific configuration.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eEvery mechanism type can be configured as many times as needed. However, for those, which don’t have a configuration, it doesn’t really make sense, as all of them would behave the same way.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eFor example, your authenticator definitions could look like this:\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"yaml\"\u003e\u003cspan style=\"color: #a6e22e\"\u003erules\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003emechanisms\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003eauthenticators\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n    \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003eid\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003efoo\u003c/span\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003etype\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ebar\u003c/span\u003e\n    \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003eid\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ebaz\u003c/span\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003etype\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ebla\u003c/span\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003econfig\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n        \u003cspan style=\"color: #a6e22e\"\u003ebla\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ebar\u003c/span\u003e\n    \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003eid\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ezab\u003c/span\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003etype\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ebar\u003c/span\u003e\n    \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003eid\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eoof\u003c/span\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003etype\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ebla\u003c/span\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003econfig\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n        \u003cspan style=\"color: #a6e22e\"\u003ebar\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ebla\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThe above snippet configures two instances of an imaginary authenticator of a type \u003ccode\u003ebar\u003c/code\u003e, made available for usage in rules via ids \u003ccode\u003efoo\u003c/code\u003e and \u003ccode\u003ezab\u003c/code\u003e, as well as two instances of an imaginary authenticator of a type \u003ccode\u003ebla\u003c/code\u003e, made available for usage in rule via ids \u003ccode\u003ebaz\u003c/code\u003e and \u003ccode\u003eoof\u003c/code\u003e. The \u003ccode\u003ebaz\u003c/code\u003e and \u003ccode\u003eoof\u003c/code\u003e authenticators are different, as they are configured differently, but \u003ccode\u003efoo\u003c/code\u003e and \u003ccode\u003ezab\u003c/code\u003e authenticators do not have any configuration. So, they behave the same way and there is actually no need to define two instances of them.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eIn simplest case a rule will just reuse mechanisms in its pipeline. In more complex cases a rule can reconfigure parts of it (More about rules configuration can be found \u003ca href=\"/docs/configuration/rules/configuration/\"\u003ehere\u003c/a\u003e). Which parts can be reconfigured are mechanism specific and described in the mechanism specific documentation. Reconfiguration is always limited to the particular rule pipeline and does not affect other rules.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eHere is an example which configures a couple of mechanisms:\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"yaml\"\u003e\u003cspan style=\"color: #a6e22e\"\u003erules\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003emechanisms\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003eauthenticators\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n    \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003eid\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eanon_authn\u003c/span\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003etype\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eanonymous\u003c/span\u003e\n    \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003eid\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eopaque_auth_token_authn\u003c/span\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003etype\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eoauth2_introspection\u003c/span\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003econfig\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n        \u003cspan style=\"color: #a6e22e\"\u003eintrospection_endpoint\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n          \u003cspan style=\"color: #a6e22e\"\u003eurl\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ehttp://hydra:4445/oauth2/introspect\u003c/span\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003eassertions\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n        \u003cspan style=\"color: #a6e22e\"\u003eissuers\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n          \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ehttp://127.0.0.1:4444/\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003eauthorizers\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n    \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003eid\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003edeny_all_authz\u003c/span\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003etype\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003edeny\u003c/span\u003e\n    \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003eid\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003elocal_authz\u003c/span\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003etype\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ecel\u003c/span\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003econfig\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n        \u003cspan style=\"color: #a6e22e\"\u003eexpressions\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n          \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003eexpression\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n              \u003cspan style=\"color: #e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003emanager\u0026#34;\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ein Subject.Attributes.groups\u003c/span\u003e\n            \u003cspan style=\"color: #a6e22e\"\u003emessage\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003euser is not in the expected group\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003econtextualizers\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n    \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003eid\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003egroup_manager\u003c/span\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003etype\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003egeneric\u003c/span\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003econfig\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n        \u003cspan style=\"color: #a6e22e\"\u003eendpoint\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n          \u003cspan style=\"color: #a6e22e\"\u003eurl\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ehttp://group-manager.local/groups\u003c/span\u003e\n          \u003cspan style=\"color: #a6e22e\"\u003emethod\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eGET\u003c/span\u003e\n        \u003cspan style=\"color: #a6e22e\"\u003eforward_headers\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n          \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eAuthorization\u003c/span\u003e\n        \u003cspan style=\"color: #a6e22e\"\u003ecache_ttl\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e1m\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003eunifiers\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n    \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003eid\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ejwt_unifier\u003c/span\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003etype\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ejwt\u003c/span\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003econfig\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n        \u003cspan style=\"color: #a6e22e\"\u003ettl\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e5m\u003c/span\u003e\n        \u003cspan style=\"color: #a6e22e\"\u003eclaims\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e|\u003c/span\u003e\n            \u003cspan style=\"color: #e6db74\"\u003e{\u003c/span\u003e\n              \u003cspan style=\"color: #e6db74\"\u003e{{ $user_name := .Subject.Attributes.identity.user_name -}}\u003c/span\u003e\n              \u003cspan style=\"color: #e6db74\"\u003e\u0026#34;email\u0026#34;: {{ quote .Subject.Attributes.identity.email }},\u003c/span\u003e\n              \u003cspan style=\"color: #e6db74\"\u003e\u0026#34;email_verified\u0026#34;: {{ .Subject.Attributes.identity.email_verified }},\u003c/span\u003e\n              \u003cspan style=\"color: #e6db74\"\u003e{{ if $user_name -}}\u003c/span\u003e\n              \u003cspan style=\"color: #e6db74\"\u003e\u0026#34;name\u0026#34;: {{ quote $user_name }}\u003c/span\u003e\n              \u003cspan style=\"color: #e6db74\"\u003e{{ else -}}\u003c/span\u003e\n              \u003cspan style=\"color: #e6db74\"\u003e\u0026#34;name\u0026#34;: {{ quote $email }}\u003c/span\u003e\n              \u003cspan style=\"color: #e6db74\"\u003e{{ end -}}\u003c/span\u003e\n            \u003cspan style=\"color: #e6db74\"\u003e}\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003eerror_handlers\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n    \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003eid\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003edefault\u003c/span\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003etype\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003edefault\u003c/span\u003e\n    \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003eid\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eauthenticate_with_kratos\u003c/span\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003etype\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eredirect\u003c/span\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003econfig\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n        \u003cspan style=\"color: #a6e22e\"\u003eto\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ehttp://127.0.0.1:4433/self-service/login/browser?return_to={{ .Request.URL | urlenc }}\u003c/span\u003e\n        \u003cspan style=\"color: #a6e22e\"\u003ewhen\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n          \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003eerror\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n              \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003etype\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eauthentication_error\u003c/span\u003e\n              \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003etype\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eauthorization_error\u003c/span\u003e\n            \u003cspan style=\"color: #a6e22e\"\u003erequest_headers\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n              \u003cspan style=\"color: #a6e22e\"\u003eAccept\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n                \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003etext/html\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect1\"\u003e\n\u003ch2 id=\"_evaluation_objects\"\u003eEvaluation Objects\u003c/h2\u003e\n\u003cdiv class=\"sectionbody\"\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eSome mechanisms support, respectively require access to different types of objects they work on, e.g. to render a header with specific values, or to check whether some expectations apply. Following objects are available and have the following structure:\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect2\"\u003e\n\u003ch3 id=\"_subject\"\u003eSubject\u003c/h3\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThis object contains the information about the authenticated subject and has the following attributes:\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"ulist\"\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003eID\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003estring\u003c/em\u003e\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThe identifier of the subject. This value is set by the authenticator, which was able to authenticate the subject.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003eAttributes\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003emap\u003c/em\u003e\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eContains all attributes, which are known about the subject. The content is initially set by the authenticator, which was able to authenticate the subject. Mechanisms following the authenticator in a rule pipeline can update it, but cannot override any entries.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eEach object of this type can be thought as a JSON object. Here some examples:\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"exampleblock\"\u003e\n\u003cdiv class=\"title\"\u003eExample 1. Subject created by an Anonymous Authenticator\u003c/div\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"javascript\"\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003eSubject\u003c/span\u003e \u003cspan style=\"color: #f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e{\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003eID\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003eanonymous\u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003eAttributes\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e{}\u003c/span\u003e\n\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"exampleblock\"\u003e\n\u003cdiv class=\"title\"\u003eExample 2. Possible Subject created by an OAuth2 Authenticator\u003c/div\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"javascript\"\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003eSubject\u003c/span\u003e \u003cspan style=\"color: #f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e{\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003eID\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003efoobar\u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003eAttributes\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e{\u003c/span\u003e\n    \u003cspan style=\"color: #e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003esub\u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003efoobar\u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\n    \u003cspan style=\"color: #e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003eexp\u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e1670600805\u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\n    \u003cspan style=\"color: #e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003ejti\u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e7b91ed8a-0251-4e02-8d51-9792785851e8\u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\n    \u003cspan style=\"color: #e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003eiat\u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e1670600305\u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\n    \u003cspan style=\"color: #e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003eiss\u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003ehttp://testauthserver.local\u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\n    \u003cspan style=\"color: #e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003enbf\u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e1670600305\u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\n    \u003cspan style=\"color: #e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003eextra\u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e{\u003c/span\u003e\n        \u003cspan style=\"color: #e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003efoo\u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e[\u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003ebar\u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003ebaz\u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e]\u003c/span\u003e\n    \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e}\u003c/span\u003e\n  \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e}\u003c/span\u003e\n\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect2\"\u003e\n\u003ch3 id=\"_request\"\u003eRequest\u003c/h3\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThis object contains information about the request handled by heimdall and has the following attributes and methods:\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"ulist\"\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003eMethod\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003estring\u003c/em\u003e\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThe HTTP method used, like \u003ccode\u003eGET\u003c/code\u003e, \u003ccode\u003ePOST\u003c/code\u003e, etc.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003eURL\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003eURL\u003c/em\u003e\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThe URL of the matched request. This object has the following properties and methods:\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"ulist\"\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003eScheme\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003estring\u003c/em\u003e\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThe HTTP scheme part of the url\u003c/p\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003eHost\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003estring\u003c/em\u003e\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThe host part of the url\u003c/p\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003ePath\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003estring\u003c/em\u003e\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThe path part of the url\u003c/p\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003eRawQuery\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003estring\u003c/em\u003e\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThe raw query part of the url.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003eString()\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003emethod\u003c/em\u003e\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThis method returns the URL as valid URL string of a form \u003ccode\u003escheme:host/path?query\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003eQuery()\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003emethod\u003c/em\u003e\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThe parsed query with each key-value pair being a string to array of strings mapping.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003eClientIP\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003estring array\u003c/em\u003e\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThe list of IP addresses the request passed through with the first entry being the ultimate client of the request. Only available if heimdall is configured to trust the client, sending this information, e.g. in the \u003ccode\u003eX-Forwarded-From\u003c/code\u003e header (see e.g. Decision Service \u003ca href=\"/docs/configuration/services/decision/#_trusted_proxies\"\u003etrusted_proxies\u003c/a\u003e configuration for more details).\u003c/p\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003eHeader(name)\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003emethod\u003c/em\u003e,\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThis method expects the name of a header as input and returns the value of it as \u003ccode\u003estring\u003c/code\u003e. If the header is not present in the HTTP request an empty string (\u003ccode\u003e\u0026#34;\u0026#34;\u003c/code\u003e) is returned.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003eCookie(name)\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003emethod\u003c/em\u003e,\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThis method expects the name of a cookie as input and returns the value of it as \u003ccode\u003estring\u003c/code\u003e. If the cookie is not present in the HTTP request an empty string (\u003ccode\u003e\u0026#34;\u0026#34;\u003c/code\u003e) is returned.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eHere is an example:\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"exampleblock\"\u003e\n\u003cdiv class=\"title\"\u003eExample 3. Example request object\u003c/div\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"javascript\"\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003eRequest\u003c/span\u003e \u003cspan style=\"color: #f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e{\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003eMethod\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003eGET\u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003eUrl\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e{\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003eScheme\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003ehttps\u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003eHost\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003elocalhost\u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003ePath\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e/test\u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003eRawQuery\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003ebaz=zab\u0026amp;baz=bar\u0026amp;foo=bar\u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;\u003c/span\u003e\n  \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e},\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003eClientIP\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e[\u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e127.0.0.1\u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e10.10.10.10\u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e]\u003c/span\u003e\n\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect2\"\u003e\n\u003ch3 id=\"_payload\"\u003ePayload\u003c/h3\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThis object represents the contents of a payload, like the request body or a response body. The contents depend on the MIME-Type of the payload. For \u003ccode\u003ejson\u003c/code\u003e, \u003ccode\u003eyaml\u003c/code\u003e or \u003ccode\u003ex-www-form-urlencoded\u003c/code\u003e encoded payload, the object is transformed to a JSON object. Otherwise, it is just a string.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eHere some examples:\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"exampleblock\"\u003e\n\u003cdiv class=\"title\"\u003eExample 4. Structured payload\u003c/div\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThe following JSON object is a typical response from OPA.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"javascript\"\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003ePayload\u003c/span\u003e \u003cspan style=\"color: #f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e{\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003eresult\u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #66d9ef\"\u003etrue\u003c/span\u003e \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"exampleblock\"\u003e\n\u003cdiv class=\"title\"\u003eExample 5. Unstructured payload\u003c/div\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"javascript\"\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003ePayload\u003c/span\u003e \u003cspan style=\"color: #f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003eSomeStringValue\u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect1\"\u003e\n\u003ch2 id=\"_templating\"\u003eTemplating\u003c/h2\u003e\n\u003cdiv class=\"sectionbody\"\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eSome pipeline mechanisms support templating using \u003ca href=\"https://golang.org/pkg/text/template/\"\u003eGolang Text Templates\u003c/a\u003e. To ease the usage, all \u003ca href=\"http://masterminds.github.io/sprig/\"\u003esprig\u003c/a\u003e functions, except \u003ccode\u003eenv\u003c/code\u003e and \u003ccode\u003eexpandenv\u003c/code\u003e, as well as an \u003ccode\u003eurlenc\u003c/code\u003e function are available. Latter is handy if you need to generate request body or query parameters e.g. for communication with further systems. Templates can act on all objects described above (\u003ca href=\"#_subject\"\u003eSubject\u003c/a\u003e, \u003ca href=\"#_request\"\u003eRequest\u003c/a\u003e and \u003ca href=\"#_payload\"\u003ePayload\u003c/a\u003e). Which exactly are supported is mechanism specific.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"exampleblock\"\u003e\n\u003cdiv class=\"title\"\u003eExample 6. Template, rendering a JSON object\u003c/div\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eImagine, we have a \u003ccode\u003ePOST\u003c/code\u003e request for the URL \u003ccode\u003ehttp://foobar.baz/zab?foo=bar\u003c/code\u003e, with a header \u003ccode\u003eX-Foo\u003c/code\u003e set to \u003ccode\u003ebar\u003c/code\u003e value, for which heimdall was able to identify a subject, with \u003ccode\u003eID=foo\u003c/code\u003e and which \u003ccode\u003eAttributes\u003c/code\u003e contain an entry \u003ccode\u003eemail: foo@bar\u003c/code\u003e, then you can generate a JSON object with this information with the following template:\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"gotemplate\"\u003e{\n  \u0026#34;subject_id\u0026#34;: {{ quote .Subject.ID }},\n  \u0026#34;email\u0026#34;: {{ quote .Subject.Attributes.email }},\n  \u0026#34;request_url\u0026#34;: {{ quote .Request.URL }},\n  \u0026#34;foo_value\u0026#34;: {{ index .Request.URL.Query.foo 0 | quote }}\n  \u0026#34;request_method\u0026#34;: {{ quote .Request.Method }},\n  \u0026#34;x_foo_value\u0026#34;: {{ .Request.Header \u0026#34;X-Foo\u0026#34; | quote }}\n}\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003ePlease note how the access to the \u003ccode\u003efoo\u003c/code\u003e query parameter is done. Since \u003ccode\u003e.Request.URL.Query.foo\u003c/code\u003e returns an array of strings, the first element is taken to render the value for the \u003ccode\u003efoo_value\u003c/code\u003e key.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThis will result in the following JSON object:\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"json\"\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e{\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\n    \u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;subject_id\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;foo\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\n    \u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;email\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;foo@bar.baz\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\n    \u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;request_url\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;http://foobar.baz/zab?foo=bar\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\n    \u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;foo_value\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;bar\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\n    \u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;request_method\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;POST\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\n    \u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;x_foo_value\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;bar\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\n\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eYou can find further examples as part of mechanism descriptions, supporting templating.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect1\"\u003e\n\u003ch2 id=\"_expressions\"\u003eExpressions\u003c/h2\u003e\n\u003cdiv class=\"sectionbody\"\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eExpressions can be used to execute authorization logic. As of today only \u003ca href=\"https://github.com/google/cel-spec\"\u003eCEL\u003c/a\u003e is supported as expression language. Which of the \u003ca href=\"#_evaluation_objects\"\u003eevaluation objects\u003c/a\u003e are available to the expression depends on the mechanism.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eSome examples:\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"exampleblock\"\u003e\n\u003cdiv class=\"title\"\u003eExample 7. Evaluate Payload object\u003c/div\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eGiven the following Payload object\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"javascript\"\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003ePayload\u003c/span\u003e \u003cspan style=\"color: #f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e{\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003eresult\u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #66d9ef\"\u003etrue\u003c/span\u003e \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003ea CEL expression to check the \u003ccode\u003eresult\u003c/code\u003e attribute is set to \u003ccode\u003etrue\u003c/code\u003e, would look as follows:\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"cel\"\u003ePayload.result == true\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eor even simpler:\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"cel\"\u003ePayload.result\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"exampleblock\"\u003e\n\u003cdiv class=\"title\"\u003eExample 8. Check whether the user is member of the admin group\u003c/div\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"cel\"\u003ehas(Subject.Attributes.groups) \u0026amp;\u0026amp;\n   Subject.Attributes.groups.exists(g, g == \u0026#34;admin\u0026#34;)\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n","sections":["Rules","Pipeline Mechanisms"],"tags":null,"title":"Mechanisms Overview","url":"/docs/configuration/rules/pipeline_mechanisms/overview/"},{"categories":null,"content":" Authenticators inspect HTTP requests for presence of authentication objects, like e.g. the presence of a specific cookie. If such objects exist, authenticators verify the related authentication status and obtain information about the corresponding subject. A subject, could be a user, trying to use particular functionality of the upstream service, a machine (if you have machine-2-machine interaction), or something different. Authenticators ensure the subject is authenticated and the information available about it is valid.\nAuthenticator Types The following sections describe the available authenticator types in more detail.\nNoop As the name implies, this authenticator does nothing. It tells heimdall to bypass the authentication. This authenticator type does not create a subject object, which is required by the most other pipeline mechanisms. This authenticator type also doesn’t have any configuration options.\nTo enable the usage of this authenticator, you have to set the type property to noop.\nExample 1. Configure Noop authenticator id: foo type: noop Unauthorized This authenticator rejects all requests as unauthenticated (on HTTP response code level this is then mapped to 401 Unauthorized, hence the type name). It basically stops the successful execution of the pipeline resulting in the execution of the error handlers. This authenticator type doesn’t have any configuration options.\nTo enable the usage of this authenticator, you have to set the type property to unauthorized.\nExample 2. Configure Unauthorized authenticator id: foo type: unauthorized Anonymous This authenticator just creates a Subject object and sets its ID to anonymous without doing anything else. You can overwrite the value of subject’s id by using the optional config property.\nTo enable the usage of this authenticator, you have to set the type property to anonymous.\nConfiguration using the config property is optional. Following properties are available:\nsubject: string (optional, overridable)\nEnables setting the ID of the created Subject object to a custom value.\nExample 3. Configuration of Anonymous authenticator id: foo type: anonymous config: subject: anon Basic Auth This authenticator verifies the provided credentials according to the HTTP \u0026#34;Basic\u0026#34; authentication scheme, described in RFC 7617. It does however not challenge the authentication, it only verifies the provided credentials and sets the Subject ID to the configured user identifier if the authentication succeeds. Otherwise, it raises an error, resulting in the execution of the configured error handlers. The \u0026#34;WWW Authenticate\u0026#34; error handler mechanism can for example be used if the corresponding challenge is required.\nTo enable the usage of this authenticator, you have to set the type property to basic_auth.\nConfiguration using the config property is mandatory. Following properties are available:\nuser_id: string (mandatory, overridable)\nThe identifier of the subject to be verified.\npassword: string (mandatory, overridable)\nThe password of the subject to be verified.\nallow_fallback_on_error: boolean (optional, overridable)\nIf set to true, allows the pipeline to fall back to the next authenticator in the pipeline if this one fails to verify the credentials. Defaults to false.\nExample 4. Configuration of Basic Auth authenticator id: foo type: basic_auth config: user_id: bar password: baz Generic This authenticator is kind of a Swiss knife and can do a lot depending on the given configuration. It verifies the authentication status of the subject by making use of values available in cookies, headers, or query parameters of the HTTP request and communicating with the actual authentication system to perform the verification of the subject authentication status on the one hand, and to get the information about the subject on the other hand. There is however one limitation: it can only deal with JSON responses.\nTo enable the usage of this authenticator, you have to set the type property to generic.\nConfiguration using the config property is mandatory. Following properties are available:\nidentity_info_endpoint: Endpoint (mandatory, not overridable)\nThe endpoint to communicate to for the actual subject authentication status verification purpose. At least the url must be configured. If you don’t configure method, HTTP POST will be used. The Accept header is set to application/json by default. You can overwrite these setting if required. Don’t forget - this authenticator supports only JSON responses.\nauthentication_data_source: Authentication Data Source (mandatory, not overridable)\nWhere to extract the authentication data from the request. This authenticator will use the matched authentication data source as is while sending it to the identity_info_endpoint.\nsubject: Subject (mandatory, not overridable)\nWhere to extract the Subject information from the identity info endpoint response.\ncache_ttl: Duration (optional, overridable)\nHow long to cache the response. If not set, response caching if disabled. The cache key is calculated from the identity_info_endpoint configuration and the actual authentication data value.\nallow_fallback_on_error: boolean (optional, overridable)\nIf set to true, allows the pipeline to fall back to the next authenticator in the pipeline if this one fails to verify the credentials. Defaults to false.\nsession_lifespan: Session Lifespan (optional, not overridable)\nWhere to extract the session validity information form the identity info endpoint response. If the not_after property is specified, the corresponding value from the response is also used for cache ttl calculation to prevent usage of not anymore valid session objects and overwrites the value configured for cache_ttl if the usage of that value would exceed the lifespan of the session object.\nIf you’re configuring the cache_ttl property, it is highly recommended to configure session_lifespan as well to ensure outdated session objects are not used for subsequent requests to heimdall. Usage of session_lifespan is recommended anyway to enable time based validation of the response from the identity info endpoint. Example 5. Configuration of Generic authenticator to work with session cookies This example shows how to configure this authenticator to work with an authentication system, which issues a cookie upon successful user authentication to maintain the authentication state. To reduce the communication overhead, it also makes use of cache_ttl to cache the response for 5 minutes if that time frame does not exceed the actual validity of the session represented by the cookie.\nid: session_cookie type: generic config: identity_info_endpoint: http://my-auth.system/sessions/whoami authentication_data_source: - cookie: my_session subject: id: \u0026#34;identity.id\u0026#34; cache_ttl: 5m session_lifespan: active: active issued_at: issued_at not_before: authenticated_at not_after: expires_at time_format: \u0026#34;2006-01-02T15:04:05.999999Z07\u0026#34; validity_leeway: 10s This example does also show how an endpoint can be configured by just specifying the URL as string, which is the simplest way for endpoint configuration.\nExample 6. Configuration of Generic authenticator to work with a Bearer token This example shows how to configure this authenticator to work with an authentication system, which issues a Bearer token upon successful user authentication. To reduce the communication overhead, it also makes use of cache_ttl to cache the response for 5 minutes if it does not exceed the validity of the information present in the response from the used endpoint.\nIn this example we configure the Generic authenticator mechanism to use the GET method instead of the default POST for sending the bearer token to the authentication system for verification purposes and also to authenticate using HTTP basic auth schema. According to the below configuration, the Bearer token is located in the X-Custom-Bearer-Token header, which as also used as is while calling the http://my-auth.system/introspect endpoint.\nid: bearer_token type: generic config: identity_info_endpoint: url: http://my-auth.system/introspect method: GET auth: type: basic_auth config: user: Heimdall password: super-secure authentication_data_source: - header: X-Custom-Bearer-Token schema: Bearer subject: id: \u0026#34;sub\u0026#34; cache_ttl: 5m session_lifespan: active: active issued_at: iat not_before: nbf not_after: exp validity_leeway: 10s Usually, Bearer tokens are issued by an OAuth2 auth provider and there is a need to verify not only the validity of such, but also a couple of claims. This can be achieved by a Local Authorizer, but there is also a special purpose OAuth2 Introspection authenticator type, which supports asserting all security relevant claims in just one place.\nOAuth2 Introspection This authenticator handles requests that have Bearer token in the HTTP Authorization header (Authorization: Bearer \u0026lt;token\u0026gt;), in the access_token query parameter or the access_token body parameter (latter, if the body is of application/x-www-form-urlencoded MIME type). It then uses OAuth 2.0 Token Introspection endpoint to check if the token is valid. The validation includes at least the verification of the status and the time validity. That is if the token is still active and whether it has been issued in an acceptable time frame. Latter can be adjusted by specifying a leeway. All other validation options can and should be configured.\nTo enable the usage of this authenticator, you have to set the type property to oauth2_introspection.\nConfiguration using the config property is mandatory. Following properties are available:\nintrospection_endpoint: Endpoint (mandatory, not overridable)\nThe introspection endpoint of the OAuth2 authorization provider. At least the url must be configured. There is no need to define the method property or setting the Content-Type or the Accept header. These are set by default to the values required by the OAuth 2.0 Token Introspection RFC. You can however override these while configuring the authenticator.\ntoken_source: Authentication Data Source (optional, not overridable)\nWhere to get the access token from. Defaults to retrieve it from the Authorization header, the access_token query parameter or the access_token body parameter (latter, if the body is of application/x-www-form-urlencoded MIME type).\nassertions: Assertions (mandatory, overridable)\nConfigures the required claim assertions. Overriding on rule level is possible even partially. Those parts of the assertion, which have not been overridden are taken from the prototype configuration.\nsubject: Subject (optional, not overridable)\nWhere to extract the Subject information from the introspection endpoint response. If not configured sub is used to extract the subject ID and all attributes from the introspection endpoint response are made available as Attributes.\ncache_ttl: Duration (optional, overridable)\nHow long to cache the response. If not set, caching of the introspection response is based on the available token expiration information. To disable caching, set it to 0s. If you set the ttl to a custom value \u0026gt; 0, the expiration time (if available) of the token will be considered. The cache key is calculated from the introspection_endpoint configuration and the value of the access token.\nallow_fallback_on_error: boolean (optional, overridable)\nIf set to true, allows the pipeline to fall back to the next authenticator in the pipeline if this one fails to verify the credentials. Defaults to false.\nExample 7. Minimal possible configuration id: at_opaque type: oauth2_introspection config: introspection_endpoint: url: http://hydra:4445/oauth2/introspect assertions: issuers: - http://127.0.0.1:4444/ JWT As the OAuth2 Introspection authenticator, this authenticator handles requests that have a Bearer token in the Authorization header, in a different header, a query parameter or a body parameter as well. Unlike the OAuth2 Introspection authenticator it expects the token to be a JSON Web Token (JWT) and verifies it according RFC 7519, Section 7.2. It does however not support encrypted payloads and nested JWTs. In addition to this, validation includes the verification of the time validity. Latter can be adjusted by specifying a leeway. All other validation options can and should be configured.\nTo enable the usage of this authenticator, you have to set the type property to jwt.\nConfiguration using the config property is mandatory. Following properties are available:\njwks_endpoint: Endpoint (mandatory, not overridable)\nThe JWKS endpoint, this authenticator retrieves the key material in a format specified in RFC 7519 from for JWT signature verification purposes. The url must be configured. By default method is set to GET and the HTTP Accept header to application/json\njwt_source: Authentication Data Source (optional, not overridable)\nWhere to get the access token from. Defaults to retrieve it from the Authorization header, the access_token query parameter or the access_token body parameter (latter, if the body is of application/x-www-form-urlencoded MIME type).\nassertions: Assertions (mandatory, overridable)\nConfigures the required claim assertions. Overriding on rule level is possible even partially. Those parts of the assertion, which have not been overridden are taken from the prototype configuration.\nsubject: Subject (optional, not overridable)\nWhere to extract the subject id from the JWT, as well as which attributes to use. If not configured sub is used to extract the subject id and all attributes from the JWT payload are made available as attributes of the subject.\ncache_ttl: Duration (optional, overridable)\nHow long to cache the key from the JWKS response, which was used for signature verification purposes. If not set, heimdall will cache this key for 10 minutes and not call JWKS endpoint again if the same kid is referenced in an JWT and same JWKS endpoint is used. The cache key is calculated from the jwks_endpoint configuration and the kid referenced in the JWT.\nallow_fallback_on_error: boolean (optional, overridable)\nIf set to true, allows the pipeline to fall back to the next authenticator in the pipeline if this one fails to verify the credentials. Defaults to false.\nvalidate_jwk: boolean (optional, not overridable)\nEnables or disables the verification of the JWK certificate used for JWT signature verification purposes. Effective only if the JWK contains a certificate. The verification happens according to RFC 5280, section 6.1 and also includes the check, that the certificate is allowed to be used for signature verification purposes. Revokation check is not supported. Defaults to true.\ntrust_store: string (optional, not overridable)\nThe path to a PEM file containing the trust anchors, to be used for the JWK certificate validation. Defaults to system trust store.\nIf a JWT does not reference a kid, heimdall always fetches a JWKS from the configured endpoint (so no caching is done) and iterates over the received keys until one matches. If none matches, the authenticator fails. Example 8. Minimal possible configuration id: at_jwt type: jwt config: jwks_endpoint: url: http://hydra:4444/.well-known/jwks.json assertions: issuers: - http://127.0.0.1:4444/ ","description":"","html_content":"\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eAuthenticators inspect HTTP requests for presence of authentication objects, like e.g. the presence of a specific cookie. If such objects exist, authenticators verify the related authentication status and obtain information about the corresponding \u003ca href=\"/docs/configuration/rules/pipeline_mechanisms/overview/#_subject\"\u003esubject\u003c/a\u003e. A subject, could be a user, trying to use particular functionality of the upstream service, a machine (if you have machine-2-machine interaction), or something different. Authenticators ensure the subject is authenticated and the information available about it is valid.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect1\"\u003e\n\u003ch2 id=\"_authenticator_types\"\u003eAuthenticator Types\u003c/h2\u003e\n\u003cdiv class=\"sectionbody\"\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThe following sections describe the available authenticator types in more detail.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect2\"\u003e\n\u003ch3 id=\"_noop\"\u003eNoop\u003c/h3\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eAs the name implies, this authenticator does nothing. It tells heimdall to bypass the authentication. This authenticator type does not create a subject object, which is required by the most other pipeline mechanisms. This authenticator type also doesn’t have any configuration options.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eTo enable the usage of this authenticator, you have to set the \u003ccode\u003etype\u003c/code\u003e property to \u003ccode\u003enoop\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"exampleblock\"\u003e\n\u003cdiv class=\"title\"\u003eExample 1. Configure Noop authenticator\u003c/div\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"yaml\"\u003e\u003cspan style=\"color: #a6e22e\"\u003eid\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003efoo\u003c/span\u003e\n\u003cspan style=\"color: #a6e22e\"\u003etype\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003enoop\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect2\"\u003e\n\u003ch3 id=\"_unauthorized\"\u003eUnauthorized\u003c/h3\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThis authenticator rejects all requests as unauthenticated (on HTTP response code level this is then mapped to \u003ccode\u003e401 Unauthorized\u003c/code\u003e, hence the type name). It basically stops the successful execution of the pipeline resulting in the execution of the error handlers. This authenticator type doesn’t have any configuration options.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eTo enable the usage of this authenticator, you have to set the \u003ccode\u003etype\u003c/code\u003e property to \u003ccode\u003eunauthorized\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"exampleblock\"\u003e\n\u003cdiv class=\"title\"\u003eExample 2. Configure Unauthorized authenticator\u003c/div\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"yaml\"\u003e\u003cspan style=\"color: #a6e22e\"\u003eid\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003efoo\u003c/span\u003e\n\u003cspan style=\"color: #a6e22e\"\u003etype\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eunauthorized\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect2\"\u003e\n\u003ch3 id=\"_anonymous\"\u003eAnonymous\u003c/h3\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThis authenticator just creates a \u003ca href=\"/docs/configuration/rules/pipeline_mechanisms/overview/#_subject\"\u003e\u003ccode\u003eSubject\u003c/code\u003e\u003c/a\u003e object and sets its \u003ccode\u003eID\u003c/code\u003e to \u003ccode\u003eanonymous\u003c/code\u003e without doing anything else. You can overwrite the value of subject’s id by using the optional \u003ccode\u003econfig\u003c/code\u003e property.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eTo enable the usage of this authenticator, you have to set the \u003ccode\u003etype\u003c/code\u003e property to \u003ccode\u003eanonymous\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eConfiguration using the \u003ccode\u003econfig\u003c/code\u003e property is optional. Following properties are available:\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"ulist\"\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003esubject\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003estring\u003c/em\u003e (optional, overridable)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eEnables setting the \u003ccode\u003eID\u003c/code\u003e of the created \u003ca href=\"/docs/configuration/rules/pipeline_mechanisms/overview/#_subject\"\u003e\u003ccode\u003eSubject\u003c/code\u003e\u003c/a\u003e object to a custom value.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\u003cdiv class=\"exampleblock\"\u003e\n\u003cdiv class=\"title\"\u003eExample 3. Configuration of Anonymous authenticator\u003c/div\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"yaml\"\u003e\u003cspan style=\"color: #a6e22e\"\u003eid\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003efoo\u003c/span\u003e\n\u003cspan style=\"color: #a6e22e\"\u003etype\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eanonymous\u003c/span\u003e\n\u003cspan style=\"color: #a6e22e\"\u003econfig\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003esubject\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eanon\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect2\"\u003e\n\u003ch3 id=\"_basic_auth\"\u003eBasic Auth\u003c/h3\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThis authenticator verifies the provided credentials according to the HTTP \u0026#34;Basic\u0026#34; authentication scheme, described in \u003ca href=\"https://datatracker.ietf.org/doc/html/rfc7617\"\u003eRFC 7617\u003c/a\u003e. It does however not challenge the authentication, it only verifies the provided credentials and sets the \u003ca href=\"/docs/configuration/rules/pipeline_mechanisms/overview/#_subject\"\u003e\u003ccode\u003eSubject\u003c/code\u003e\u003c/a\u003e \u003ccode\u003eID\u003c/code\u003e to the configured user identifier if the authentication succeeds. Otherwise, it raises an error, resulting in the execution of the configured error handlers. The \u003ca href=\"/docs/configuration/rules/pipeline_mechanisms/error_handlers/#_www_authenticate\"\u003e\u0026#34;WWW Authenticate\u0026#34;\u003c/a\u003e error handler mechanism can for example be used if the corresponding challenge is required.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eTo enable the usage of this authenticator, you have to set the \u003ccode\u003etype\u003c/code\u003e property to \u003ccode\u003ebasic_auth\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eConfiguration using the \u003ccode\u003econfig\u003c/code\u003e property is mandatory. Following properties are available:\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"ulist\"\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003euser_id\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003estring\u003c/em\u003e (mandatory, overridable)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThe identifier of the subject to be verified.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003epassword\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003estring\u003c/em\u003e (mandatory, overridable)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThe password of the subject to be verified.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003eallow_fallback_on_error\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003eboolean\u003c/em\u003e (optional, overridable)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eIf set to \u003ccode\u003etrue\u003c/code\u003e, allows the pipeline to fall back to the next authenticator in the pipeline if this one fails to verify the credentials. Defaults to \u003ccode\u003efalse\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\u003cdiv class=\"exampleblock\"\u003e\n\u003cdiv class=\"title\"\u003eExample 4. Configuration of Basic Auth authenticator\u003c/div\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"yaml\"\u003e\u003cspan style=\"color: #a6e22e\"\u003eid\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003efoo\u003c/span\u003e\n\u003cspan style=\"color: #a6e22e\"\u003etype\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ebasic_auth\u003c/span\u003e\n\u003cspan style=\"color: #a6e22e\"\u003econfig\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003euser_id\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ebar\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003epassword\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ebaz\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect2\"\u003e\n\u003ch3 id=\"_generic\"\u003eGeneric\u003c/h3\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThis authenticator is kind of a Swiss knife and can do a lot depending on the given configuration. It verifies the authentication status of the subject by making use of values available in cookies, headers, or query parameters of the HTTP request and communicating with the actual authentication system to perform the verification of the subject authentication status on the one hand, and to get the information about the subject on the other hand. There is however one limitation: it can only deal with JSON responses.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eTo enable the usage of this authenticator, you have to set the \u003ccode\u003etype\u003c/code\u003e property to \u003ccode\u003egeneric\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eConfiguration using the \u003ccode\u003econfig\u003c/code\u003e property is mandatory. Following properties are available:\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"ulist\"\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003eidentity_info_endpoint\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003e\u003ca href=\"/docs/configuration/reference/types/#_endpoint\"\u003eEndpoint\u003c/a\u003e\u003c/em\u003e (mandatory, not overridable)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThe endpoint to communicate to for the actual subject authentication status verification purpose. At least the \u003ccode\u003eurl\u003c/code\u003e must be configured. If you don’t configure \u003ccode\u003emethod\u003c/code\u003e, HTTP \u003ccode\u003ePOST\u003c/code\u003e will be used. The \u003ccode\u003eAccept\u003c/code\u003e header is set to \u003ccode\u003eapplication/json\u003c/code\u003e by default. You can overwrite these setting if required. Don’t forget - this authenticator supports only JSON responses.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003eauthentication_data_source\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003e\u003ca href=\"/docs/configuration/reference/types/#_authentication_data_source\"\u003eAuthentication Data Source\u003c/a\u003e\u003c/em\u003e (mandatory, not overridable)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eWhere to extract the authentication data from the request. This authenticator will use the matched authentication data source as is while sending it to the \u003ccode\u003eidentity_info_endpoint\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003esubject\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003e\u003ca href=\"/docs/configuration/reference/types/#_subject\"\u003eSubject\u003c/a\u003e\u003c/em\u003e (mandatory, not overridable)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eWhere to extract the \u003ca href=\"/docs/configuration/rules/pipeline_mechanisms/overview/#_subject\"\u003e\u003ccode\u003eSubject\u003c/code\u003e\u003c/a\u003e information from the identity info endpoint response.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003ecache_ttl\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003e\u003ca href=\"/docs/configuration/reference/types/#_duration\"\u003eDuration\u003c/a\u003e\u003c/em\u003e (optional, overridable)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eHow long to cache the response. If not set, response caching if disabled. The cache key is calculated from the \u003ccode\u003eidentity_info_endpoint\u003c/code\u003e configuration and the actual authentication data value.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003eallow_fallback_on_error\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003eboolean\u003c/em\u003e (optional, overridable)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eIf set to \u003ccode\u003etrue\u003c/code\u003e, allows the pipeline to fall back to the next authenticator in the pipeline if this one fails to verify the credentials. Defaults to \u003ccode\u003efalse\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003esession_lifespan\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003e\u003ca href=\"/docs/configuration/reference/types/#_session_lifespan\"\u003eSession Lifespan\u003c/a\u003e\u003c/em\u003e (optional, not overridable)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eWhere to extract the session validity information form the identity info endpoint response. If the \u003ccode\u003enot_after\u003c/code\u003e property is specified, the corresponding value from the response is also used for cache ttl calculation to prevent usage of not anymore valid session objects and overwrites the value configured for \u003ccode\u003ecache_ttl\u003c/code\u003e if the usage of that value would exceed the lifespan of the session object.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"admonitionblock note\"\u003e\n\u003ctable\u003e\n\u003ctbody\u003e\u003ctr\u003e\n\u003ctd class=\"icon\"\u003e\n\u003ci class=\"fa icon-note\" title=\"Note\"\u003e\u003c/i\u003e\n\u003c/td\u003e\n\u003ctd class=\"content\"\u003e\nIf you’re configuring the \u003ccode\u003ecache_ttl\u003c/code\u003e property, it is highly recommended to configure \u003ccode\u003esession_lifespan\u003c/code\u003e as well to ensure outdated session objects are not used for subsequent requests to heimdall. Usage of \u003ccode\u003esession_lifespan\u003c/code\u003e is recommended anyway to enable time based validation of the response from the identity info endpoint.\n\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\u003cdiv class=\"exampleblock\"\u003e\n\u003cdiv class=\"title\"\u003eExample 5. Configuration of Generic authenticator to work with session cookies\u003c/div\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThis example shows how to configure this authenticator to work with an authentication system, which issues a cookie upon successful user authentication to maintain the authentication state. To reduce the communication overhead, it also makes use of \u003ccode\u003ecache_ttl\u003c/code\u003e to cache the response for 5 minutes if that time frame does not exceed the actual validity of the session represented by the cookie.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"yaml\"\u003e\u003cspan style=\"color: #a6e22e\"\u003eid\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003esession_cookie\u003c/span\u003e\n\u003cspan style=\"color: #a6e22e\"\u003etype\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003egeneric\u003c/span\u003e\n\u003cspan style=\"color: #a6e22e\"\u003econfig\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003eidentity_info_endpoint\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ehttp://my-auth.system/sessions/whoami\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003eauthentication_data_source\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n    \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003ecookie\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003emy_session\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003esubject\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003eid\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003eidentity.id\u0026#34;\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003ecache_ttl\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e5m\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003esession_lifespan\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003eactive\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eactive\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003eissued_at\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eissued_at\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003enot_before\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eauthenticated_at\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003enot_after\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eexpires_at\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003etime_format\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e2006-01-02T15:04:05.999999Z07\u0026#34;\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003evalidity_leeway\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e10s\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThis example does also show how an endpoint can be configured by just specifying the URL as string, which is the simplest way for endpoint configuration.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"exampleblock\"\u003e\n\u003cdiv class=\"title\"\u003eExample 6. Configuration of Generic authenticator to work with a Bearer token\u003c/div\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThis example shows how to configure this authenticator to work with an authentication system, which issues a Bearer token upon successful user authentication. To reduce the communication overhead, it also makes use of \u003ccode\u003ecache_ttl\u003c/code\u003e to cache the response for 5 minutes if it does not exceed the validity of the information present in the response from the used endpoint.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eIn this example we configure the Generic authenticator mechanism to use the \u003ccode\u003eGET\u003c/code\u003e method instead of the default \u003ccode\u003ePOST\u003c/code\u003e for sending the bearer token to the authentication system for verification purposes and also to authenticate using HTTP basic auth schema. According to the below configuration, the Bearer token is located in the \u003ccode\u003eX-Custom-Bearer-Token\u003c/code\u003e header, which as also used as is while calling the \u003ccode\u003ehttp://my-auth.system/introspect\u003c/code\u003e endpoint.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"yaml\"\u003e\u003cspan style=\"color: #a6e22e\"\u003eid\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ebearer_token\u003c/span\u003e\n\u003cspan style=\"color: #a6e22e\"\u003etype\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003egeneric\u003c/span\u003e\n\u003cspan style=\"color: #a6e22e\"\u003econfig\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003eidentity_info_endpoint\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003eurl\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ehttp://my-auth.system/introspect\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003emethod\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eGET\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003eauth\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003etype\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ebasic_auth\u003c/span\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003econfig\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n        \u003cspan style=\"color: #a6e22e\"\u003euser\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eHeimdall\u003c/span\u003e\n        \u003cspan style=\"color: #a6e22e\"\u003epassword\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003esuper-secure\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003eauthentication_data_source\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n    \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003eheader\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eX-Custom-Bearer-Token\u003c/span\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003eschema\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eBearer\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003esubject\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003eid\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003esub\u0026#34;\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003ecache_ttl\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e5m\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003esession_lifespan\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003eactive\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eactive\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003eissued_at\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eiat\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003enot_before\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003enbf\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003enot_after\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eexp\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003evalidity_leeway\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e10s\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eUsually, Bearer tokens are issued by an OAuth2 auth provider and there is a need to verify not only the validity of such, but also a couple of claims. This can be achieved by a \u003ca href=\"/docs/configuration/rules/pipeline_mechanisms/authorizers/#_local_cel\"\u003eLocal Authorizer\u003c/a\u003e, but there is also a special purpose \u003ca href=\"#_oauth2_introspection\"\u003eOAuth2 Introspection\u003c/a\u003e authenticator type, which supports asserting all security relevant claims in just one place.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect2\"\u003e\n\u003ch3 id=\"_oauth2_introspection\"\u003eOAuth2 Introspection\u003c/h3\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThis authenticator handles requests that have Bearer token in the HTTP Authorization header (\u003ccode\u003eAuthorization: Bearer \u0026lt;token\u0026gt;\u003c/code\u003e), in the \u003ccode\u003eaccess_token\u003c/code\u003e query parameter or the \u003ccode\u003eaccess_token\u003c/code\u003e body parameter (latter, if the body is of \u003ccode\u003eapplication/x-www-form-urlencoded\u003c/code\u003e MIME type). It then uses \u003ca href=\"https://datatracker.ietf.org/doc/html/rfc7662\"\u003eOAuth 2.0 Token Introspection\u003c/a\u003e endpoint to check if the token is valid. The validation includes at least the verification of the status and the time validity. That is if the token is still active and whether it has been issued in an acceptable time frame. Latter can be adjusted by specifying a leeway. All other validation options can and should be configured.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eTo enable the usage of this authenticator, you have to set the \u003ccode\u003etype\u003c/code\u003e property to \u003ccode\u003eoauth2_introspection\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eConfiguration using the \u003ccode\u003econfig\u003c/code\u003e property is mandatory. Following properties are available:\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"ulist\"\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003eintrospection_endpoint\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003e\u003ca href=\"/docs/configuration/reference/types/#_endpoint\"\u003eEndpoint\u003c/a\u003e\u003c/em\u003e (mandatory, not overridable)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThe introspection endpoint of the OAuth2 authorization provider. At least the \u003ccode\u003eurl\u003c/code\u003e must be configured. There is no need to define the \u003ccode\u003emethod\u003c/code\u003e property or setting the \u003ccode\u003eContent-Type\u003c/code\u003e or the \u003ccode\u003eAccept\u003c/code\u003e header. These are set by default to the values required by the \u003ca href=\"https://datatracker.ietf.org/doc/html/rfc7662\"\u003eOAuth 2.0 Token Introspection\u003c/a\u003e RFC. You can however override these while configuring the authenticator.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003etoken_source\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003e\u003ca href=\"/docs/configuration/reference/types/#_authentication_data_source\"\u003eAuthentication Data Source\u003c/a\u003e\u003c/em\u003e (optional, not overridable)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eWhere to get the access token from. Defaults to retrieve it from the \u003ccode\u003eAuthorization\u003c/code\u003e header, the \u003ccode\u003eaccess_token\u003c/code\u003e query parameter or the \u003ccode\u003eaccess_token\u003c/code\u003e body parameter (latter, if the body is of \u003ccode\u003eapplication/x-www-form-urlencoded\u003c/code\u003e MIME type).\u003c/p\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003eassertions\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003e\u003ca href=\"/docs/configuration/reference/types/#_assertions\"\u003eAssertions\u003c/a\u003e\u003c/em\u003e (mandatory, overridable)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eConfigures the required claim assertions. Overriding on rule level is possible even partially. Those parts of the assertion, which have not been overridden are taken from the prototype configuration.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003esubject\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003e\u003ca href=\"/docs/configuration/reference/types/#_subject\"\u003eSubject\u003c/a\u003e\u003c/em\u003e (optional, not overridable)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eWhere to extract the \u003ca href=\"/docs/configuration/rules/pipeline_mechanisms/overview/#_subject\"\u003e\u003ccode\u003eSubject\u003c/code\u003e\u003c/a\u003e information from the introspection endpoint response. If not configured \u003ccode\u003esub\u003c/code\u003e is used to extract the subject \u003ccode\u003eID\u003c/code\u003e and all attributes from the introspection endpoint response are made available as \u003ccode\u003eAttributes\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003ecache_ttl\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003e\u003ca href=\"/docs/configuration/reference/types/#_duration\"\u003eDuration\u003c/a\u003e\u003c/em\u003e (optional, overridable)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eHow long to cache the response. If not set, caching of the introspection response is based on the available token expiration information. To disable caching, set it to \u003ccode\u003e0s\u003c/code\u003e. If you set the ttl to a custom value \u0026gt; 0, the expiration time (if available) of the token will be considered. The cache key is calculated from the \u003ccode\u003eintrospection_endpoint\u003c/code\u003e configuration and the value of the access token.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003eallow_fallback_on_error\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003eboolean\u003c/em\u003e (optional, overridable)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eIf set to \u003ccode\u003etrue\u003c/code\u003e, allows the pipeline to fall back to the next authenticator in the pipeline if this one fails to verify the credentials. Defaults to \u003ccode\u003efalse\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\u003cdiv class=\"exampleblock\"\u003e\n\u003cdiv class=\"title\"\u003eExample 7. Minimal possible configuration\u003c/div\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"yaml\"\u003e\u003cspan style=\"color: #a6e22e\"\u003eid\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eat_opaque\u003c/span\u003e\n\u003cspan style=\"color: #a6e22e\"\u003etype\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eoauth2_introspection\u003c/span\u003e\n\u003cspan style=\"color: #a6e22e\"\u003econfig\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003eintrospection_endpoint\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003eurl\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ehttp://hydra:4445/oauth2/introspect\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003eassertions\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003eissuers\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n      \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ehttp://127.0.0.1:4444/\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect2\"\u003e\n\u003ch3 id=\"_jwt\"\u003eJWT\u003c/h3\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eAs the \u003ca href=\"#_oauth2_introspection\"\u003eOAuth2 Introspection\u003c/a\u003e authenticator, this authenticator handles requests that have a Bearer token in the \u003ccode\u003eAuthorization\u003c/code\u003e header, in a different header, a query parameter or a body parameter as well. Unlike the OAuth2 Introspection authenticator it expects the token to be a JSON Web Token (JWT) and verifies it according \u003ca href=\"https://www.rfc-editor.org/rfc/rfc7519#section-7.2\"\u003eRFC 7519, Section 7.2\u003c/a\u003e. It does however not support encrypted payloads and nested JWTs. In addition to this, validation includes the verification of the time validity. Latter can be adjusted by specifying a leeway. All other validation options can and should be configured.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eTo enable the usage of this authenticator, you have to set the \u003ccode\u003etype\u003c/code\u003e property to \u003ccode\u003ejwt\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eConfiguration using the \u003ccode\u003econfig\u003c/code\u003e property is mandatory. Following properties are available:\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"ulist\"\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003ejwks_endpoint\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003e\u003ca href=\"/docs/configuration/reference/types/#_endpoint\"\u003eEndpoint\u003c/a\u003e\u003c/em\u003e (mandatory, not overridable)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThe JWKS endpoint, this authenticator retrieves the key material in a format specified in \u003ca href=\"https://datatracker.ietf.org/doc/html/rfc7519\"\u003eRFC 7519\u003c/a\u003e from for JWT signature verification purposes. The \u003ccode\u003eurl\u003c/code\u003e must be configured. By default \u003ccode\u003emethod\u003c/code\u003e is set to \u003ccode\u003eGET\u003c/code\u003e and the HTTP \u003ccode\u003eAccept\u003c/code\u003e header to \u003ccode\u003eapplication/json\u003c/code\u003e\u003c/p\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003ejwt_source\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003e\u003ca href=\"/docs/configuration/reference/types/#_authentication_data_source\"\u003eAuthentication Data Source\u003c/a\u003e\u003c/em\u003e (optional, not overridable)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eWhere to get the access token from. Defaults to retrieve it from the \u003ccode\u003eAuthorization\u003c/code\u003e header, the \u003ccode\u003eaccess_token\u003c/code\u003e query parameter or the \u003ccode\u003eaccess_token\u003c/code\u003e body parameter (latter, if the body is of \u003ccode\u003eapplication/x-www-form-urlencoded\u003c/code\u003e MIME type).\u003c/p\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003eassertions\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003e\u003ca href=\"/docs/configuration/reference/types/#_assertions\"\u003eAssertions\u003c/a\u003e\u003c/em\u003e (mandatory, overridable)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eConfigures the required claim assertions. Overriding on rule level is possible even partially. Those parts of the assertion, which have not been overridden are taken from the prototype configuration.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003esubject\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003e\u003ca href=\"/docs/configuration/reference/types/#_subject\"\u003eSubject\u003c/a\u003e\u003c/em\u003e (optional, not overridable)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eWhere to extract the subject id from the JWT, as well as which attributes to use. If not configured \u003ccode\u003esub\u003c/code\u003e is used to extract the subject id and all attributes from the JWT payload are made available as attributes of the subject.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003ecache_ttl\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003e\u003ca href=\"/docs/configuration/reference/types/#_duration\"\u003eDuration\u003c/a\u003e\u003c/em\u003e (optional, overridable)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eHow long to cache the key from the JWKS response, which was used for signature verification purposes. If not set, heimdall will cache this key for 10 minutes and not call JWKS endpoint again if the same \u003ccode\u003ekid\u003c/code\u003e is referenced in an JWT and same JWKS endpoint is used. The cache key is calculated from the \u003ccode\u003ejwks_endpoint\u003c/code\u003e configuration and the \u003ccode\u003ekid\u003c/code\u003e referenced in the JWT.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003eallow_fallback_on_error\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003eboolean\u003c/em\u003e (optional, overridable)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eIf set to \u003ccode\u003etrue\u003c/code\u003e, allows the pipeline to fall back to the next authenticator in the pipeline if this one fails to verify the credentials. Defaults to \u003ccode\u003efalse\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003evalidate_jwk\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003eboolean\u003c/em\u003e (optional, not overridable)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eEnables or disables the verification of the JWK certificate used for JWT signature verification purposes. Effective only if the JWK contains a certificate. The verification happens according to \u003ca href=\"https://www.rfc-editor.org/rfc/rfc5280#section-6.1\"\u003eRFC 5280, section 6.1\u003c/a\u003e and also includes the check, that the certificate is allowed to be used for signature verification purposes. Revokation check is not supported. Defaults to \u003ccode\u003etrue\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003etrust_store\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003estring\u003c/em\u003e (optional, not overridable)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThe path to a PEM file containing the trust anchors, to be used for the JWK certificate validation. Defaults to system trust store.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\u003cdiv class=\"admonitionblock note\"\u003e\n\u003ctable\u003e\n\u003ctbody\u003e\u003ctr\u003e\n\u003ctd class=\"icon\"\u003e\n\u003ci class=\"fa icon-note\" title=\"Note\"\u003e\u003c/i\u003e\n\u003c/td\u003e\n\u003ctd class=\"content\"\u003e\nIf a JWT does not reference a \u003ccode\u003ekid\u003c/code\u003e, heimdall always fetches a JWKS from the configured endpoint (so no caching is done) and iterates over the received keys until one matches. If none matches, the authenticator fails.\n\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003cdiv class=\"exampleblock\"\u003e\n\u003cdiv class=\"title\"\u003eExample 8. Minimal possible configuration\u003c/div\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"yaml\"\u003e\u003cspan style=\"color: #a6e22e\"\u003eid\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eat_jwt\u003c/span\u003e\n\u003cspan style=\"color: #a6e22e\"\u003etype\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ejwt\u003c/span\u003e\n\u003cspan style=\"color: #a6e22e\"\u003econfig\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003ejwks_endpoint\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003eurl\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ehttp://hydra:4444/.well-known/jwks.json\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003eassertions\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003eissuers\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n      \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ehttp://127.0.0.1:4444/\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n","sections":["Rules","Pipeline Mechanisms"],"tags":null,"title":"Authenticators","url":"/docs/configuration/rules/pipeline_mechanisms/authenticators/"},{"categories":null,"content":" Authorizers ensure that the Subject obtained via an authenticator has the required permissions to submit the given HTTP request and thus to execute the corresponding logic in the upstream service. E.g. a specific endpoint of the upstream service might only be accessible to a \u0026#34;user\u0026#34; from the \u0026#34;admin\u0026#34; group, or to an HTTP request if a specific HTTP header is set.\nAuthorizer Types The following sections describe the available authorizer types in more detail.\nAllow As the name implies, this authorizer allows any request passing through. This authorizer type also doesn’t have any configuration options.\nTo enable the usage of this authorizer, you have to set the type property to allow.\nExample 1. Configuration of Allow authorizer id: allow_any_request type: allow Deny As the name implies, this authorizer denies any request (on HTTP response code level this is then mapped to 403 Forbidden). It basically stops the successful execution of the pipeline resulting in the execution of the error handler mechanisms. This authorizer type doesn’t have any configuration options.\nTo enable the usage of this authorizer, you have to set the type property to deny.\nExample 2. Configuration of Deny authorizer id: deny_any_request type: deny Local (CEL) This authorizer allows definition of authorization requirements based on information available about the authenticated subject, as well as the actual request by using CEL based authorization expressions. Each expression is expected to return true to signal success. Otherwise, the authorization fails, resulting in the execution of the error handler mechanisms.\nTo enable the usage of this authorizer, you have to set the type property to cel.\nConfiguration using the config property is mandatory. Following properties are available:\nexpressions: Authorization Expression array (mandatory, overridable)\nList of authorization expressions, which define the actual authorization logic. Each expression has access to the Subject and the Request objects.\nExample 3. Authorization based on subject properties In this example the subject is checked to be member of the \u0026#34;admin\u0026#34; group.\nid: user_is_admin type: cel config: expressions: - expression: | has(Subject.Attributes.groups) \u0026amp;\u0026amp; Subject.Attributes.groups.exists(g, g == \u0026#34;admin\u0026#34;) message: User is not admin The first line of the expressions verifies that the property group exists. The second line checks, whether groups contains an entry named admin.\nThis example specifies also a message, which is logged, if the expression fails.\nExample 4. Authorization based on subject and request properties In this example the authorizer is configured to ensure anonymous access to a resource is possible for read requests only.\nid: no_modification_allowed_by_anonymous type: cel config: expressions: - expression: | Request.Method in [\u0026#34;GET\u0026#34;, \u0026#34;HEAD\u0026#34;, \u0026#34;OPTIONS\u0026#34;] || Subject.ID != \u0026#34;anonymous\u0026#34; message: Anonymous non-read access is forbidden The usage of this type of configuration makes sense in a pipeline, which combines multiple Authenticators, allowing anonymous and authenticated access.\nRemote This authorizer allows communication with other systems, like Open Policy Agent, Ory Keto, etc. for the actual authorization purpose. If the used endpoint answers with a not 2xx HTTP response code, this authorizer assumes, the authorization has failed, resulting in the execution of the error handler mechanisms. Otherwise, if no expressions for the verification of the response are defined, the authorizer assumes, the request has been authorized. If expressions are defined and do not fail, the authorization succeeds.\nIf your authorization system provides a payload in the response, heimdall inspects the Content-Type header to prepare the payload for further usage, e.g. for payload verification expressions, or for a Local (CEL) authorizer. If the content type does either end with json or is application/x-www-form-urlencoded, the payload is decoded, so key based access to the corresponding attributes is possible, otherwise it is made available as well, but as a simple string. In all cases this value is available for the authorization expressions as well as in the Subject’s Attributes property under a key named by the id of the authorizer (See also the example below).\nTo enable the usage of this authorizer, you have to set the type property to remote.\nConfiguration using the config property is mandatory. Following properties are available:\nendpoint: Endpoint (mandatory, not overridable)\nThe API endpoint of your authorization system. At least the url must be configured. This mechanism allows templating of the url and makes the Subject object available to it. By default, this authorizer will use HTTP POST to send the rendered payload to this endpoint. You can override this behavior by configuring method as well. Depending on the API requirements of your authorization system, you might need to configure further properties, like headers, etc.\npayload: string (optional, overridable)\nYour template with definitions required to communicate to the authorization endpoint. The template can make use of Subject and Request objects.\nexpressions: Authorization Expression array (optional, overridable)\nList of CEL expressions which define the logic to be applied to the response returned by the endpoint. All expressions are expected to evaluate to true if the authorization was successful. If any of the expressions evaluates to false, the authorization fails and the message defined by the failed expression will be logged.\nEach expression has access to the Payload object.\nforward_response_headers_to_upstream: string array (optional, overridable)\nEnables forwarding of any headers from the authorization endpoint response to the upstream service.\ncache_ttl: Duration (optional, overridable)\nAllows caching of the authorization endpoint responses. Defaults to 0s, which means no caching. The cache key is calculated from the entire configuration of the authorizer instance and the available information about the current subject.\nExample 5. Configuration of Remote authorizer to communicate with Open Policy Agent (OPA) Here the remote authorizer is configured to communicate with OPA. Since OPA expects the query to be formatted as JSON, the corresponding Content-Type header is set. Since the responses are JSON objects as well, the Accept header is also provided. In addition, this examples uses the basic_auth auth type to authenticate against the endpoint.\nid: user_can_write type: remote config: endpoint: url: https://opa.local/v1/data/myapi/policy/allow headers: Content-Type: json Accept: json auth: type: basic_auth config: user: MyOpaUser password: SuperSecretPassword payload: | { \u0026#34;input\u0026#34;: { \u0026#34;user\u0026#34;: {{ quote .Subject.ID }}, \u0026#34;access\u0026#34;: \u0026#34;write\u0026#34; } } expressions: - expression: | Payload.result == true message: User does not have write access In this case, since an OPA response could look like { \u0026#34;result\u0026#34;: true } or { \u0026#34;result\u0026#34;: false }, heimdall makes the response also available under Subject.Attributes[\u0026#34;user_can_write\u0026#34;] as a map, with \u0026#34;user_can_write\u0026#34; being the id of the authorizer in this example.\n","description":"","html_content":"\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eAuthorizers ensure that the \u003ca href=\"/docs/configuration/rules/pipeline_mechanisms/overview/#_subject\"\u003e\u003ccode\u003eSubject\u003c/code\u003e\u003c/a\u003e obtained via an authenticator has the required permissions to submit the given HTTP request and thus to execute the corresponding logic in the upstream service. E.g. a specific endpoint of the upstream service might only be accessible to a \u0026#34;user\u0026#34; from the \u0026#34;admin\u0026#34; group, or to an HTTP request if a specific HTTP header is set.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect1\"\u003e\n\u003ch2 id=\"_authorizer_types\"\u003eAuthorizer Types\u003c/h2\u003e\n\u003cdiv class=\"sectionbody\"\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThe following sections describe the available authorizer types in more detail.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect2\"\u003e\n\u003ch3 id=\"_allow\"\u003eAllow\u003c/h3\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eAs the name implies, this authorizer allows any request passing through. This authorizer type also doesn’t have any configuration options.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eTo enable the usage of this authorizer, you have to set the \u003ccode\u003etype\u003c/code\u003e property to \u003ccode\u003eallow\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"exampleblock\"\u003e\n\u003cdiv class=\"title\"\u003eExample 1. Configuration of Allow authorizer\u003c/div\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"yaml\"\u003e\u003cspan style=\"color: #a6e22e\"\u003eid\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eallow_any_request\u003c/span\u003e\n\u003cspan style=\"color: #a6e22e\"\u003etype\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eallow\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect2\"\u003e\n\u003ch3 id=\"_deny\"\u003eDeny\u003c/h3\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eAs the name implies, this authorizer denies any request (on HTTP response code level this is then mapped to \u003ccode\u003e403 Forbidden\u003c/code\u003e). It basically stops the successful execution of the pipeline resulting in the execution of the error handler mechanisms. This authorizer type doesn’t have any configuration options.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eTo enable the usage of this authorizer, you have to set the \u003ccode\u003etype\u003c/code\u003e property to \u003ccode\u003edeny\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"exampleblock\"\u003e\n\u003cdiv class=\"title\"\u003eExample 2. Configuration of Deny authorizer\u003c/div\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"yaml\"\u003e\u003cspan style=\"color: #a6e22e\"\u003eid\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003edeny_any_request\u003c/span\u003e\n\u003cspan style=\"color: #a6e22e\"\u003etype\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003edeny\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect2\"\u003e\n\u003ch3 id=\"_local_cel\"\u003eLocal (CEL)\u003c/h3\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThis authorizer allows definition of authorization requirements based on information available about the authenticated subject, as well as the actual request by using \u003ca href=\"https://github.com/google/cel-spec\"\u003eCEL\u003c/a\u003e based authorization expressions. Each expression is expected to return \u003ccode\u003etrue\u003c/code\u003e to signal success. Otherwise, the authorization fails, resulting in the execution of the error handler mechanisms.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eTo enable the usage of this authorizer, you have to set the \u003ccode\u003etype\u003c/code\u003e property to \u003ccode\u003ecel\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eConfiguration using the \u003ccode\u003econfig\u003c/code\u003e property is mandatory. Following properties are available:\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"ulist\"\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003eexpressions\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003e\u003ca href=\"/docs/configuration/reference/types/#_authorization_expression\"\u003eAuthorization Expression\u003c/a\u003e array\u003c/em\u003e (mandatory, overridable)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eList of authorization expressions, which define the actual authorization logic. Each expression has access to the \u003ca href=\"/docs/configuration/rules/pipeline_mechanisms/overview/#_subject\"\u003e\u003ccode\u003eSubject\u003c/code\u003e\u003c/a\u003e and the \u003ca href=\"/docs/configuration/rules/pipeline_mechanisms/overview/#_request\"\u003e\u003ccode\u003eRequest\u003c/code\u003e\u003c/a\u003e objects.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\u003cdiv class=\"exampleblock\"\u003e\n\u003cdiv class=\"title\"\u003eExample 3. Authorization based on subject properties\u003c/div\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eIn this example the subject is checked to be member of the \u0026#34;admin\u0026#34; group.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"yaml\"\u003e\u003cspan style=\"color: #a6e22e\"\u003eid\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003euser_is_admin\u003c/span\u003e\n\u003cspan style=\"color: #a6e22e\"\u003etype\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ecel\u003c/span\u003e\n\u003cspan style=\"color: #a6e22e\"\u003econfig\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003eexpressions\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n    \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003eexpression\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e|\u003c/span\u003e\n        \u003cspan style=\"color: #e6db74\"\u003ehas(Subject.Attributes.groups) \u0026amp;\u0026amp;\u003c/span\u003e\n        \u003cspan style=\"color: #e6db74\"\u003eSubject.Attributes.groups.exists(g, g == \u0026#34;admin\u0026#34;)\u003c/span\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003emessage\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eUser is not admin\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThe first line of the expressions verifies that the property group exists. The second line checks, whether \u003ccode\u003egroups\u003c/code\u003e contains an entry named \u003ccode\u003eadmin\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThis example specifies also a message, which is logged, if the expression fails.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"exampleblock\"\u003e\n\u003cdiv class=\"title\"\u003eExample 4. Authorization based on subject and request properties\u003c/div\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eIn this example the authorizer is configured to ensure anonymous access to a resource is possible for read requests only.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"yaml\"\u003e\u003cspan style=\"color: #a6e22e\"\u003eid\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eno_modification_allowed_by_anonymous\u003c/span\u003e\n\u003cspan style=\"color: #a6e22e\"\u003etype\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ecel\u003c/span\u003e\n\u003cspan style=\"color: #a6e22e\"\u003econfig\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003eexpressions\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n    \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003eexpression\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e|\u003c/span\u003e\n        \u003cspan style=\"color: #e6db74\"\u003eRequest.Method in [\u0026#34;GET\u0026#34;, \u0026#34;HEAD\u0026#34;, \u0026#34;OPTIONS\u0026#34;] || Subject.ID != \u0026#34;anonymous\u0026#34;\u003c/span\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003emessage\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eAnonymous non-read access is forbidden\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThe usage of this type of configuration makes sense in a pipeline, which combines multiple \u003ca href=\"/docs/configuration/rules/pipeline_mechanisms/authenticators/\"\u003eAuthenticators\u003c/a\u003e, allowing anonymous and authenticated access.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect2\"\u003e\n\u003ch3 id=\"_remote\"\u003eRemote\u003c/h3\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThis authorizer allows communication with other systems, like \u003ca href=\"https://www.openpolicyagent.org/\"\u003eOpen Policy Agent\u003c/a\u003e, \u003ca href=\"https://www.ory.sh/docs/keto/\"\u003eOry Keto\u003c/a\u003e, etc. for the actual authorization purpose. If the used endpoint answers with a not 2xx HTTP response code, this authorizer assumes, the authorization has failed, resulting in the execution of the error handler mechanisms. Otherwise, if no expressions for the verification of the response are defined, the authorizer assumes, the request has been authorized. If expressions are defined and do not fail, the authorization succeeds.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eIf your authorization system provides a payload in the response, heimdall inspects the \u003ccode\u003eContent-Type\u003c/code\u003e header to prepare the payload for further usage, e.g. for payload verification expressions, or for a \u003ca href=\"#_local_cel\"\u003eLocal (CEL)\u003c/a\u003e authorizer. If the content type does either end with \u003ccode\u003ejson\u003c/code\u003e or is \u003ccode\u003eapplication/x-www-form-urlencoded\u003c/code\u003e, the payload is decoded, so key based access to the corresponding attributes is possible, otherwise it is made available as well, but as a simple string. In all cases this value is available for the authorization expressions as well as in the \u003ca href=\"/docs/configuration/rules/pipeline_mechanisms/overview/#_subject\"\u003eSubject’s\u003c/a\u003e \u003ccode\u003eAttributes\u003c/code\u003e property under a key named by the \u003ccode\u003eid\u003c/code\u003e of the authorizer (See also the example below).\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eTo enable the usage of this authorizer, you have to set the \u003ccode\u003etype\u003c/code\u003e property to \u003ccode\u003eremote\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eConfiguration using the \u003ccode\u003econfig\u003c/code\u003e property is mandatory. Following properties are available:\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"ulist\"\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003eendpoint\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003e\u003ca href=\"/docs/configuration/reference/types/#_endpoint\"\u003eEndpoint\u003c/a\u003e\u003c/em\u003e (mandatory, not overridable)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThe API endpoint of your authorization system. At least the \u003ccode\u003eurl\u003c/code\u003e must be configured. This mechanism allows templating of the url and makes the \u003ca href=\"/docs/configuration/rules/pipeline_mechanisms/overview/#_subject\"\u003e\u003ccode\u003eSubject\u003c/code\u003e\u003c/a\u003e object available to it. By default, this authorizer will use HTTP \u003ccode\u003ePOST\u003c/code\u003e to send the rendered payload to this endpoint. You can override this behavior by configuring \u003ccode\u003emethod\u003c/code\u003e as well. Depending on the API requirements of your authorization system, you might need to configure further properties, like headers, etc.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003epayload\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003estring\u003c/em\u003e (optional, overridable)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eYour \u003ca href=\"/docs/configuration/rules/pipeline_mechanisms/overview/#_templating\"\u003etemplate\u003c/a\u003e with definitions required to communicate to the authorization endpoint. The template can make use of \u003ca href=\"/docs/configuration/rules/pipeline_mechanisms/overview/#_subject\"\u003e\u003ccode\u003eSubject\u003c/code\u003e\u003c/a\u003e and \u003ca href=\"/docs/configuration/rules/pipeline_mechanisms/overview/#_request\"\u003e\u003ccode\u003eRequest\u003c/code\u003e\u003c/a\u003e objects.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003eexpressions\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003e\u003ca href=\"/docs/configuration/reference/types/#_authorization_expression\"\u003eAuthorization Expression\u003c/a\u003e array\u003c/em\u003e (optional, overridable)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eList of \u003ca href=\"https://github.com/google/cel-spec\"\u003eCEL\u003c/a\u003e expressions which define the logic to be applied to the response returned by the endpoint. All expressions are expected to evaluate to \u003ccode\u003etrue\u003c/code\u003e if the authorization was successful. If any of the expressions evaluates to \u003ccode\u003efalse\u003c/code\u003e, the authorization fails and the message defined by the failed expression will be logged.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eEach expression has access to the \u003ca href=\"/docs/configuration/rules/pipeline_mechanisms/overview/#_payload\"\u003e\u003ccode\u003ePayload\u003c/code\u003e\u003c/a\u003e object.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003eforward_response_headers_to_upstream\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003estring array\u003c/em\u003e (optional, overridable)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eEnables forwarding of any headers from the authorization endpoint response to the upstream service.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003ecache_ttl\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003e\u003ca href=\"/docs/configuration/reference/types/#_duration\"\u003eDuration\u003c/a\u003e\u003c/em\u003e (optional, overridable)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eAllows caching of the authorization endpoint responses. Defaults to 0s, which means no caching. The cache key is calculated from the entire configuration of the authorizer instance and the available information about the current subject.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\u003cdiv class=\"exampleblock\"\u003e\n\u003cdiv class=\"title\"\u003eExample 5. Configuration of Remote authorizer to communicate with \u003ca href=\"https://www.openpolicyagent.org/\"\u003eOpen Policy Agent\u003c/a\u003e (OPA)\u003c/div\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eHere the remote authorizer is configured to communicate with OPA. Since OPA expects the query to be formatted as JSON, the corresponding \u003ccode\u003eContent-Type\u003c/code\u003e header is set. Since the responses are JSON objects as well, the \u003ccode\u003eAccept\u003c/code\u003e header is also provided. In addition, this examples uses the \u003ccode\u003ebasic_auth\u003c/code\u003e auth type to authenticate against the endpoint.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"yaml\"\u003e\u003cspan style=\"color: #a6e22e\"\u003eid\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003euser_can_write\u003c/span\u003e\n\u003cspan style=\"color: #a6e22e\"\u003etype\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eremote\u003c/span\u003e\n\u003cspan style=\"color: #a6e22e\"\u003econfig\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003eendpoint\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003eurl\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ehttps://opa.local/v1/data/myapi/policy/allow\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003eheaders\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003eContent-Type\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ejson\u003c/span\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003eAccept\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ejson\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003eauth\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003etype\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ebasic_auth\u003c/span\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003econfig\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n        \u003cspan style=\"color: #a6e22e\"\u003euser\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eMyOpaUser\u003c/span\u003e\n        \u003cspan style=\"color: #a6e22e\"\u003epassword\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eSuperSecretPassword\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003epayload\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e|\u003c/span\u003e\n    \u003cspan style=\"color: #e6db74\"\u003e{ \u0026#34;input\u0026#34;: { \u0026#34;user\u0026#34;: {{ quote .Subject.ID }}, \u0026#34;access\u0026#34;: \u0026#34;write\u0026#34; } }\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003eexpressions\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n    \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003eexpression\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e|\u003c/span\u003e\n        \u003cspan style=\"color: #e6db74\"\u003ePayload.result == true\u003c/span\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003emessage\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eUser does not have write access\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eIn this case, since an OPA response could look like \u003ccode\u003e{ \u0026#34;result\u0026#34;: true }\u003c/code\u003e or \u003ccode\u003e{ \u0026#34;result\u0026#34;: false }\u003c/code\u003e, heimdall makes the response also available under \u003ccode\u003eSubject.Attributes[\u0026#34;user_can_write\u0026#34;]\u003c/code\u003e as a map, with \u003ccode\u003e\u0026#34;user_can_write\u0026#34;\u003c/code\u003e being the id of the authorizer in this example.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n","sections":["Rules","Pipeline Mechanisms"],"tags":null,"title":"Authorizers","url":"/docs/configuration/rules/pipeline_mechanisms/authorizers/"},{"categories":null,"content":" Contextualizers enrich the information about the Subject obtained via an authenticator mechanism with further information, required by either the endpoint of the upstream service itself or an authorizer mechanism. This can be handy if the actual authentication system doesn’t have all information about the subject (which is usually the case in microservice architectures), or if dynamic information about the subject, like the current location based on the IP address, is required.\nContextualizer Types As of today, there is just one contextualizer type, which is described below.\nGeneric This mechanism allows you to communicate to any API you want to fetch further information about the subject. Typical scenario is getting specific attributes for later authorization purposes which are not known to the authentication system and thus were not made available in Subject’s Attributes property. If the API responses with a 2xx HTTP response code, the payload is made available in the Attributes property of the Subject. To avoid overwriting of existing attributes, this object is however not available on the top level, but under a key named by the id of the authorizer (See also the example below). If the Content-Type of the response is either ending with json or is application/x-www-form-urlencoded, the payload is decoded and made available as map, otherwise it is treated as string, but, as written above, is made available as well.\nTo enable the usage of this contextualizer, you have to set the type property to generic.\nConfiguration using the config property is mandatory. Following properties are available:\nendpoint: Endpoint (mandatory, not overridable)\nThe API of the service providing additional attributes about the authenticated user. At least the url must be configured. This mechanism allows templating of the url and makes the Subject object available to it. By default, this authorizer type uses HTTP POST to send the rendered payload to the endpoint. You can however override this behavior by configuring method. Depending on the API requirements you might need to configure further properties, like headers, etc as well.\nforward_headers: string array (optional, overridable)\nIf the API requires any headers from the request to heimdall, you can forward these unchanged by making use of this property\nforward_cookies: string array (optional, overridable)\nIf the API requires any cookies from the request to heimdall, you can forward these unchanged by making use of this property.\npayload: string (optional, overridable)\nYour template with definitions required to communicate to the endpoint. The template can make use of Subject and Request objects.\ncache_ttl: Duration (optional, overridable)\nAllows caching of the API responses. Defaults to 10 seconds. The cache key is calculated from the entire configuration of the contextualizer instance and the available information about the current subject.\nExample 1. Contextualizer configuration In this example the contextualizer is configured to call an endpoint using the HTTP GET method with the subject id being part of the url path. As the endpoint requires the X-My-Session-Cookie cookie for subject authentication purposes, forward_cookies is used to achieve this.\nid: foo type: generic config: endpoint: url: https://some-other.service/users/{{.Subject.ID}} method: GET forward_cookies: - X-My-Session-Cookie ","description":"","html_content":"\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eContextualizers enrich the information about the \u003ca href=\"/docs/configuration/rules/pipeline_mechanisms/overview/#_subject\"\u003e\u003ccode\u003eSubject\u003c/code\u003e\u003c/a\u003e obtained via an authenticator mechanism with further information, required by either the endpoint of the upstream service itself or an authorizer mechanism. This can be handy if the actual authentication system doesn’t have all information about the subject (which is usually the case in microservice architectures), or if dynamic information about the subject, like the current location based on the IP address, is required.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect1\"\u003e\n\u003ch2 id=\"_contextualizer_types\"\u003eContextualizer Types\u003c/h2\u003e\n\u003cdiv class=\"sectionbody\"\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eAs of today, there is just one contextualizer type, which is described below.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect2\"\u003e\n\u003ch3 id=\"_generic\"\u003eGeneric\u003c/h3\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThis mechanism allows you to communicate to any API you want to fetch further information about the subject. Typical scenario is getting specific attributes for later authorization purposes which are not known to the authentication system and thus were not made available in \u003ca href=\"/docs/configuration/rules/pipeline_mechanisms/overview/#_subject\"\u003e\u003ccode\u003eSubject’s\u003c/code\u003e\u003c/a\u003e \u003ccode\u003eAttributes\u003c/code\u003e property. If the API responses with a 2xx HTTP response code, the payload is made available in the \u003ccode\u003eAttributes\u003c/code\u003e property of the \u003ccode\u003eSubject\u003c/code\u003e. To avoid overwriting of existing attributes, this object is however not available on the top level, but under a key named by the \u003ccode\u003eid\u003c/code\u003e of the authorizer (See also the example below). If the \u003ccode\u003eContent-Type\u003c/code\u003e of the response is either ending with \u003ccode\u003ejson\u003c/code\u003e or is \u003ccode\u003eapplication/x-www-form-urlencoded\u003c/code\u003e, the payload is decoded and made available as map, otherwise it is treated as string, but, as written above, is made available as well.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eTo enable the usage of this contextualizer, you have to set the \u003ccode\u003etype\u003c/code\u003e property to \u003ccode\u003egeneric\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eConfiguration using the \u003ccode\u003econfig\u003c/code\u003e property is mandatory. Following properties are available:\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"ulist\"\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003eendpoint\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003e\u003ca href=\"/docs/configuration/reference/types/#_endpoint\"\u003eEndpoint\u003c/a\u003e\u003c/em\u003e (mandatory, not overridable)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThe API of the service providing additional attributes about the authenticated user. At least the \u003ccode\u003eurl\u003c/code\u003e must be configured. This mechanism allows templating of the url and makes the \u003ca href=\"/docs/configuration/rules/pipeline_mechanisms/overview/#_subject\"\u003e\u003ccode\u003eSubject\u003c/code\u003e\u003c/a\u003e object available to it. By default, this authorizer type uses HTTP \u003ccode\u003ePOST\u003c/code\u003e to send the rendered payload to the endpoint. You can however override this behavior by configuring \u003ccode\u003emethod\u003c/code\u003e. Depending on the API requirements you might need to configure further properties, like headers, etc as well.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003eforward_headers\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003estring array\u003c/em\u003e (optional, overridable)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eIf the API requires any headers from the request to heimdall, you can forward these unchanged by making use of this property\u003c/p\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003eforward_cookies\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003estring array\u003c/em\u003e (optional, overridable)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eIf the API requires any cookies from the request to heimdall, you can forward these unchanged by making use of this property.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003epayload\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003estring\u003c/em\u003e (optional, overridable)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eYour \u003ca href=\"/docs/configuration/rules/pipeline_mechanisms/overview/#_templating\"\u003etemplate\u003c/a\u003e with definitions required to communicate to the endpoint. The template can make use of \u003ca href=\"/docs/configuration/rules/pipeline_mechanisms/overview/#_subject\"\u003e\u003ccode\u003eSubject\u003c/code\u003e\u003c/a\u003e and \u003ca href=\"/docs/configuration/rules/pipeline_mechanisms/overview/#_request\"\u003e\u003ccode\u003eRequest\u003c/code\u003e\u003c/a\u003e objects.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003ecache_ttl\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003e\u003ca href=\"/docs/configuration/reference/types/#_duration\"\u003eDuration\u003c/a\u003e\u003c/em\u003e (optional, overridable)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eAllows caching of the API responses. Defaults to 10 seconds. The cache key is calculated from the entire configuration of the contextualizer instance and the available information about the current subject.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\u003cdiv class=\"exampleblock\"\u003e\n\u003cdiv class=\"title\"\u003eExample 1. Contextualizer configuration\u003c/div\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eIn this example the contextualizer is configured to call an endpoint using the HTTP \u003ccode\u003eGET\u003c/code\u003e method with the subject id being part of the url path. As the endpoint requires the \u003ccode\u003eX-My-Session-Cookie\u003c/code\u003e cookie for subject authentication purposes, \u003ccode\u003eforward_cookies\u003c/code\u003e is used to achieve this.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"yaml\"\u003e\u003cspan style=\"color: #a6e22e\"\u003eid\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003efoo\u003c/span\u003e\n\u003cspan style=\"color: #a6e22e\"\u003etype\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003egeneric\u003c/span\u003e\n\u003cspan style=\"color: #a6e22e\"\u003econfig\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003eendpoint\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003eurl\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ehttps://some-other.service/users/{{.Subject.ID}}\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003emethod\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eGET\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003eforward_cookies\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n    \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eX-My-Session-Cookie\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n","sections":["Rules","Pipeline Mechanisms"],"tags":null,"title":"Contextualizers","url":"/docs/configuration/rules/pipeline_mechanisms/contextualizers/"},{"categories":null,"content":" Unifiers finalize the successful execution of the pipeline and unify the available information about the Subject by transforming it into a format expected, respectively required by the upstream service. This ranges from adding a query parameter, to a structured JWT in a specific header.\nUnifier Types The following sections describe the available unifier types in more detail.\nNoop As the name implies, this unifier does nothing. As unifier are the last step in a rule pipeline and transform the available Subject information into a format required by the upstream service, the usage of this unifier makes only sense in combination with the Noop Authenticator, e.g. if your API should be publicly available. This authenticator type also doesn’t have any configuration options.\nTo enable the usage of this unifier, you have to set the type property to noop.\nExample 1. Noop unifier configuration id: foo type: noop Header This unifier enables transformation of a Subject into HTTP headers.\nTo enable the usage of this unifier, you have to set the type property to header.\nConfiguration using the config property is mandatory. Following properties are available:\nheaders: string map (mandatory, overridable)\nEnables configuration of arbitrary headers with any values build from available subject information (See also Templating). Only Subject object is available in the template.\nExample 2. Header unifier configuration id: foo type: header config: headers: - X-User-ID: {{ quote .Subject.ID }} - X-User-Email: {{ quote .Subject.Attributes[\u0026#34;email\u0026#34;] }} Cookie This unifier enables transformation of a Subject into cookies.\nTo enable the usage of this unifier, you have to set the type property to cookie.\nConfiguration using the config property is mandatory. Following properties are available:\ncookies: string map (mandatory, overridable)\nEnables configuration of arbitrary cookies with any values build from available subject information (See also Templating). Only Subject object is available in the template.\nExample 3. Cookie unifier configuration id: foo type: header config: cookies: - user_id_cookie: {{ quote .Subject.ID }} - user_email_cookie: {{ quote .Subject.Attributes[\u0026#34;email\u0026#34;] }} JWT This unifier enables transformation of a Subject into a bearer token in a JWT format, which is made available to your upstream service in the HTTP Authorization header. In addition to setting the JWT specific claims, it allows setting custom claims as well. Your upstream service can then verify the signature of the JWT by making use of heimdall’s JWKS endpoint to retrieve the required public keys/certificates from.\nTo enable the usage of this unifier, you have to set the type property to jwt. The usage of this unifier type requires a configured Signer as well. At least it is a must in production environments.\nConfiguration using the config property is optional. Following properties are available:\nclaims: string (optional, overridable)\nYour template with custom claims, you would like to add to the JWT (See also Templating). Only Subject object is available in the template.\nttl: Duration (optional, overridable)\nDefines how long the JWT should be valid. Defaults to 5 minutes. Heimdall sets the iat and the nbf claims to the current system time. The value of the exp claim is then influenced by the ttl property.\nThe generated JWT is always cached until 5 seconds before its expiration. The cache key is calculated from the entire configuration of the unifier instance and the available information about the current subject.\nExample 4. JWT unifier configuration id: jwt_unifier type: jwt config: ttl: 5m claims: | { {{ $user_name := .Subject.Attributes.identity.user_name -}} \u0026#34;email\u0026#34;: {{ quote .Subject.Attributes.identity.email }}, \u0026#34;email_verified\u0026#34;: {{ .Subject.Attributes.identity.email_verified }}, \u0026#34;name\u0026#34;: {{ if $user_name }}{{ quote $user_name }}{{ else }}{{ quote $email }}{{ end }} } ","description":"","html_content":"\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eUnifiers finalize the successful execution of the pipeline and unify the available information about the \u003ca href=\"/docs/configuration/rules/pipeline_mechanisms/overview/#_subject\"\u003e\u003ccode\u003eSubject\u003c/code\u003e\u003c/a\u003e by transforming it into a format expected, respectively required by the upstream service. This ranges from adding a query parameter, to a structured JWT in a specific header.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect1\"\u003e\n\u003ch2 id=\"_unifier_types\"\u003eUnifier Types\u003c/h2\u003e\n\u003cdiv class=\"sectionbody\"\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThe following sections describe the available unifier types in more detail.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect2\"\u003e\n\u003ch3 id=\"_noop\"\u003eNoop\u003c/h3\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eAs the name implies, this unifier does nothing. As unifier are the last step in a rule pipeline and transform the  available \u003ca href=\"/docs/configuration/rules/pipeline_mechanisms/overview/#_subject\"\u003e\u003ccode\u003eSubject\u003c/code\u003e\u003c/a\u003e information into a format required by the upstream service, the usage of this unifier makes only sense in combination with the \u003ca href=\"/docs/configuration/rules/pipeline_mechanisms/authenticators/#_noop\"\u003eNoop Authenticator\u003c/a\u003e, e.g. if your API should be publicly available. This authenticator type also doesn’t have any configuration options.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eTo enable the usage of this unifier, you have to set the \u003ccode\u003etype\u003c/code\u003e property to \u003ccode\u003enoop\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"exampleblock\"\u003e\n\u003cdiv class=\"title\"\u003eExample 1. Noop unifier configuration\u003c/div\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"yaml\"\u003e\u003cspan style=\"color: #a6e22e\"\u003eid\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003efoo\u003c/span\u003e\n\u003cspan style=\"color: #a6e22e\"\u003etype\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003enoop\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect2\"\u003e\n\u003ch3 id=\"_header\"\u003eHeader\u003c/h3\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThis unifier enables transformation of a \u003ca href=\"/docs/configuration/rules/pipeline_mechanisms/overview/#_subject\"\u003e\u003ccode\u003eSubject\u003c/code\u003e\u003c/a\u003e into HTTP headers.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eTo enable the usage of this unifier, you have to set the \u003ccode\u003etype\u003c/code\u003e property to \u003ccode\u003eheader\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eConfiguration using the \u003ccode\u003econfig\u003c/code\u003e property is mandatory. Following properties are available:\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"ulist\"\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003eheaders\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003estring map\u003c/em\u003e (mandatory, overridable)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eEnables configuration of arbitrary headers with any values build from available subject information (See also \u003ca href=\"/docs/configuration/rules/pipeline_mechanisms/overview/#_templating\"\u003eTemplating\u003c/a\u003e). Only \u003ccode\u003eSubject\u003c/code\u003e object is available in the template.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\u003cdiv class=\"exampleblock\"\u003e\n\u003cdiv class=\"title\"\u003eExample 2. Header unifier configuration\u003c/div\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"yaml\"\u003e\u003cspan style=\"color: #a6e22e\"\u003eid\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003efoo\u003c/span\u003e\n\u003cspan style=\"color: #a6e22e\"\u003etype\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eheader\u003c/span\u003e\n\u003cspan style=\"color: #a6e22e\"\u003econfig\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003eheaders\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n    \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003eX-User-ID\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e{{\u003c/span\u003e \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003equote .Subject.ID\u003c/span\u003e \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e}}\u003c/span\u003e\n    \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003eX-User-Email\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e{{\u003c/span\u003e \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003equote .Subject.Attributes\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e[\u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003eemail\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e]\u003c/span\u003e \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e}}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect2\"\u003e\n\u003ch3 id=\"_cookie\"\u003eCookie\u003c/h3\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThis unifier enables transformation of a \u003ca href=\"/docs/configuration/rules/pipeline_mechanisms/overview/#_subject\"\u003e\u003ccode\u003eSubject\u003c/code\u003e\u003c/a\u003e into cookies.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eTo enable the usage of this unifier, you have to set the \u003ccode\u003etype\u003c/code\u003e property to \u003ccode\u003ecookie\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eConfiguration using the \u003ccode\u003econfig\u003c/code\u003e property is mandatory. Following properties are available:\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"ulist\"\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003ecookies\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003estring map\u003c/em\u003e (mandatory, overridable)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eEnables configuration of arbitrary cookies with any values build from available subject information (See also \u003ca href=\"/docs/configuration/rules/pipeline_mechanisms/overview/#_templating\"\u003eTemplating\u003c/a\u003e). Only \u003ccode\u003eSubject\u003c/code\u003e object is available in the template.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\u003cdiv class=\"exampleblock\"\u003e\n\u003cdiv class=\"title\"\u003eExample 3. Cookie unifier configuration\u003c/div\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"yaml\"\u003e\u003cspan style=\"color: #a6e22e\"\u003eid\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003efoo\u003c/span\u003e\n\u003cspan style=\"color: #a6e22e\"\u003etype\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eheader\u003c/span\u003e\n\u003cspan style=\"color: #a6e22e\"\u003econfig\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003ecookies\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n    \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003euser_id_cookie\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e{{\u003c/span\u003e \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003equote .Subject.ID\u003c/span\u003e \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e}}\u003c/span\u003e\n    \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003euser_email_cookie\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e{{\u003c/span\u003e \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003equote .Subject.Attributes\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e[\u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003eemail\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e]\u003c/span\u003e \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e}}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect2\"\u003e\n\u003ch3 id=\"_jwt\"\u003eJWT\u003c/h3\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThis unifier enables transformation of a \u003ca href=\"/docs/configuration/rules/pipeline_mechanisms/overview/#_subject\"\u003e\u003ccode\u003eSubject\u003c/code\u003e\u003c/a\u003e into a bearer token in a \u003ca href=\"https://www.rfc-editor.org/rfc/rfc7519\"\u003eJWT\u003c/a\u003e format, which is made available to your upstream service in the HTTP \u003ccode\u003eAuthorization\u003c/code\u003e header. In addition to setting the JWT specific claims, it allows setting custom claims as well. Your upstream service can then verify the signature of the JWT by making use of heimdall’s JWKS endpoint to retrieve the required public keys/certificates from.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eTo enable the usage of this unifier, you have to set the \u003ccode\u003etype\u003c/code\u003e property to \u003ccode\u003ejwt\u003c/code\u003e. The usage of this unifier type requires a configured \u003ca href=\"/docs/configuration/cryptographic_material/\"\u003eSigner\u003c/a\u003e as well. At least it is a must in production environments.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eConfiguration using the \u003ccode\u003econfig\u003c/code\u003e property is optional. Following properties are available:\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"ulist\"\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003eclaims\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003estring\u003c/em\u003e (optional, overridable)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eYour template with custom claims, you would like to add to the JWT (See also \u003ca href=\"/docs/configuration/rules/pipeline_mechanisms/overview/#_templating\"\u003eTemplating\u003c/a\u003e). Only \u003ccode\u003eSubject\u003c/code\u003e object is available in the template.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003ettl\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003e\u003ca href=\"/docs/configuration/reference/types/#_duration\"\u003eDuration\u003c/a\u003e\u003c/em\u003e (optional, overridable)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eDefines how long the JWT should be valid. Defaults to 5 minutes. Heimdall sets the \u003ccode\u003eiat\u003c/code\u003e and the \u003ccode\u003enbf\u003c/code\u003e claims to the current system time. The value of the \u003ccode\u003eexp\u003c/code\u003e claim is then influenced by the \u003ccode\u003ettl\u003c/code\u003e property.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThe generated JWT is always cached until 5 seconds before its expiration. The cache key is calculated from the entire configuration of the unifier instance and the available information about the current subject.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"exampleblock\"\u003e\n\u003cdiv class=\"title\"\u003eExample 4. JWT unifier configuration\u003c/div\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"yaml\"\u003e\u003cspan style=\"color: #a6e22e\"\u003eid\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ejwt_unifier\u003c/span\u003e\n\u003cspan style=\"color: #a6e22e\"\u003etype\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ejwt\u003c/span\u003e\n\u003cspan style=\"color: #a6e22e\"\u003econfig\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003ettl\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e5m\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003eclaims\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e|\u003c/span\u003e\n    \u003cspan style=\"color: #e6db74\"\u003e{\u003c/span\u003e\n      \u003cspan style=\"color: #e6db74\"\u003e{{ $user_name := .Subject.Attributes.identity.user_name -}}\u003c/span\u003e\n      \u003cspan style=\"color: #e6db74\"\u003e\u0026#34;email\u0026#34;: {{ quote .Subject.Attributes.identity.email }},\u003c/span\u003e\n      \u003cspan style=\"color: #e6db74\"\u003e\u0026#34;email_verified\u0026#34;: {{ .Subject.Attributes.identity.email_verified }},\u003c/span\u003e\n      \u003cspan style=\"color: #e6db74\"\u003e\u0026#34;name\u0026#34;: {{ if $user_name }}{{ quote $user_name }}{{ else }}{{ quote $email }}{{ end }}\u003c/span\u003e\n    \u003cspan style=\"color: #e6db74\"\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n","sections":["Rules","Pipeline Mechanisms"],"tags":null,"title":"Unifiers","url":"/docs/configuration/rules/pipeline_mechanisms/unifiers/"},{"categories":null,"content":" Error Handlers are responsible for execution of logic if any of the authenticators, authorizers, contextualizers or unifiers fails. The error handler mechanisms range from a simple error response to the client which sent the request to sophisticated ones, supporting complex logic and redirects.\nError Handler Types The following sections describe the available error handler types in more detail.\nDefault This mechanism is always there and is executed if no other error handler mechanism is responsible for the error. Actually, there is no need to explicitly configure it. The only exception is to allow overriding the default rule’s error handler chain in a specific rule for performance reasons (if configured error handlers in the default rule should not be considered). This mechanism type doesn’t have any configuration options.\nTo enable the usage of this mechanism, you have to set the type property to default.\nExample 1. Configuring Default error handler to enable referencing it from rules id: foo type: default Redirect This error handler mechanism allows redirecting the client to another endpoint, e.g. to let the user authenticate. Technically this error handler returns e.g. a HTTP 302 Found response code and sets the HTTP Location header.\nTo enable the usage of this mechanism, you have to set the type property to redirect.\nConfiguration using the config property is mandatory. Following properties are available:\nto: URL (mandatory, not overridable)\nThe url to redirect the client to via the Location header. Can be templated and has access to the Request object.\nWhen creating query parameters by making use of templates, don’t forget to encode the values using the urlenc function. See also examples below. code: int (optional, not overridable)\nThe code to be used for the redirect. Defaults to 302 Found.\nHeimdall does not check the configured code for HTTP redirect validity! when: Error Condition array (mandatory, overridable)\nConditions, which must hold true for this error handler to execute. The defined conditions are evaluated using a boolean or. So at least one of the defined conditions must evaluate to true to have this error handler executed.\nExample 2. Redirect error handler configuration The redirect error handler below is configured to kick in if either\nthe first error condition evaluates to true. This condition is for web requests (HTTP Accept header contains text/html) if an authentication_error error occurred (an error raised by authenticators). In this case, it will redirect the client (for web requests, usually a browser) to http://127.0.0.1:4433/self-service/login/browser and also add the return_to query parameter set to the URL encoded value of the current url.\nOr, if the second condition evaluates to true. The only difference to the previous one is the error type, which is authorization_error in this case.\nSo, e.g. if Heimdall was handling the request for http://my-service.local/foo and run into an error like described above, the value of the HTTP Location header will be set to http://127.0.0.1:4433/self-service/login/browser?return_to=http%3A%2F%2Fmy-service.local%2Ffoo\nid: authenticate_with_kratos type: redirect config: to: http://127.0.0.1:4433/self-service/login/browser?return_to={{ .Request.URL | urlenc }} when: - error: - type: authentication_error request_headers: Accept: - text/html - error: - type: authorization_error request_headers: Accept: - text/html In this case the error condition can actually be simplified, so the mechanism configuration can look like this:\nid: authenticate_with_kratos type: redirect config: to: http://127.0.0.1:4433/self-service/login/browser?return_to={{ .Request.URL | urlenc }} when: - error: - type: authentication_error - type: authorization_error request_headers: Accept: - text/html WWW-Authenticate This error handler mechanism responds with HTTP 401 Unauthorized and a WWW-Authenticate HTTP header set. As of now, this error handler is the only one error handler, which transforms heimdall into an authentication system, a very simple one though ;). By configuring this error handler you can implement the Basic HTTP Authentication Scheme by also making use of the Basic Auth authenticator. Without that authenticator, the usage of this error handler does actually not make any sense.\nTo enable the usage of this error handler, you have to set the type property to www_authenticate.\nConfiguration using the config property is mandatory. Following properties are available:\nrealm: string (optional, overridable)\nThe \u0026#34;realm\u0026#34; according to RFC 7235, section 2.2. Defaults to \u0026#34;Please authenticate\u0026#34;.\nwhen: Error Condition array (mandatory, overridable)\nConditions, which must hold true for this error handler to execute. The defined conditions are evaluated using a boolean or. So at least one of the defined conditions must evaluate to true to have this error handler executed.\nExample 3. Configuration of WWW-Authenticate error handler The www authenticate error handler below is configured to kick in for web requests (HTTP Accept header contains text/html) if an authentication_error error occurred (an error raised by authenticators) and has been raised by an authenticator with id equal to basic_auth_authenticator. In this case, it will respond with HTTP 401 Unauthorized and a WWW-Authenticate header set to Basic realm=\u0026#34;My fancy app\u0026#34;.\nid: basic_authenticate type: www_authenticate config: realm: \u0026#34;My fancy app\u0026#34; when: - error: - type: authentication_error raised_by: basic_auth_authenticator request_headers: Accept: - text/html ","description":"","html_content":"\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eError Handlers are responsible for execution of logic if any of the \u003ca href=\"/docs/configuration/rules/pipeline_mechanisms/authenticators/\"\u003eauthenticators\u003c/a\u003e, \u003ca href=\"/docs/configuration/rules/pipeline_mechanisms/authorizers/\"\u003eauthorizers\u003c/a\u003e, \u003ca href=\"/docs/configuration/rules/pipeline_mechanisms/contextualizers/\"\u003econtextualizers\u003c/a\u003e or \u003ca href=\"/docs/configuration/rules/pipeline_mechanisms/unifiers/\"\u003eunifiers\u003c/a\u003e fails. The error handler mechanisms range from a simple error response to the client which sent the request to sophisticated ones, supporting complex logic and redirects.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect1\"\u003e\n\u003ch2 id=\"_error_handler_types\"\u003eError Handler Types\u003c/h2\u003e\n\u003cdiv class=\"sectionbody\"\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThe following sections describe the available error handler types in more detail.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect2\"\u003e\n\u003ch3 id=\"_default\"\u003eDefault\u003c/h3\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThis mechanism is always there and is executed if no other error handler mechanism is responsible for the error. Actually, there is no need to explicitly configure it. The only exception is to allow overriding the \u003ca href=\"/docs/configuration/rules/overview/#_default_rule\"\u003edefault rule’s\u003c/a\u003e error handler chain in a specific rule for performance reasons (if configured error handlers in the default rule should not be considered). This mechanism type doesn’t have any configuration options.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eTo enable the usage of this mechanism, you have to set the \u003ccode\u003etype\u003c/code\u003e property to \u003ccode\u003edefault\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"exampleblock\"\u003e\n\u003cdiv class=\"title\"\u003eExample 1. Configuring Default error handler to enable referencing it from rules\u003c/div\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"yaml\"\u003e\u003cspan style=\"color: #a6e22e\"\u003eid\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003efoo\u003c/span\u003e\n\u003cspan style=\"color: #a6e22e\"\u003etype\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003edefault\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect2\"\u003e\n\u003ch3 id=\"_redirect\"\u003eRedirect\u003c/h3\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThis error handler mechanism allows redirecting the client to another endpoint, e.g. to let the user authenticate. Technically this error handler returns e.g. a HTTP \u003ccode\u003e302 Found\u003c/code\u003e response code and sets the HTTP \u003ccode\u003eLocation\u003c/code\u003e header.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eTo enable the usage of this mechanism, you have to set the \u003ccode\u003etype\u003c/code\u003e property to \u003ccode\u003eredirect\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eConfiguration using the \u003ccode\u003econfig\u003c/code\u003e property is mandatory. Following properties are available:\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"ulist\"\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003eto\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003eURL\u003c/em\u003e (mandatory, not overridable)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThe url to redirect the client to via the \u003ccode\u003eLocation\u003c/code\u003e header. Can be templated and has access to the \u003ca href=\"/docs/configuration/rules/pipeline_mechanisms/overview/#_request\"\u003e\u003ccode\u003eRequest\u003c/code\u003e\u003c/a\u003e object.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"admonitionblock note\"\u003e\n\u003ctable\u003e\n\u003ctbody\u003e\u003ctr\u003e\n\u003ctd class=\"icon\"\u003e\n\u003ci class=\"fa icon-note\" title=\"Note\"\u003e\u003c/i\u003e\n\u003c/td\u003e\n\u003ctd class=\"content\"\u003e\nWhen creating query parameters by making use of templates, don’t forget to encode the values using the \u003ccode\u003eurlenc\u003c/code\u003e function. See also examples below.\n\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003ecode\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003eint\u003c/em\u003e (optional, not overridable)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThe code to be used for the redirect. Defaults to \u003ccode\u003e302 Found\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"admonitionblock warning\"\u003e\n\u003ctable\u003e\n\u003ctbody\u003e\u003ctr\u003e\n\u003ctd class=\"icon\"\u003e\n\u003ci class=\"fa icon-warning\" title=\"Warning\"\u003e\u003c/i\u003e\n\u003c/td\u003e\n\u003ctd class=\"content\"\u003e\nHeimdall does not check the configured code for HTTP redirect validity!\n\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003ewhen\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003e\u003ca href=\"/docs/configuration/reference/types/#_error_condition\"\u003eError Condition\u003c/a\u003e array\u003c/em\u003e (mandatory, overridable)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eConditions, which must hold true for this error handler to execute. The defined conditions are evaluated using a boolean or. So at least one of the defined conditions must evaluate to \u003ccode\u003etrue\u003c/code\u003e to have this error handler executed.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\u003cdiv class=\"exampleblock\"\u003e\n\u003cdiv class=\"title\"\u003eExample 2. Redirect error handler configuration\u003c/div\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThe redirect error handler below is configured to kick in if either\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"ulist\"\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003ethe first error condition evaluates to true. This condition is for web requests (HTTP \u003ccode\u003eAccept\u003c/code\u003e header contains \u003ccode\u003etext/html\u003c/code\u003e) if an \u003ccode\u003eauthentication_error\u003c/code\u003e error occurred (an error raised by authenticators). In this case, it will redirect the client (for web requests, usually a browser) to \u003ccode\u003ehttp://127.0.0.1:4433/self-service/login/browser\u003c/code\u003e and also add the \u003ccode\u003ereturn_to\u003c/code\u003e query parameter set to the URL encoded value of the current url.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eOr, if the second condition evaluates to true. The only difference to the previous one is the error type, which is \u003ccode\u003eauthorization_error\u003c/code\u003e in this case.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eSo, e.g. if Heimdall was handling the request for \u003ccode\u003ehttp://my-service.local/foo\u003c/code\u003e and run into an error like described above, the value of the HTTP \u003ccode\u003eLocation\u003c/code\u003e header will be set to \u003ccode\u003ehttp://127.0.0.1:4433/self-service/login/browser?return_to=http%3A%2F%2Fmy-service.local%2Ffoo\u003c/code\u003e\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"yaml\"\u003e\u003cspan style=\"color: #a6e22e\"\u003eid\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eauthenticate_with_kratos\u003c/span\u003e\n\u003cspan style=\"color: #a6e22e\"\u003etype\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eredirect\u003c/span\u003e\n\u003cspan style=\"color: #a6e22e\"\u003econfig\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003eto\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ehttp://127.0.0.1:4433/self-service/login/browser?return_to={{ .Request.URL | urlenc }}\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003ewhen\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n    \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003eerror\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n        \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003etype\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eauthentication_error\u003c/span\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003erequest_headers\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n        \u003cspan style=\"color: #a6e22e\"\u003eAccept\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n          \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003etext/html\u003c/span\u003e\n    \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003eerror\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n        \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003etype\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eauthorization_error\u003c/span\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003erequest_headers\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n        \u003cspan style=\"color: #a6e22e\"\u003eAccept\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n          \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003etext/html\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eIn this case the error condition can actually be simplified, so the mechanism configuration can look like this:\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"yaml\"\u003e\u003cspan style=\"color: #a6e22e\"\u003eid\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eauthenticate_with_kratos\u003c/span\u003e\n\u003cspan style=\"color: #a6e22e\"\u003etype\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eredirect\u003c/span\u003e\n\u003cspan style=\"color: #a6e22e\"\u003econfig\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003eto\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ehttp://127.0.0.1:4433/self-service/login/browser?return_to={{ .Request.URL | urlenc }}\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003ewhen\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n    \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003eerror\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n        \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003etype\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eauthentication_error\u003c/span\u003e\n        \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003etype\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eauthorization_error\u003c/span\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003erequest_headers\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n        \u003cspan style=\"color: #a6e22e\"\u003eAccept\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n          \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003etext/html\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect2\"\u003e\n\u003ch3 id=\"_www_authenticate\"\u003eWWW-Authenticate\u003c/h3\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThis error handler mechanism responds with HTTP \u003ccode\u003e401 Unauthorized\u003c/code\u003e and a \u003ccode\u003eWWW-Authenticate\u003c/code\u003e HTTP header set. As of now, this error handler is the only one error handler, which transforms heimdall into an authentication system, a very simple one though ;). By configuring this error handler you can implement the \u003ca href=\"https://datatracker.ietf.org/doc/html/rfc7617\"\u003eBasic HTTP Authentication Scheme\u003c/a\u003e by also making use of the \u003ca href=\"/docs/configuration/rules/pipeline_mechanisms/authenticators/#_basic_auth\"\u003eBasic Auth\u003c/a\u003e authenticator. Without that authenticator, the usage of this error handler does actually not make any sense.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eTo enable the usage of this error handler, you have to set the \u003ccode\u003etype\u003c/code\u003e property to \u003ccode\u003ewww_authenticate\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eConfiguration using the \u003ccode\u003econfig\u003c/code\u003e property is mandatory. Following properties are available:\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"ulist\"\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003erealm\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003estring\u003c/em\u003e (optional, overridable)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThe \u0026#34;realm\u0026#34; according to \u003ca href=\"https://datatracker.ietf.org/doc/html/rfc7235#section-2.2\"\u003eRFC 7235, section 2.2\u003c/a\u003e. Defaults to \u0026#34;Please authenticate\u0026#34;.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003ewhen\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003e\u003ca href=\"/docs/configuration/reference/types/#_error_condition\"\u003eError Condition\u003c/a\u003e array\u003c/em\u003e (mandatory, overridable)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eConditions, which must hold true for this error handler to execute. The defined conditions are evaluated using a boolean or. So at least one of the defined conditions must evaluate to \u003ccode\u003etrue\u003c/code\u003e to have this error handler executed.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\u003cdiv class=\"exampleblock\"\u003e\n\u003cdiv class=\"title\"\u003eExample 3. Configuration of WWW-Authenticate error handler\u003c/div\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThe www authenticate error handler below is configured to kick in for web requests (HTTP \u003ccode\u003eAccept\u003c/code\u003e header contains \u003ccode\u003etext/html\u003c/code\u003e) if an \u003ccode\u003eauthentication_error\u003c/code\u003e error occurred (an error raised by authenticators) and has been raised by an authenticator with id equal to \u003ccode\u003ebasic_auth_authenticator\u003c/code\u003e. In this case, it will respond with HTTP \u003ccode\u003e401 Unauthorized\u003c/code\u003e and a \u003ccode\u003eWWW-Authenticate\u003c/code\u003e header set to \u003ccode\u003eBasic realm=\u0026#34;My fancy app\u0026#34;\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"yaml\"\u003e\u003cspan style=\"color: #a6e22e\"\u003eid\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ebasic_authenticate\u003c/span\u003e\n\u003cspan style=\"color: #a6e22e\"\u003etype\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ewww_authenticate\u003c/span\u003e\n\u003cspan style=\"color: #a6e22e\"\u003econfig\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003erealm\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003eMy\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003efancy\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003eapp\u0026#34;\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003ewhen\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n    \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003eerror\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n        \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003etype\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eauthentication_error\u003c/span\u003e\n          \u003cspan style=\"color: #a6e22e\"\u003eraised_by\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ebasic_auth_authenticator\u003c/span\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003erequest_headers\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n        \u003cspan style=\"color: #a6e22e\"\u003eAccept\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n          \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003etext/html\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n","sections":["Rules","Pipeline Mechanisms"],"tags":null,"title":"Error Handlers","url":"/docs/configuration/rules/pipeline_mechanisms/error_handlers/"},{"categories":null,"content":" Rules are the heart of heimdall. These allow execution of arbitrary logic, required by your upstream service. This section describes everything related to the configuration of a particular rule and how can these be combined to rule sets, which can then be loaded by a rule provider.\nRule Configuration A single rule consists of the following properties:\nid: string (mandatory)\nThe unique identifier of a rule. It must be unique across all rules loaded by the same Rule Provider. To ensure this, it is recommended to let the id include the name of your upstream service, as well as its purpose. E.g. rule:my-service:public-api.\nmatch: RuleMatcher (mandatory)\nDefines how to match a rule and supports the following properties:\nurl: string (mandatory)\nGlob or Regex pattern of the endpoints of your upstream service, which this rule should apply to. Query parameters are ignored.\nstrategy: Matching Strategy (optional)\nWhich strategy to use for matching of the value, provided in the url property. Can be glob or regex. Defaults to glob.\nmethods: string array (optional)\nWhich HTTP methods (GET, POST, PATCH, etc) are allowed for the matched URL. If not specified, every request to that URL will result in 405 Method Not Allowed response from heimdall.\nupstream: string (mandatory in Proxy operation mode)\nDefines where to forward the proxied request to. Used only when heimdall is operated in the Proxy operation mode. Only the URL schema and the host parts are used if this property is specified.\nexecute: Regular Pipeline (mandatory)\nWhich mechanisms to use to authenticate, authorize, hydrate (enrich) and mutate the subject of the request.\non_error: Error Handler Pipeline (optional)\nWhich error handler mechanisms to use if any of the mechanisms, defined in the execute property, fails. This property is optional only, if a default rule has been configured and contains an on_error definition.\nExample 1. An example rule id: rule:foo:bar match: url: http://my-service.local/\u0026lt;**\u0026gt; strategy: glob upstream: http://backend-a:8080 methods: - GET - POST execute: - authenticator: foo - authorizer: bar - contextualizer: foo - unifier: zab on_error: - error_handler: foobar Matching Strategy Matching strategies are used to match the url patterns in rules and explicitly set by making use of matching_strategy rule property. Following strategies are available:\nregex - to match url expressions by making use of regular expressions.\nglob - to match url expressions by making use of glob expressions.\nHeimdall uses dlclark/regexp2 and gobwas/glob to match regex expressions, respectively glob expressions. Head over to linked resources to get more insights about possible options for expression definitions.\nExample 2. Regular expressions patterns https://mydomain.com/ matches https://mydomain.com/ and doesn’t match https://mydomain.com/foo or https://mydomain.com.\n\u0026lt;https|http\u0026gt;://mydomain.com/\u0026lt;.*\u0026gt; matches https://mydomain.com/ and http://mydomain.com/foo. Doesn’t match https://other-domain.com/ or https://mydomain.com.\nhttp://mydomain.com/\u0026lt;[:digit:]+\u0026gt; matches http://mydomain.com/123, but doesn’t match http://mydomain/abc.\nhttp://mydomain.com/\u0026lt;(?!protected).*\u0026gt; matches http://mydomain.com/resource, but doesn’t match http://mydomain.com/protected.\nExample 3. Glob patterns https://mydomain.com/\u0026lt;m?n\u0026gt; matches https://mydomain.com/man and does not match http://mydomain.com/foo.\nhttps://mydomain.com/\u0026lt;{foo*,bar*}\u0026gt; matches https://mydomain.com/foo or https://mydomain.com/bar and doesn’t match https://mydomain.com/any.\nRegular Pipeline As described in the Concepts section, heimdall’s decision pipeline consists of multiple mechanisms - at least consisting of authenticators and unifiers. The definition of such a pipeline happens as a list of required mechanisms (previously configured) with the corresponding ids in the following order:\nList of authenticators using authenticator as key, followed by the required authenticator id. Authenticators following the first defined in the list are used by heimdall as fallback. That is, if first authenticator fails due to missing authentication data, second is executed, etc. By default, fallback is not used if an authenticator fails due to validation errors of the given authentication data. E.g. if an authenticator fails to validate the signature of a JWT token, the next authenticator in the list will not be executed. Instead, the entire pipeline will fail and lead to the execution of the error handler pipeline. This list is mandatory if no default rule is configured.\nSome authenticators use the same sources to get subject authentication object from. E.g. the jwt and the oauth2_introspection authenticators can retrieve tokens from the same places in the request. If such authenticators are used in the same pipeline, you should configure the more specific ones before the more general ones to have working default fallbacks. To stay with the above example, the jwt authenticator is more specific compared to oauth2_introspection, as it will be only executed, if the token is in a JWT format. In contrast to this, the oauth2_introspection authenticator is more general and does not care about the token format, thus will feel responsible for the request as soon as it finds a bearer token. You can however also make use of the allow_fallback_on_error configuration property and set it to true. This will allow a fallback even if the verification of the credentials fail. List of contextualizers and authorizers in any order (optional). Can also be mixed. As with authenticators, the list definition happens using either contextualizer or authorizer as key, followed by the required id. All mechanisms in this list are executed in the order, they are defined. If any of these fails, the entire pipeline fails, which leads to the execution of the error handler pipeline. This list is optional.\nList of unifiers using unifiers as key, followed by the required unifier id. All unifiers in this list are executed in the order, they are defined. If any of these fails, the entire pipeline fails, which leads to the execution of the error handler pipeline. This list is mandatory if no default rule is configured.\nIn all cases, the used mechanism can be partially reconfigured if supported by the corresponding type. These reconfigurations are always local to the given rule. With other words, you can adjust your rule specific pipeline as you want without any side effects.\nExample 4. Complex pipeline # list of authenticators - authenticator: foo - authenticator: bar config: subject: anon # ... any further required authenticator # list of authorizers and contextualizers in any order - contextualizer: baz config: cache_ttl: 0s - authorizer: zab - contextualizer: foo - contextualizer: bar - authorizer: foo config: expressions: - expression: | // some expression logic deviating from the // definition in the pipeline configuration. # ... any further required authorizer or contextualizer # list of unifiers - unifier: foo - unifier: bar config: headers: - X-User-ID: {{ quote .ID }} # ... any further required unifiers This example uses\ntwo authenticators, with authenticator named bar being the fallback for the authenticator named foo. This fallback authenticator is obviously of type anonymous as it reconfigures the referenced prototype to use anon for subject id.\nmultiple contextualizers and authorizers, with first contextualizer having its cache disabled (cache_ttl set to 0s) and the last authorizer being of type cel as it reconfigures the referenced prototype to use a different authorization script.\ntwo unifiers, with the second one being obviously of type header, as it defines a X-User-ID header set to the value of the subject id to be forwarded to the upstream service.\nError Handler Pipeline Compared to the Regular Pipeline, the error handler pipeline is pretty simple. It is also a list of mechanisms, but all referenced types are error handler types. Thus, each entry in this list must have error_handler as key, followed by the ìd of the required error handler, previously defined in Heimdall’s Pipeline Mechanisms configuration. Error handlers are always executed as fallbacks. So, if the condition of the first error handler does not match, second is selected, if its condition matches, it is executed, otherwise the next one is selected, etc. If none of the conditions of the defined error handlers match, the default error handler is executed.\nAs with the regular pipeline, partial reconfiguration of the used mechanisms is possible if supported by the corresponding type. The overrides are always local to the given rule as well.\nExample 5. Two error handlers - error_handler: foo - error_handler: bar config: when: # rule specific conditions This example uses two error handlers, named foo and bar. bar will only be selected by heimdall if foo \u0026#39;s error condition (defined in Heimdall’s Pipeline Mechanisms configuration) does not match. bar does also override the error condition as required by the given rule.\nRule Set A rule set is just a list of rules, typically defined in a format specified by a particular provider. In its simplest case a rule set does not require further configuration options and can look as shown below:\nExample 6. Rule set with two rules - id: rule:1 match: url: https://my-service1.local/\u0026lt;**\u0026gt; methods: [ \u0026#34;GET\u0026#34; ] execute: - authorizer: foobar - id: rule:2 match: url: https://my-service2.local/\u0026lt;**\u0026gt; methods: [ \u0026#34;GET\u0026#34; ] execute: - authorizer: barfoo ","description":"","html_content":"\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eRules are the heart of heimdall. These allow execution of arbitrary logic, required by your upstream service. This section describes everything related to the configuration of a particular rule and how can these be combined to rule sets, which can then be loaded by a \u003ca href=\"/docs/configuration/rules/providers/\"\u003erule provider\u003c/a\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect1\"\u003e\n\u003ch2 id=\"_rule_configuration\"\u003eRule Configuration\u003c/h2\u003e\n\u003cdiv class=\"sectionbody\"\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eA single rule consists of the following properties:\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"ulist\"\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003eid\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003estring\u003c/em\u003e (mandatory)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThe unique identifier of a rule. It must be unique across all rules loaded by the same \u003ca href=\"/docs/configuration/rules/providers/\"\u003eRule Provider\u003c/a\u003e. To ensure this, it is recommended to let the \u003ccode\u003eid\u003c/code\u003e include the name of your upstream service, as well as its purpose. E.g. \u003ccode\u003erule:my-service:public-api\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003ematch\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003eRuleMatcher\u003c/em\u003e (mandatory)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eDefines how to match a rule and supports the following properties:\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"ulist\"\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003eurl\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003estring\u003c/em\u003e (mandatory)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eGlob or Regex pattern of the endpoints of your upstream service, which this rule should apply to. Query parameters are ignored.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003estrategy\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003e\u003ca href=\"#_matching_strategy\"\u003eMatching Strategy\u003c/a\u003e\u003c/em\u003e (optional)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eWhich strategy to use for matching of the value, provided in the \u003ccode\u003eurl\u003c/code\u003e property. Can be \u003ccode\u003eglob\u003c/code\u003e or \u003ccode\u003eregex\u003c/code\u003e. Defaults to \u003ccode\u003eglob\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003emethods\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003estring array\u003c/em\u003e (optional)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eWhich HTTP methods (\u003ccode\u003eGET\u003c/code\u003e, \u003ccode\u003ePOST\u003c/code\u003e, \u003ccode\u003ePATCH\u003c/code\u003e, etc) are allowed for the matched URL. If not specified, every request to that URL will result in \u003ccode\u003e405 Method Not Allowed\u003c/code\u003e response from heimdall.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003eupstream\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003estring\u003c/em\u003e (mandatory in Proxy operation mode)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eDefines where to forward the proxied request to. Used only when heimdall is operated in the Proxy operation mode. Only the URL schema and the host parts are used if this property is specified.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003eexecute\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003e\u003ca href=\"#_regular_pipeline\"\u003eRegular Pipeline\u003c/a\u003e\u003c/em\u003e (mandatory)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eWhich mechanisms to use to authenticate, authorize, hydrate (enrich) and mutate the subject of the request.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003eon_error\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003e\u003ca href=\"#_error_handler_pipeline\"\u003eError Handler Pipeline\u003c/a\u003e\u003c/em\u003e (optional)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eWhich error handler mechanisms to use if any of the mechanisms, defined in the \u003ccode\u003eexecute\u003c/code\u003e property, fails. This property is optional only, if a \u003ca href=\"/docs/configuration/rules/default/\"\u003edefault rule\u003c/a\u003e has been configured and contains an \u003ccode\u003eon_error\u003c/code\u003e definition.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\u003cdiv class=\"exampleblock\"\u003e\n\u003cdiv class=\"title\"\u003eExample 1. An example rule\u003c/div\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"yaml\"\u003e\u003cspan style=\"color: #a6e22e\"\u003eid\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003erule:foo:bar\u003c/span\u003e\n\u003cspan style=\"color: #a6e22e\"\u003ematch\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003eurl\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ehttp://my-service.local/\u0026lt;**\u0026gt;\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003estrategy\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eglob\u003c/span\u003e\n\u003cspan style=\"color: #a6e22e\"\u003eupstream\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ehttp://backend-a:8080\u003c/span\u003e\n\u003cspan style=\"color: #a6e22e\"\u003emethods\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n  \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eGET\u003c/span\u003e\n  \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ePOST\u003c/span\u003e\n\u003cspan style=\"color: #a6e22e\"\u003eexecute\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n  \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003eauthenticator\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003efoo\u003c/span\u003e\n  \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003eauthorizer\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ebar\u003c/span\u003e\n  \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003econtextualizer\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003efoo\u003c/span\u003e\n  \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003eunifier\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ezab\u003c/span\u003e\n\u003cspan style=\"color: #a6e22e\"\u003eon_error\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n  \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003eerror_handler\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003efoobar\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect2\"\u003e\n\u003ch3 id=\"_matching_strategy\"\u003eMatching Strategy\u003c/h3\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eMatching strategies are used to match the \u003ccode\u003eurl\u003c/code\u003e patterns in rules and explicitly set by making use of \u003ccode\u003ematching_strategy\u003c/code\u003e rule property. Following strategies are available:\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"ulist\"\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003eregex\u003c/code\u003e - to match \u003ccode\u003eurl\u003c/code\u003e expressions by making use of regular expressions.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003eglob\u003c/code\u003e - to match \u003ccode\u003eurl\u003c/code\u003e expressions by making use of glob expressions.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eHeimdall uses \u003ca href=\"https://github.com/dlclark/regexp2\"\u003edlclark/regexp2\u003c/a\u003e and \u003ca href=\"https://github.com/gobwas/glob\"\u003egobwas/glob\u003c/a\u003e to match \u003ccode\u003eregex\u003c/code\u003e expressions, respectively \u003ccode\u003eglob\u003c/code\u003e expressions. Head over to linked resources to get more insights about possible options for expression definitions.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"exampleblock\"\u003e\n\u003cdiv class=\"title\"\u003eExample 2. Regular expressions patterns\u003c/div\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cdiv class=\"ulist\"\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003ehttps://mydomain.com/\u003c/code\u003e matches \u003ccode\u003ehttps://mydomain.com/\u003c/code\u003e and doesn’t match \u003ccode\u003ehttps://mydomain.com/foo\u003c/code\u003e or \u003ccode\u003ehttps://mydomain.com\u003c/code\u003e.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003e\u0026lt;https|http\u0026gt;://mydomain.com/\u0026lt;.*\u0026gt;\u003c/code\u003e matches \u003ccode\u003ehttps://mydomain.com/\u003c/code\u003e and \u003ccode\u003ehttp://mydomain.com/foo\u003c/code\u003e. Doesn’t match \u003ccode\u003ehttps://other-domain.com/\u003c/code\u003e or \u003ccode\u003ehttps://mydomain.com\u003c/code\u003e.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003ehttp://mydomain.com/\u0026lt;[:digit:]+\u0026gt;\u003c/code\u003e matches \u003ccode\u003ehttp://mydomain.com/123\u003c/code\u003e, but doesn’t match \u003ccode\u003ehttp://mydomain/abc\u003c/code\u003e.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003ehttp://mydomain.com/\u0026lt;(?!protected).*\u0026gt;\u003c/code\u003e matches \u003ccode\u003ehttp://mydomain.com/resource\u003c/code\u003e, but doesn’t match \u003ccode\u003ehttp://mydomain.com/protected\u003c/code\u003e.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"exampleblock\"\u003e\n\u003cdiv class=\"title\"\u003eExample 3. Glob patterns\u003c/div\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cdiv class=\"ulist\"\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003ehttps://mydomain.com/\u0026lt;m?n\u0026gt;\u003c/code\u003e matches \u003ccode\u003ehttps://mydomain.com/man\u003c/code\u003e and does not match \u003ccode\u003ehttp://mydomain.com/foo\u003c/code\u003e.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003ehttps://mydomain.com/\u0026lt;{foo*,bar*}\u0026gt;\u003c/code\u003e matches \u003ccode\u003ehttps://mydomain.com/foo\u003c/code\u003e or \u003ccode\u003ehttps://mydomain.com/bar\u003c/code\u003e and doesn’t match \u003ccode\u003ehttps://mydomain.com/any\u003c/code\u003e.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect2\"\u003e\n\u003ch3 id=\"_regular_pipeline\"\u003eRegular Pipeline\u003c/h3\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eAs described in the \u003ca href=\"/docs/getting_started/concepts/\"\u003eConcepts\u003c/a\u003e section, heimdall’s decision pipeline consists of multiple mechanisms - at least consisting of \u003ca href=\"/docs/configuration/rules/pipeline_mechanisms/authenticators/\"\u003eauthenticators\u003c/a\u003e and \u003ca href=\"/docs/configuration/rules/pipeline_mechanisms/unifiers/\"\u003eunifiers\u003c/a\u003e. The definition of such a pipeline happens as a list of required mechanisms (previously \u003ca href=\"/docs/configuration/rules/pipeline_mechanisms/overview/\"\u003econfigured\u003c/a\u003e) with the corresponding ids in the following order:\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"ulist\"\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eList of \u003ca href=\"/docs/configuration/rules/pipeline_mechanisms/authenticators/\"\u003eauthenticators\u003c/a\u003e using \u003ccode\u003eauthenticator\u003c/code\u003e as key, followed by the required authenticator \u003ccode\u003eid\u003c/code\u003e. Authenticators following the first defined in the list are used by heimdall as fallback. That is, if first authenticator fails due to missing authentication data, second is executed, etc. By default, fallback is not used if an authenticator fails due to validation errors of the given authentication data. E.g. if an authenticator fails to validate the signature of a JWT token, the next authenticator in the list will not be executed. Instead, the entire pipeline will fail and lead to the execution of the \u003ca href=\"#_error_handler_pipeline\"\u003eerror handler pipeline\u003c/a\u003e. This list is mandatory if no \u003ca href=\"/docs/configuration/rules/default/\"\u003edefault rule\u003c/a\u003e is configured.\u003c/p\u003e\n\u003cdiv class=\"admonitionblock note\"\u003e\n\u003ctable\u003e\n\u003ctbody\u003e\u003ctr\u003e\n\u003ctd class=\"icon\"\u003e\n\u003ci class=\"fa icon-note\" title=\"Note\"\u003e\u003c/i\u003e\n\u003c/td\u003e\n\u003ctd class=\"content\"\u003e\nSome authenticators use the same sources to get subject authentication object from. E.g. the \u003ccode\u003ejwt\u003c/code\u003e and the \u003ccode\u003eoauth2_introspection\u003c/code\u003e authenticators can retrieve tokens from the same places in the request. If such authenticators are used in the same pipeline, you should configure the more specific ones before the more general ones to have working default fallbacks. To stay with the above example, the \u003ccode\u003ejwt\u003c/code\u003e authenticator is more specific compared to \u003ccode\u003eoauth2_introspection\u003c/code\u003e, as it will be only executed, if the token is in a JWT format. In contrast to this, the \u003ccode\u003eoauth2_introspection\u003c/code\u003e authenticator is more general and does not care about the token format, thus will feel responsible for the request as soon as it finds a bearer token. You can however also make use of the \u003ccode\u003eallow_fallback_on_error\u003c/code\u003e configuration property and set it to \u003ccode\u003etrue\u003c/code\u003e. This will allow a fallback even if the verification of the credentials fail.\n\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eList of \u003ca href=\"(/docs/configuration/rules/pipeline_mechanisms/contextualizers/\"\u003econtextualizers\u003c/a\u003e and \u003ca href=\"(/docs/configuration/rules/pipeline_mechanisms/authorizers/\"\u003eauthorizers\u003c/a\u003e in any order (optional). Can also be mixed. As with authenticators, the list definition happens using either \u003ccode\u003econtextualizer\u003c/code\u003e or \u003ccode\u003eauthorizer\u003c/code\u003e as key, followed by the required \u003ccode\u003eid\u003c/code\u003e. All mechanisms in this list are executed in the order, they are defined. If any of these fails, the entire pipeline fails, which leads to the execution of the \u003ca href=\"#_error_handler_pipeline\"\u003eerror handler pipeline\u003c/a\u003e. This list is optional.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eList of \u003ca href=\"/docs/configuration/rules/pipeline_mechanisms/unifiers/\"\u003eunifiers\u003c/a\u003e using \u003ccode\u003eunifiers\u003c/code\u003e as key, followed by the required unifier \u003ccode\u003eid\u003c/code\u003e. All unifiers in this list are executed in the order, they are defined. If any of these fails, the entire pipeline fails, which leads to the execution of the \u003ca href=\"#_error_handler_pipeline\"\u003eerror handler pipeline\u003c/a\u003e. This list is mandatory if no \u003ca href=\"/docs/configuration/rules/default/\"\u003edefault rule\u003c/a\u003e is configured.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eIn all cases, the used mechanism can be partially reconfigured if supported by the corresponding type. These reconfigurations are always local to the given rule. With other words, you can adjust your rule specific pipeline as you want without any side effects.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"exampleblock\"\u003e\n\u003cdiv class=\"title\"\u003eExample 4. Complex pipeline\u003c/div\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"yaml\"\u003e\u003cspan style=\"color: #75715e\"\u003e# list of authenticators\u003c/span\u003e\n\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003eauthenticator\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003efoo\u003c/span\u003e\n\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003eauthenticator\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ebar\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003econfig\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003esubject\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eanon\u003c/span\u003e\n  \u003cspan style=\"color: #75715e\"\u003e# ... any further required authenticator\u003c/span\u003e\n\u003cspan style=\"color: #75715e\"\u003e# list of authorizers and contextualizers in any order\u003c/span\u003e\n\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003econtextualizer\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ebaz\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003econfig\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003ecache_ttl\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e0s\u003c/span\u003e\n\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003eauthorizer\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ezab\u003c/span\u003e\n\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003econtextualizer\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003efoo\u003c/span\u003e\n\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003econtextualizer\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ebar\u003c/span\u003e\n\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003eauthorizer\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003efoo\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003econfig\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003eexpressions\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n      \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003eexpression\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e|\u003c/span\u003e\n          \u003cspan style=\"color: #e6db74\"\u003e// some expression logic deviating from the\u003c/span\u003e\n          \u003cspan style=\"color: #e6db74\"\u003e// definition in the pipeline configuration.\u003c/span\u003e\n  \u003cspan style=\"color: #75715e\"\u003e# ... any further required authorizer or contextualizer\u003c/span\u003e\n\u003cspan style=\"color: #75715e\"\u003e# list of unifiers\u003c/span\u003e\n\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003eunifier\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003efoo\u003c/span\u003e\n\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003eunifier\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ebar\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003econfig\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003eheaders\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n    \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003eX-User-ID\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e{{\u003c/span\u003e \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003equote .ID\u003c/span\u003e \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e}}\u003c/span\u003e\n  \u003cspan style=\"color: #75715e\"\u003e# ... any further required unifiers\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThis example uses\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"ulist\"\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003etwo authenticators, with authenticator named \u003ccode\u003ebar\u003c/code\u003e being the fallback for the authenticator named \u003ccode\u003efoo\u003c/code\u003e. This fallback authenticator is obviously of type \u003ca href=\"/docs/configuration/rules/pipeline_mechanisms/authenticators/#_anonymous\"\u003eanonymous\u003c/a\u003e as it reconfigures the referenced prototype to use \u003ccode\u003eanon\u003c/code\u003e for subject id.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003emultiple contextualizers and authorizers, with first contextualizer having its cache disabled (\u003ccode\u003ecache_ttl\u003c/code\u003e set to 0s) and the last authorizer being of type \u003ca href=\"/docs/configuration/rules/pipeline_mechanisms/authorizers/#_local_cel\"\u003ecel\u003c/a\u003e as it reconfigures the referenced prototype to use a different authorization script.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003etwo unifiers, with the second one being obviously of type \u003ca href=\"/docs/configuration/rules/pipeline_mechanisms/unifiers/#_header\"\u003eheader\u003c/a\u003e, as it defines a \u003ccode\u003eX-User-ID\u003c/code\u003e header set to the value of the subject id to be forwarded to the upstream service.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect2\"\u003e\n\u003ch3 id=\"_error_handler_pipeline\"\u003eError Handler Pipeline\u003c/h3\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eCompared to the \u003ca href=\"#_regular_pipeline\"\u003eRegular Pipeline\u003c/a\u003e, the error handler pipeline is pretty simple. It is also a list of mechanisms, but all referenced types are \u003ca href=\"/docs/configuration/rules/pipeline_mechanisms/error_handlers/\"\u003eerror handler types\u003c/a\u003e. Thus, each entry in this list must have \u003ccode\u003eerror_handler\u003c/code\u003e as key, followed by the \u003ccode\u003eìd\u003c/code\u003e of the required error handler, previously defined in Heimdall’s \u003ca href=\"/docs/configuration/rules/pipeline_mechanisms/overview/\"\u003ePipeline Mechanisms\u003c/a\u003e configuration. Error handlers are always executed as fallbacks. So, if the condition of the first error handler does not match, second is selected, if its condition matches, it is executed, otherwise the next one is selected, etc. If none of the conditions of the defined error handlers match, the \u003ca href=\"/docs/configuration/rules/pipeline_mechanisms/error_handlers/#_default\"\u003edefault error handler\u003c/a\u003e is executed.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eAs with the regular pipeline, partial reconfiguration of the used mechanisms is possible if supported by the corresponding type. The overrides are always local to the given rule as well.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"exampleblock\"\u003e\n\u003cdiv class=\"title\"\u003eExample 5. Two error handlers\u003c/div\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"yaml\"\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003eerror_handler\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003efoo\u003c/span\u003e\n\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003eerror_handler\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ebar\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003econfig\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003ewhen\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n      \u003cspan style=\"color: #75715e\"\u003e# rule specific conditions\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThis example uses two error handlers, named \u003ccode\u003efoo\u003c/code\u003e and \u003ccode\u003ebar\u003c/code\u003e. \u003ccode\u003ebar\u003c/code\u003e will only be selected by heimdall if \u003ccode\u003efoo\u003c/code\u003e \u0026#39;s error condition (defined in Heimdall’s \u003ca href=\"/docs/configuration/rules/pipeline_mechanisms/overview/\"\u003ePipeline Mechanisms\u003c/a\u003e configuration) does not match. \u003ccode\u003ebar\u003c/code\u003e does also override the error condition as required by the given rule.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect1\"\u003e\n\u003ch2 id=\"_rule_set\"\u003eRule Set\u003c/h2\u003e\n\u003cdiv class=\"sectionbody\"\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eA rule set is just a list of rules, typically defined in a format specified by a particular \u003ca href=\"/docs/configuration/rules/providers/\"\u003eprovider\u003c/a\u003e. In its simplest case a rule set does not require further configuration options and can look as shown below:\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"exampleblock\"\u003e\n\u003cdiv class=\"title\"\u003eExample 6. Rule set with two rules\u003c/div\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"yaml\"\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003eid\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003erule:1\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003ematch\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003eurl\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ehttps://my-service1.local/\u0026lt;**\u0026gt;\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003emethods\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e[\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003eGET\u0026#34;\u003c/span\u003e \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e]\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003eexecute\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n    \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003eauthorizer\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003efoobar\u003c/span\u003e\n\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003eid\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003erule:2\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003ematch\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003eurl\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ehttps://my-service2.local/\u0026lt;**\u0026gt;\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003emethods\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e[\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003eGET\u0026#34;\u003c/span\u003e \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e]\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003eexecute\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n    \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003eauthorizer\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ebarfoo\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n","sections":["Configuration","Rules"],"tags":null,"title":"Rule","url":"/docs/configuration/rules/configuration/"},{"categories":null,"content":" Heimdall lets you not only define upstream service specific rules, it does also support a definition of an optional default rule, which, if defined, kicks in, if no other rule matches. This way you can ensure secure defaults by simultaneously reducing the amount of work while defining upstream service API specific rules. That is, an upstream service API specific rule can reuse definitions from the default rule.\nThe default rule does not support all the properties, which can be configured in a specific rule. E.g. it can not be used to forward requests to an upstream service, heimdall is protecting. So, if you operate heimdall in the reverse proxy mode, the default rule should be configured to reject requests. Otherwise, heimdall will respond with an error. The configuration of the default rule can be done by making use of the default property and configuring the following options.\nmethods: string array (optional)\nWhich HTTP methods (GET, POST, PATCH, etc) are allowed. Defaults to an empty array. If the default rule is defined and the upstream service API specific rule (see also Rule Definition does not override it, no methods will be accepted, effectively resulting in 405 Method Not Allowed response to Heimdall’s client for any urls matched by that particular rule.\nexecute: Regular Pipeline (mandatory)\nWhich mechanisms to use for authentication, authorization, hydration (enrich) and mutation of the request and the subject. At least one authenticator and one unifier must be defined. A specific rule (see also Rule) can omit the definition of authenticators, if it wants to reuse the authenticators defined in the default rule. Same is true for other mechanisms. Exception are authorizers and contextualizers. As soon, as a specific rule defines at least one authorizer or contextualizer, those authorizers and contextualizers (defined in the default rule) are not considered anymore.\non_error: Error Handler Pipeline (mandatory)\nWhich error handler mechanisms to use if any of the mechanisms, defined in the execute property fail. Allows omitting the definition of error handlers in specific rules. As soon as a specific rule defines at least one error handler mechanism, all error handler mechanisms, defined in the default rule are ignored.\nExample 1. Default rule configuration rules: default: methods: - GET - PATCH execute: - authenticator: session_cookie_from_kratos_authn - authenticator: oauth2_introspect_token_from_keycloak_authn - authorizer: deny_all_requests_authz - unifier: jwt_unifier on_error: - error_handler: authenticate_with_kratos_eh This example defines a default rule, which allows HTTP GET and PATCH requests on any URL (will respond with 405 Method Not Allowed for any other HTTP method used by a client). The regular pipeline consists of two authenticators, with session_cookie_from_kratos_authn being the first and oauth2_introspect_token_from_keycloak_authn being the fallback (if the first one fails), a deny_all_requests_authz authorizer and the jwt_unifier unifier. The error pipeline is configured to execute only the authenticate_with_kratos_eh error handler.\nObviously, the regular pipeline (defined in the execute property) of this default rule will always result in an error due to deny_all_requests_authz. This way it is thought to provide secure defaults and let the upstream specific rules override at least the part dealing with authorization. Such an upstream specific rule could then look like follows:\nid: rule:my-service:protected-api match: url: http://my-service.local/foo execute: - authorizer: allow_all_requests_authz Take a look at how methods, on_error, as well as the authenticators and unifiers from the execute definition of the default rule are reused. Easy, no?\n","description":"","html_content":"\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eHeimdall lets you not only define upstream service specific rules, it does also support a definition of an optional default rule, which, if defined, kicks in, if no other rule matches. This way you can ensure secure defaults by simultaneously reducing the amount of work while defining upstream service API specific rules. That is, an upstream service API specific rule can reuse definitions from the default rule.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"admonitionblock note\"\u003e\n\u003ctable\u003e\n\u003ctbody\u003e\u003ctr\u003e\n\u003ctd class=\"icon\"\u003e\n\u003ci class=\"fa icon-note\" title=\"Note\"\u003e\u003c/i\u003e\n\u003c/td\u003e\n\u003ctd class=\"content\"\u003e\nThe default rule does not support all the properties, which can be configured in a specific \u003ca href=\"/docs/configuration/rules/configuration/\"\u003erule\u003c/a\u003e. E.g. it can not be used to forward requests to an upstream service, heimdall is protecting. So, if you operate heimdall in the reverse proxy mode, the default rule should be configured to reject requests. Otherwise, heimdall will respond with an error.\n\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThe configuration of the default rule can be done by making use of the \u003ccode\u003edefault\u003c/code\u003e property and configuring the following options.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"ulist\"\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003emethods\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003estring array\u003c/em\u003e (optional)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eWhich HTTP methods (\u003ccode\u003eGET\u003c/code\u003e, \u003ccode\u003ePOST\u003c/code\u003e, \u003ccode\u003ePATCH\u003c/code\u003e, etc) are allowed. Defaults to an empty array. If the default rule is defined and the upstream service API specific rule (see also \u003ca href=\"/docs/configuration/rules/configuration/\"\u003eRule Definition\u003c/a\u003e does not override it, no methods will be accepted, effectively resulting in \u003ccode\u003e405 Method Not Allowed\u003c/code\u003e response to Heimdall’s client for any urls matched by that particular rule.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003eexecute\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003e\u003ca href=\"/docs/configuration/rules/configuration/#_regular_pipeline\"\u003eRegular Pipeline\u003c/a\u003e\u003c/em\u003e (mandatory)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eWhich mechanisms to use for authentication, authorization, hydration (enrich) and mutation of the request and the subject. At least one \u003ca href=\"/docs/configuration/rules/pipeline_mechanisms/authenticators/\"\u003eauthenticator\u003c/a\u003e and one \u003ca href=\"/docs/configuration/rules/pipeline_mechanisms/unifiers/\"\u003eunifier\u003c/a\u003e must be defined. A specific rule (see also \u003ca href=\"/docs/configuration/rules/configuration/\"\u003eRule\u003c/a\u003e) can omit the definition of authenticators, if it wants to reuse the authenticators defined in the default rule. Same is true for other mechanisms. Exception are \u003ca href=\"/docs/configuration/rules/pipeline_mechanisms/authorizers/\"\u003eauthorizers\u003c/a\u003e and \u003ca href=\"/docs/configuration/rules/pipeline_mechanisms/contextualizers/\"\u003econtextualizers\u003c/a\u003e. As soon, as a specific rule defines at least one authorizer or contextualizer, those authorizers and contextualizers (defined in the default rule) are not considered anymore.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003eon_error\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003e\u003ca href=\"/docs/configuration/rules/configuration/#_error_handler_pipeline\"\u003eError Handler Pipeline\u003c/a\u003e\u003c/em\u003e (mandatory)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eWhich error handler mechanisms to use if any of the mechanisms, defined in the \u003ccode\u003eexecute\u003c/code\u003e property fail. Allows omitting the definition of error handlers in specific rules. As soon as a specific rule defines at least one error handler mechanism, all error handler mechanisms, defined in the default rule are ignored.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\u003cdiv class=\"exampleblock\"\u003e\n\u003cdiv class=\"title\"\u003eExample 1. Default rule configuration\u003c/div\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"yaml\"\u003e\u003cspan style=\"color: #a6e22e\"\u003erules\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003edefault\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003emethods\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n      \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eGET\u003c/span\u003e\n      \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ePATCH\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003eexecute\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n      \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003eauthenticator\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003esession_cookie_from_kratos_authn\u003c/span\u003e\n      \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003eauthenticator\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eoauth2_introspect_token_from_keycloak_authn\u003c/span\u003e\n      \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003eauthorizer\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003edeny_all_requests_authz\u003c/span\u003e\n      \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003eunifier\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ejwt_unifier\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003eon_error\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n      \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003eerror_handler\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eauthenticate_with_kratos_eh\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThis example defines a default rule, which allows HTTP \u003ccode\u003eGET\u003c/code\u003e and \u003ccode\u003ePATCH\u003c/code\u003e requests on any URL (will respond with \u003ccode\u003e405 Method Not Allowed\u003c/code\u003e for any other HTTP method used by a client). The regular pipeline consists of two authenticators, with \u003ccode\u003esession_cookie_from_kratos_authn\u003c/code\u003e being the first and \u003ccode\u003eoauth2_introspect_token_from_keycloak_authn\u003c/code\u003e being the fallback (if the first one fails), a \u003ccode\u003edeny_all_requests_authz\u003c/code\u003e authorizer and the \u003ccode\u003ejwt_unifier\u003c/code\u003e unifier. The error pipeline is configured to execute only the \u003ccode\u003eauthenticate_with_kratos_eh\u003c/code\u003e error handler.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eObviously, the regular pipeline (defined in the \u003ccode\u003eexecute\u003c/code\u003e property) of this default rule will always result in an error due to \u003ccode\u003edeny_all_requests_authz\u003c/code\u003e. This way it is thought to provide secure defaults and let the upstream specific rules override at least the part dealing with authorization. Such an upstream specific rule could then look like follows:\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"yaml\"\u003e\u003cspan style=\"color: #a6e22e\"\u003eid\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003erule:my-service:protected-api\u003c/span\u003e\n\u003cspan style=\"color: #a6e22e\"\u003ematch\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003eurl\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ehttp://my-service.local/foo\u003c/span\u003e\n\u003cspan style=\"color: #a6e22e\"\u003eexecute\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n  \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003eauthorizer\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eallow_all_requests_authz\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eTake a look at how \u003ccode\u003emethods\u003c/code\u003e, \u003ccode\u003eon_error\u003c/code\u003e, as well as the authenticators and unifiers from the \u003ccode\u003eexecute\u003c/code\u003e definition of the default rule are reused. Easy, no?\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n","sections":["Configuration","Rules"],"tags":null,"title":"Default Rule","url":"/docs/configuration/rules/default/"},{"categories":null,"content":" Providers define the sources to load the Rule Sets from. These make Heimdall’s behavior dynamic. All providers, you want to enable for a Heimdall instance must be configured within the providers section of heimdall’s rules configuration.\nSupported providers, including the corresponding configuration options are described below\nFilesystem The filesystem provider allows loading of rule sets from a file system. The configuration of this provider goes into the file_system property. This provider is handy for e.g. starting playing around with heimdall, e.g. locally, or using Docker, as well as if your deployment strategy considers deploying a heimdall instance as a Side-Car for each of your services.\nFollowing configuration options are supported:\nsrc: string (mandatory)\nCan either be a single file, containing a rule set, or a directory with files, each containing a rule set.\nwatch: boolean (optional)\nWhether the configured src should be watched for updates. Defaults to false. If the src has been configured to a single file, the provider will watch for changes in that file. Otherwise, if the src has been configured to a directory, the provider will watch for files appearing and disappearing in this directory, as well as for changes in each particular file in this directory. Recursive lookup is not supported. That is, if the configured directory contains further directories, these, as well as their contents are ignored.\nThis provider doesn’t need any additional configuration for a rule set. So the contents of files can be just a list of rules as described in Rule Sets.\nExample 1. Load rule sets from the files residing in the /path/to/rules/dir directory and watch for changes. file_system: src: /path/to/rules/dir watch: true Example 2. Load rule sets from the /path/to/rules.yaml file without watching it for changes. file_system: src: /path/to/rules.yaml HTTP Endpoint This provider allows loading of Rule Sets from any remote endpoint accessible via HTTP(s) and supports rule sets in YAML, as well as in JSON format. The differentiation happens based on the Content-Type set in the response from the endpoint, which must be either application/yaml or application/json, otherwise an error is logged and the response from the endpoint is ignored.\nThe loading and removal of rules happens as follows:\nif the response status code is an HTTP 200 OK and contains a Rule Sets in a known format (see above), the corresponding rules are loaded (if the definitions are valid)\nin case of network issues, like dns errors, timeouts and alike, the rule sets previously received from the corresponding endpoints are preserved.\nin any other case related to network communication (e.g. not 200 status code, empty response body, unsupported format, network issues, etc.), the corresponding rules are removed if these were previously loaded.\nThe configuration of this provider goes into the http_endpoint property. In contrast to the Filesystem provider it can be configured with as many endpoints to load rule sets from as required for the particular use case.\nFollowing configuration options are supported:\nwatch_interval: Duration (optional)\nWhether the configured endpoints should be polled for updates. Defaults to 0s (polling disabled).\nendpoints: RuleSetEndpoint array (mandatory)\nEach entry of that array supports all the properties defined by Endpoint, except method, which is always GET. enable_http_cacheAs with the Endpoint type, at least the url must be configured. Following properties are defined in addition:\nrule_path_match_prefix: string (optional)\nThis property can be used to create kind of a namespace for the rule sets retrieved from the different endpoints. If set, the provider checks whether the urls specified in all rules retrieved from the referenced endpoint have the defined path prefix. If not, a warning is emitted and the rule set is ignored. This can be used to ensure a rule retrieved from one endpoint does not collide with a rule from another endpoint.\nHTTP caching according to RFC 7234 is enabled by default. It can be disabled by setting enable_http_cache to false. This provider doesn’t need any additional configuration for a rule set. So the contents of files can be just a list of rules as described in Rule Sets.\nExample 3. Minimal possible configuration Here the provider is configured to load a rule set from one endpoint without polling it for changes.\nhttp_endpoint: endpoints: - url: http://foo.bar/ruleset1 Example 4. Load rule sets from remote endpoints and watch for changes. Here, the provider is configured to poll the two defined rule set endpoints for changes every 5 minutes.\nThe configuration for the first endpoint instructs heimdall to ensure all urls defined in the rules coming from that endpoint must match the defined path prefix.\nThe configuration for the second endpoint defines the rule_path_match_prefix as well. It also defines a couple of other properties. One to ensure the communication to that endpoint is more resilient by setting the retry options and since this endpoint is protected by an API key, it defines the corresponding options as well.\nhttp_endpoint: watch_interval: 5m endpoints: - url: http://foo.bar/ruleset1 rule_path_match_prefix: /foo/bar - url: http://foo.bar/ruleset2 rule_path_match_prefix: /bar/foo retry: give_up_after: 5s max_delay: 250ms auth: type: api_key config: name: X-Api-Key value: super-secret in: header Cloud Blob This provider allows loading of Rule Sets from cloud blobs, like AWS S3 buckets, Google Cloud Storage, Azure Blobs, or other API compatible implementations and supports rule sets in YAML, as well as in JSON format. The differentiation happens based on the Content-Type set in the metadata of the loaded blob, which must be either application/yaml or application/json, otherwise an error is logged and the blob is ignored.\nThe loading and removal of rules happens as follows:\nif the response status code is an HTTP 200 OK and contains a rule set in a known format (see above), the corresponding rules are loaded (if the definitions are valid)\nin case of network issues, like dns errors, timeouts and alike, the rule sets previously received from the corresponding buckets are preserved.\nin any other case related to network communication (like, not 200 status code, empty response body, unsupported format, etc.), the corresponding rules are removed if these were previously loaded.\nThe configuration of this provider goes into the cloud_blob property. As with HTTP Endpoint provider, it can be configured with as many buckets/blobs to load rule sets from as required for the particular use case.\nFollowing configuration options are supported:\nwatch_interval: Duration (optional)\nWhether the configured buckets should be polled for updates. Defaults to 0s (polling disabled).\nbuckets: BlobReference array (mandatory)\nEach BlobReference entry in that array supports the following properties:\nurl: string (mandatory)\nThe actual url to the bucket or to a specific blob in the bucket.\nprefix: string (optional)\nIndicates that only blobs with a key starting with this prefix should be retrieved\nrule_path_match_prefix: string (optional)\nCreates kind of a namespace for the rule sets retrieved from the blobs. If set, the provider checks whether the urls patterns specified in all rules retrieved from the referenced bucket have the defined path prefix. If that rule is violated, a warning is emitted and the rule set is ignored. This can be used to ensure a rule retrieved from one endpoint does not override a rule from another endpoint.\nThe differentiation which storage is used is based on the URL scheme. These are:\ns3 for AWS S3 buckets\ngs for Google Cloud Storage and\nazblob for Azure Blob Storage\nOther API compatible storage services, like Minio, Ceph, SeaweedFS, etc. can be used as well. The corresponding and other options can be found in the Go CDK Blob documentation, the implementation of this provider is based on.\nThe communication to the storage services requires an active session to the corresponding cloud provider. The session information is taken from the vendor specific environment variables, respectively configuration. See AWS Session, GC Application Default Credentials and Azure Storage Access for more information. Example 5. Minimal possible configuration Here the provider is configured to load rule sets from all blobs stored on the Google Cloud Storage bucket named \u0026#34;my-bucket\u0026#34; without polling for changes.\ncloud_blob: buckets: - url: gs://my-bucket Example 6. Load rule sets from AWS S3 buckets and watch for changes. cloud_blob: watch_interval: 2m buckets: - url: gs://my-bucket prefix: service1 rule_path_match_prefix: /service1 - url: gs://my-bucket prefix: service2 rule_path_match_prefix: /service2 - url: s3://my-bucket/my-rule-set?region=us-west-1 Here, the provider is configured to poll multiple buckets with rule sets for changes every 2 minutes.\nThe first two bucket reference configurations reference actually the same bucket on Google Cloud Storage, but different blobs based on the configured blob prefix. The first one will let heimdall loading only those blobs, which start with service1, the second only those, which start with service2. As rule_path_match_prefix are defined for both as well, heimdall will ensure, that rule sets loaded from the corresponding blobs will not overlap in their url matching definitions.\nThe last one instructs heimdall to load rule set from a specific blob, namely a blob named my-rule-set, which resides on the my-bucket AWS S3 bucket, which is located in the us-west-1 AWS region.\nKubernetes This provider is only supported if heimdall is running within Kubernetes and allows usage of Rule Set resources deployed to the same Kubernetes environment. The configuration of this provider goes into the kubernetes property and supports the following configuration options:\nauth_class: string (optional)\nBy making use of this property, you can specify which RuleSets should be used by this particular heimdall instance. If specified, heimdall will consider the value of the authClassName attribute of each RuleSet deployed to the cluster and load only those rules, which authClassName values match the value of auth_class. If not set all RuleSets will be used.\nExample 7. Minimal possible configuration Here, the provider is just enabled. Since no auth_class is configured, it will load all RuleSets deployed to the Kubernetes environment.\nkubernetes: {} Example 8. Configuration with auth_class set Here, the provider is configured to consider only those RuleSets, which authClassName is set to foo.\nkubernetes: auth_class: foo This provider requires a RuleSet CRD being deployed, otherwise heimdall will not be able to monitor corresponding resources and emit error messages to the log.\nIf you have used the Helm Chart to install heimdall, this CRD is already installed. You can however install it also like this:\n$ kubectl apply -f https://raw.githubusercontent.com/dadrus/heimdall/main/charts/heimdall/crds/ruleset.yaml RuleSet resource As written above, the kubernetes provider supports only rules, deployed as customer RuleSet resources.\nEach RuleSet has the following attributes:\nname: string (required)\nThe name of a rule set.\nauthClassName: string (optional)\nReferences the heimdall instance, which should use this RuleSet.\nrules: Rule Configuration array (mandatory)\nList of the actual rules.\nExample 9. Simple Example apiVersion: heimdall.dadrus.github.com/v1alpha1 kind: RuleSet metadata: name: \u0026#34;\u0026lt;some name\u0026gt;\u0026#34; spec: authClassName: \u0026#34;\u0026lt;optional auth_class reference (see above)\u0026gt; \u0026#34; rules: - id: \u0026#34;\u0026lt;identifier of a rule 1\u0026gt;\u0026#34; match: url: http://127.0.0.1:9090/foo/\u0026lt;**\u0026gt; execute: - authenticator: foo - authorizer: bar ","description":"","html_content":"\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eProviders define the sources to load the \u003ca href=\"/docs/configuration/rules/configuration/#_rule_set\"\u003eRule Sets\u003c/a\u003e from. These make Heimdall’s behavior dynamic. All providers, you want to enable for a Heimdall instance must be configured within the \u003ccode\u003eproviders\u003c/code\u003e section of heimdall’s \u003ccode\u003erules\u003c/code\u003e configuration.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eSupported providers, including the corresponding configuration options are described below\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect1\"\u003e\n\u003ch2 id=\"_filesystem\"\u003eFilesystem\u003c/h2\u003e\n\u003cdiv class=\"sectionbody\"\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThe filesystem provider allows loading of rule sets from a file system. The configuration of this provider goes into the \u003ccode\u003efile_system\u003c/code\u003e property. This provider is handy for e.g. starting playing around with heimdall, e.g. locally, or using Docker, as well as if your deployment strategy considers deploying a heimdall instance as a Side-Car for each of your services.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eFollowing configuration options are supported:\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"ulist\"\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003esrc\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003estring\u003c/em\u003e (mandatory)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eCan either be a single file, containing a rule set, or a directory with files, each containing a rule set.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003ewatch\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003eboolean\u003c/em\u003e (optional)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eWhether the configured \u003ccode\u003esrc\u003c/code\u003e should be watched for updates. Defaults to \u003ccode\u003efalse\u003c/code\u003e. If the \u003ccode\u003esrc\u003c/code\u003e has been configured to a single file, the provider will watch for changes in that file. Otherwise, if the \u003ccode\u003esrc\u003c/code\u003e has been configured to a directory, the provider will watch for files appearing and disappearing in this directory, as well as for changes in each particular file in this directory. Recursive lookup is not supported. That is, if the configured directory contains further directories, these, as well as their contents are ignored.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThis provider doesn’t need any additional configuration for a rule set. So the contents of files can be just a list of rules as described in \u003ca href=\"/docs/configuration/rules/configuration/#_rule_set\"\u003eRule Sets\u003c/a\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"exampleblock\"\u003e\n\u003cdiv class=\"title\"\u003eExample 1. Load rule sets from the files residing in the  \u003ccode\u003e/path/to/rules/dir\u003c/code\u003e directory and watch for changes.\u003c/div\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"yaml\"\u003e\u003cspan style=\"color: #a6e22e\"\u003efile_system\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003esrc\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e/path/to/rules/dir\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003ewatch\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #66d9ef\"\u003etrue\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"exampleblock\"\u003e\n\u003cdiv class=\"title\"\u003eExample 2. Load rule sets from the \u003ccode\u003e/path/to/rules.yaml\u003c/code\u003e file without watching it for changes.\u003c/div\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"yaml\"\u003e\u003cspan style=\"color: #a6e22e\"\u003efile_system\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003esrc\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e/path/to/rules.yaml\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect1\"\u003e\n\u003ch2 id=\"_http_endpoint\"\u003eHTTP Endpoint\u003c/h2\u003e\n\u003cdiv class=\"sectionbody\"\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThis provider allows loading of \u003ca href=\"/docs/configuration/rules/configuration/#_rule_set\"\u003eRule Sets\u003c/a\u003e from any remote endpoint accessible via HTTP(s) and supports rule sets in YAML, as well as in JSON format. The differentiation happens based on the \u003ccode\u003eContent-Type\u003c/code\u003e set in the response from the endpoint, which must be either \u003ccode\u003eapplication/yaml\u003c/code\u003e or \u003ccode\u003eapplication/json\u003c/code\u003e, otherwise an error is logged and the response from the endpoint is ignored.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThe loading and removal of rules happens as follows:\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"ulist\"\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eif the response status code is an HTTP 200 OK and contains a \u003ca href=\"/docs/configuration/rules/configuration/#_rule_set\"\u003eRule Sets\u003c/a\u003e in a known format (see above), the corresponding rules are loaded (if the definitions are valid)\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003ein case of network issues, like dns errors, timeouts and alike, the rule sets previously received from the corresponding endpoints are preserved.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003ein any other case related to network communication (e.g. not 200 status code, empty response body, unsupported format, network issues, etc.), the corresponding rules are removed if these were previously loaded.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThe configuration of this provider goes into the \u003ccode\u003ehttp_endpoint\u003c/code\u003e property. In contrast to the \u003ca href=\"#_filesystem\"\u003eFilesystem\u003c/a\u003e provider it can be configured with as many endpoints to load rule sets from as required for the particular use case.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eFollowing configuration options are supported:\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"ulist\"\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003ewatch_interval\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003e\u003ca href=\"/docs/configuration/reference/types/#_duration\"\u003eDuration\u003c/a\u003e\u003c/em\u003e (optional)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eWhether the configured \u003ccode\u003eendpoints\u003c/code\u003e should be polled for updates. Defaults to \u003ccode\u003e0s\u003c/code\u003e (polling disabled).\u003c/p\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003eendpoints\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003eRuleSetEndpoint array\u003c/em\u003e (mandatory)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eEach entry of that array supports all the properties defined by \u003ca href=\"/docs/configuration/reference/types/#_endpoint\"\u003eEndpoint\u003c/a\u003e, except \u003ccode\u003emethod\u003c/code\u003e, which is always \u003ccode\u003eGET\u003c/code\u003e. enable_http_cacheAs with the \u003ca href=\"/docs/configuration/reference/types/#_endpoint\"\u003eEndpoint\u003c/a\u003e type, at least the \u003ccode\u003eurl\u003c/code\u003e must be configured. Following properties are defined in addition:\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"ulist\"\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003erule_path_match_prefix\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003estring\u003c/em\u003e (optional)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThis property can be used to create kind of a namespace for the rule sets retrieved from the different endpoints. If set, the provider checks whether the urls specified in all rules retrieved from the referenced endpoint have the defined path prefix. If not, a warning is emitted and the rule set is ignored. This can be used to ensure a rule retrieved from one endpoint does not collide with a rule from another endpoint.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\u003cdiv class=\"admonitionblock note\"\u003e\n\u003ctable\u003e\n\u003ctbody\u003e\u003ctr\u003e\n\u003ctd class=\"icon\"\u003e\n\u003ci class=\"fa icon-note\" title=\"Note\"\u003e\u003c/i\u003e\n\u003c/td\u003e\n\u003ctd class=\"content\"\u003e\nHTTP caching according to \u003ca href=\"https://www.rfc-editor.org/rfc/rfc7234\"\u003eRFC 7234\u003c/a\u003e is enabled by default. It can be disabled by setting \u003ccode\u003eenable_http_cache\u003c/code\u003e to \u003ccode\u003efalse\u003c/code\u003e.\n\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThis provider doesn’t need any additional configuration for a rule set. So the contents of files can be just a list of rules as described in \u003ca href=\"/docs/configuration/rules/configuration/#_rule_set\"\u003eRule Sets\u003c/a\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"exampleblock\"\u003e\n\u003cdiv class=\"title\"\u003eExample 3. Minimal possible configuration\u003c/div\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eHere the provider is configured to load a rule set from one endpoint without polling it for changes.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"yaml\"\u003e\u003cspan style=\"color: #a6e22e\"\u003ehttp_endpoint\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003eendpoints\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n    \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003eurl\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ehttp://foo.bar/ruleset1\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"exampleblock\"\u003e\n\u003cdiv class=\"title\"\u003eExample 4. Load rule sets from remote endpoints and watch for changes.\u003c/div\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eHere, the provider is configured to poll the two defined rule set endpoints for changes every 5 minutes.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThe configuration for the first endpoint instructs heimdall to ensure all urls defined in the rules coming from that endpoint must match the defined path prefix.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThe configuration for the second endpoint defines the \u003ccode\u003erule_path_match_prefix\u003c/code\u003e as well. It also defines a couple of other properties. One to ensure the communication to that endpoint is more resilient by setting the \u003ccode\u003eretry\u003c/code\u003e options and since this endpoint is protected by an API key, it defines the corresponding options as well.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"yaml\"\u003e\u003cspan style=\"color: #a6e22e\"\u003ehttp_endpoint\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003ewatch_interval\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e5m\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003eendpoints\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n    \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003eurl\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ehttp://foo.bar/ruleset1\u003c/span\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003erule_path_match_prefix\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e/foo/bar\u003c/span\u003e\n    \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003eurl\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ehttp://foo.bar/ruleset2\u003c/span\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003erule_path_match_prefix\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e/bar/foo\u003c/span\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003eretry\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n        \u003cspan style=\"color: #a6e22e\"\u003egive_up_after\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e5s\u003c/span\u003e\n        \u003cspan style=\"color: #a6e22e\"\u003emax_delay\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e250ms\u003c/span\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003eauth\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n        \u003cspan style=\"color: #a6e22e\"\u003etype\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eapi_key\u003c/span\u003e\n        \u003cspan style=\"color: #a6e22e\"\u003econfig\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n          \u003cspan style=\"color: #a6e22e\"\u003ename\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eX-Api-Key\u003c/span\u003e\n          \u003cspan style=\"color: #a6e22e\"\u003evalue\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003esuper-secret\u003c/span\u003e\n          \u003cspan style=\"color: #a6e22e\"\u003ein\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eheader\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect1\"\u003e\n\u003ch2 id=\"_cloud_blob\"\u003eCloud Blob\u003c/h2\u003e\n\u003cdiv class=\"sectionbody\"\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThis provider allows loading of \u003ca href=\"/docs/configuration/rules/configuration/#_rule_set\"\u003eRule Sets\u003c/a\u003e from cloud blobs, like AWS S3 buckets, Google Cloud Storage, Azure Blobs, or other API compatible implementations and supports rule sets in YAML, as well as in JSON format. The differentiation happens based on the \u003ccode\u003eContent-Type\u003c/code\u003e set in the metadata of the loaded blob, which must be either \u003ccode\u003eapplication/yaml\u003c/code\u003e or \u003ccode\u003eapplication/json\u003c/code\u003e, otherwise an error is logged and the blob is ignored.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThe loading and removal of rules happens as follows:\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"ulist\"\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eif the response status code is an HTTP 200 OK and contains a rule set in a known format (see above), the corresponding rules are loaded (if the definitions are valid)\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003ein case of network issues, like dns errors, timeouts and alike, the rule sets previously received from the corresponding buckets are preserved.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003ein any other case related to network communication (like, not 200 status code, empty response body, unsupported format, etc.), the corresponding rules are removed if these were previously loaded.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThe configuration of this provider goes into the \u003ccode\u003ecloud_blob\u003c/code\u003e property. As with \u003ca href=\"#_http_endpoint\"\u003eHTTP Endpoint\u003c/a\u003e provider, it can be configured with as many buckets/blobs to load rule sets from as required for the particular use case.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eFollowing configuration options are supported:\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"ulist\"\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003ewatch_interval\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003e\u003ca href=\"/docs/configuration/reference/types/#_duration\"\u003eDuration\u003c/a\u003e\u003c/em\u003e (optional)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eWhether the configured \u003ccode\u003ebuckets\u003c/code\u003e should be polled for updates. Defaults to \u003ccode\u003e0s\u003c/code\u003e (polling disabled).\u003c/p\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003ebuckets\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003eBlobReference array\u003c/em\u003e (mandatory)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eEach \u003cem\u003eBlobReference\u003c/em\u003e entry in that array supports the following properties:\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"ulist\"\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003eurl\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003estring\u003c/em\u003e (mandatory)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThe actual url to the bucket or to a specific blob in the bucket.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003eprefix\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003estring\u003c/em\u003e (optional)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eIndicates that only blobs with a key starting with this prefix should be retrieved\u003c/p\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003erule_path_match_prefix\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003estring\u003c/em\u003e (optional)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eCreates kind of a namespace for the rule sets retrieved from the blobs. If set, the provider checks whether the urls patterns specified in all rules retrieved from the referenced bucket have the defined path prefix. If that rule is violated, a warning is emitted and the rule set is ignored. This can be used to ensure a rule retrieved from one endpoint does not override a rule from another endpoint.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThe differentiation which storage is used is based on the URL scheme. These are:\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"ulist\"\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003es3\u003c/code\u003e for \u003ca href=\"https://aws.amazon.com/s3/\"\u003eAWS S3\u003c/a\u003e buckets\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003egs\u003c/code\u003e for \u003ca href=\"https://cloud.google.com/storage/\"\u003eGoogle Cloud Storage\u003c/a\u003e and\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003eazblob\u003c/code\u003e for \u003ca href=\"https://azure.microsoft.com/en-us/services/storage/blobs/\"\u003eAzure Blob Storage\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eOther API compatible storage services, like \u003ca href=\"https://www.minio.io/\"\u003eMinio\u003c/a\u003e, \u003ca href=\"https://ceph.com/\"\u003eCeph\u003c/a\u003e, \u003ca href=\"https://github.com/chrislusf/seaweedfs\"\u003eSeaweedFS\u003c/a\u003e, etc. can be used as well. The corresponding and other options can be found in the \u003ca href=\"https://gocloud.dev/howto/blob/\"\u003eGo CDK Blob\u003c/a\u003e documentation, the implementation of this provider is based on.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"admonitionblock note\"\u003e\n\u003ctable\u003e\n\u003ctbody\u003e\u003ctr\u003e\n\u003ctd class=\"icon\"\u003e\n\u003ci class=\"fa icon-note\" title=\"Note\"\u003e\u003c/i\u003e\n\u003c/td\u003e\n\u003ctd class=\"content\"\u003e\nThe communication to the storage services requires an active session to the corresponding cloud provider. The session information is taken from the vendor specific environment variables, respectively configuration. See \u003ca href=\"https://docs.aws.amazon.com/sdk-for-go/api/aws/session/\"\u003eAWS Session\u003c/a\u003e, \u003ca href=\"https://cloud.google.com/docs/authentication/application-default-credentials\"\u003eGC Application Default Credentials\u003c/a\u003e and \u003ca href=\"https://learn.microsoft.com/en-us/azure/storage/common/authorize-data-access?toc=%2Fazure%2Fstorage%2Fblobs%2Ftoc.json\"\u003eAzure Storage Access\u003c/a\u003e for more information.\n\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003cdiv class=\"exampleblock\"\u003e\n\u003cdiv class=\"title\"\u003eExample 5. Minimal possible configuration\u003c/div\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eHere the provider is configured to load rule sets from all blobs stored on the Google Cloud Storage bucket named \u0026#34;my-bucket\u0026#34; without polling for changes.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"yaml\"\u003e\u003cspan style=\"color: #a6e22e\"\u003ecloud_blob\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003ebuckets\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n    \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003eurl\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003egs://my-bucket\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"exampleblock\"\u003e\n\u003cdiv class=\"title\"\u003eExample 6. Load rule sets from AWS S3 buckets and watch for changes.\u003c/div\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"yaml\"\u003e\u003cspan style=\"color: #a6e22e\"\u003ecloud_blob\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003ewatch_interval\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e2m\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003ebuckets\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n    \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003eurl\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003egs://my-bucket\u003c/span\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003eprefix\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eservice1\u003c/span\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003erule_path_match_prefix\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e/service1\u003c/span\u003e\n    \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003eurl\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003egs://my-bucket\u003c/span\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003eprefix\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eservice2\u003c/span\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003erule_path_match_prefix\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e/service2\u003c/span\u003e\n    \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003eurl\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003es3://my-bucket/my-rule-set?region=us-west-1\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eHere, the provider is configured to poll multiple buckets with rule sets for changes every 2 minutes.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThe first two bucket reference configurations reference actually the same bucket on Google Cloud Storage, but different blobs based on the configured blob prefix. The first one will let heimdall loading only those blobs, which start with \u003ccode\u003eservice1\u003c/code\u003e, the second only those, which start with \u003ccode\u003eservice2\u003c/code\u003e.\nAs \u003ccode\u003erule_path_match_prefix\u003c/code\u003e are defined for both as well, heimdall will ensure, that rule sets loaded from the corresponding blobs will not overlap in their url matching definitions.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThe last one instructs heimdall to load rule set from a specific blob, namely a blob named \u003ccode\u003emy-rule-set\u003c/code\u003e, which resides on the \u003ccode\u003emy-bucket\u003c/code\u003e AWS S3 bucket, which is located in the \u003ccode\u003eus-west-1\u003c/code\u003e AWS region.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect1\"\u003e\n\u003ch2 id=\"_kubernetes\"\u003eKubernetes\u003c/h2\u003e\n\u003cdiv class=\"sectionbody\"\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThis provider is only supported if heimdall is running within Kubernetes and allows usage of \u003ca href=\"#_ruleset_resource\"\u003eRule Set\u003c/a\u003e resources deployed to the same Kubernetes environment. The configuration of this provider goes into the \u003ccode\u003ekubernetes\u003c/code\u003e property and supports the following configuration options:\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"ulist\"\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003eauth_class\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003estring\u003c/em\u003e (optional)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eBy making use of this property, you can specify which RuleSets should be used by this particular heimdall instance. If specified, heimdall will consider the value of the \u003ccode\u003eauthClassName\u003c/code\u003e attribute of each RuleSet deployed to the cluster and load only those rules, which \u003ccode\u003eauthClassName\u003c/code\u003e values match the value of \u003ccode\u003eauth_class\u003c/code\u003e. If not set all RuleSets will be used.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\u003cdiv class=\"exampleblock\"\u003e\n\u003cdiv class=\"title\"\u003eExample 7. Minimal possible configuration\u003c/div\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eHere, the provider is just enabled. Since no \u003ccode\u003eauth_class\u003c/code\u003e is configured, it will load all RuleSets deployed to the Kubernetes environment.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"yaml\"\u003e\u003cspan style=\"color: #a6e22e\"\u003ekubernetes\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e{}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"exampleblock\"\u003e\n\u003cdiv class=\"title\"\u003eExample 8. Configuration with \u003ccode\u003eauth_class\u003c/code\u003e set\u003c/div\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eHere, the provider is configured to consider only those RuleSets, which \u003ccode\u003eauthClassName\u003c/code\u003e is set to \u003ccode\u003efoo\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"yaml\"\u003e\u003cspan style=\"color: #a6e22e\"\u003ekubernetes\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003eauth_class\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003efoo\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"admonitionblock caution\"\u003e\n\u003ctable\u003e\n\u003ctbody\u003e\u003ctr\u003e\n\u003ctd class=\"icon\"\u003e\n\u003ci class=\"fa icon-caution\" title=\"Caution\"\u003e\u003c/i\u003e\n\u003c/td\u003e\n\u003ctd class=\"content\"\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThis provider requires a RuleSet CRD being deployed, otherwise heimdall will not be able to monitor corresponding resources and emit error messages to the log.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eIf you have used the \u003ca href=\"/docs/operations/install/#_helm_chart\"\u003eHelm Chart\u003c/a\u003e to install heimdall, this CRD is already installed. You can however install it also like this:\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"bash\"\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e$ \u003c/span\u003ekubectl apply \u003cspan style=\"color: #f92672\"\u003e-f\u003c/span\u003e https://raw.githubusercontent.com/dadrus/heimdall/main/charts/heimdall/crds/ruleset.yaml\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect2\"\u003e\n\u003ch3 id=\"_ruleset_resource\"\u003eRuleSet resource\u003c/h3\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eAs written above, the \u003ccode\u003ekubernetes\u003c/code\u003e provider supports only rules, deployed as customer \u003ccode\u003eRuleSet\u003c/code\u003e resources.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eEach \u003ccode\u003eRuleSet\u003c/code\u003e has the following attributes:\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"ulist\"\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003ename\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003estring\u003c/em\u003e (required)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThe name of a rule set.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003eauthClassName\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003estring\u003c/em\u003e (optional)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eReferences the heimdall instance, which should use this \u003ccode\u003eRuleSet\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003erules\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003e\u003ca href=\"/docs/configuration/rules/configuration/#_rule_configuration\"\u003eRule Configuration\u003c/a\u003e array\u003c/em\u003e (mandatory)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eList of the actual rules.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\u003cdiv class=\"exampleblock\"\u003e\n\u003cdiv class=\"title\"\u003eExample 9. Simple Example\u003c/div\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"yaml\"\u003e\u003cspan style=\"color: #a6e22e\"\u003eapiVersion\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eheimdall.dadrus.github.com/v1alpha1\u003c/span\u003e\n\u003cspan style=\"color: #a6e22e\"\u003ekind\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eRuleSet\u003c/span\u003e\n\u003cspan style=\"color: #a6e22e\"\u003emetadata\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003ename\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026lt;some\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003ename\u0026gt;\u0026#34;\u003c/span\u003e\n\u003cspan style=\"color: #a6e22e\"\u003espec\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003eauthClassName\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026lt;optional\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003eauth_class\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003ereference\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e(see\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003eabove)\u0026gt;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003erules\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n    \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003eid\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026lt;identifier\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003eof\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003ea\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003erule\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e1\u0026gt;\u0026#34;\u003c/span\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003ematch\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n        \u003cspan style=\"color: #a6e22e\"\u003eurl\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ehttp://127.0.0.1:9090/foo/\u0026lt;**\u0026gt;\u003c/span\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003eexecute\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n        \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003eauthenticator\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003efoo\u003c/span\u003e\n        \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003eauthorizer\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ebar\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n","sections":["Configuration","Rules"],"tags":null,"title":"Rule Providers","url":"/docs/configuration/rules/providers/"},{"categories":null,"content":" Some Unifiers, which finalize the successful execution of the pipeline, can generated signed objects, like a JWT, to be forwarded to the upstream services. In such cases Heimdall acts as an issuer of such objects and needs at least corresponding key material.\nConfiguration The configuration related to the issuance of signed objects can be done using the signer property, which resides on the top level of heimdall’s configuration and supports the following properties.\nname: string (optional)\nThe name used to specify the issuer. E.g. if a JWT is generated, this value is used to set the iss claim. If not set, the value heimdall is used.\nkey_store: Key Store (optional)\nThe key store containing the cryptographic material. If configured, at least one private key and the corresponding certificate must be present. If not configured, heimdall generates an ECDSA P-384 key pair on start up and uses it then.\nYou should always configure a valid key store for production use! key_id: string (optional)\nIf the key_store contains multiple keys, this property can be used to specify the key to use (see also Key-Id Lookup). If not specified, the first key is used. If specified, but there is no key for the given key id present, an error is raised and heimdall will refuse to start.\nExample 1. Possible configuration Imagine you have a PEM file located in /opt/heimdall/keystore.pem with the following contents:\n-----BEGIN EC PRIVATE KEY----- X-Key-ID: foo MIGkAgEBBDBRLr783dIM5NHJnDDMRVBiFSF56xqHle5lZk1ZCyyow9wKZGuF4EWK jRBISBkE3NSgBwYFK4EEACKhZANiAAQ+oGUOJpVjntIWuanYxpXe6oN5tKhzLhBX GP1SOXiLhnPNnN2uZu9KwOoBzoZhr/Fxw+sziXmzHJwjluz78VOlFKyopxTfmxRZ 0qq3f/KHWdDtVvmTfT0O/ux9mg6mCJw= -----END EC PRIVATE KEY----- -----BEGIN CERTIFICATE----- MIIByjCCAVGgAwIBAgIBATAKBggqhkjOPQQDAzAuMQswCQYDVQQGEwJFVTENMAsG A1UEChMEVGVzdDEQMA4GA1UEAxMHVGVzdCBDQTAeFw0yMjA4MTUwOTE3MTFaFw0y MjA4MTUxMDE3MTFaMDAxCzAJBgNVBAYTAkVVMQ0wCwYDVQQKEwRUZXN0MRIwEAYD VQQDEwlUZXN0IEVFIDEwdjAQBgcqhkjOPQIBBgUrgQQAIgNiAAQ+oGUOJpVjntIW uanYxpXe6oN5tKhzLhBXGP1SOXiLhnPNnN2uZu9KwOoBzoZhr/Fxw+sziXmzHJwj luz78VOlFKyopxTfmxRZ0qq3f/KHWdDtVvmTfT0O/ux9mg6mCJyjQTA/MA4GA1Ud DwEB/wQEAwIHgDAMBgNVHQ4EBQQDYmFyMB8GA1UdIwQYMBaAFLO77bgPgZMKz11D BVDUXvtNGeBnMAoGCCqGSM49BAMDA2cAMGQCMFRlx9Bq0MuSh5pDhDTqRq/MnxxD W7qZg15AXoNnLrR60vV9gHjzkp1UkcU9viRIuAIwU0BjwDncp9z1seqKh+/eJV3f xstQe2rzUEptWLIiPFoOBWZuw9wJ/Hunjik3a9T/ -----END CERTIFICATE----- -----BEGIN CERTIFICATE----- MIIByjCCAVCgAwIBAgIBATAKBggqhkjOPQQDAzAuMQswCQYDVQQGEwJFVTENMAsG A1UEChMEVGVzdDEQMA4GA1UEAxMHVGVzdCBDQTAeFw0yMjA4MTUwOTE3MTFaFw0y MjA4MTYwOTE3MTFaMC4xCzAJBgNVBAYTAkVVMQ0wCwYDVQQKEwRUZXN0MRAwDgYD VQQDEwdUZXN0IENBMHYwEAYHKoZIzj0CAQYFK4EEACIDYgAEf96tstMNdNoNfYjl bGY6BvBFTsl9E3hpPnta7SJn6BqIYz6KEohDJ+8DXwUMVb5Ytr/QkEikg966HCY3 A9TFBUdAs01TV8f2KoAPRQVrh+ccSLLJyACENfZ5VbGSQ0wso0IwQDAOBgNVHQ8B Af8EBAMCAQYwDwYDVR0TAQH/BAUwAwEB/zAdBgNVHQ4EFgQUs7vtuA+BkwrPXUMF UNRe+00Z4GcwCgYIKoZIzj0EAwMDaAAwZQIxAMPgE/Z+1Dcj+lH7jioE16Hig0HQ FC4qBx1UU05H05Gs23ECB1hzD2qXikVpaNyuDgIwbogEu42wIwpDa5xdJIZcIhmz DIuPvEscUDjU3C+1GPxmACcRMPv9QVUEcBAvZkfn -----END CERTIFICATE----- Then you can configure heimdall to use it like follows:\nsigner: name: foobar key_store: path: /opt/heimdall/keystore.pem key_id: foo ","description":"","html_content":"\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eSome \u003ca href=\"/docs/configuration/rules/pipeline_mechanisms/unifiers/\"\u003eUnifiers\u003c/a\u003e, which finalize the successful execution of the pipeline, can generated signed objects, like a JWT, to be forwarded to the upstream services. In such cases Heimdall acts as an issuer of such objects and needs at least corresponding key material.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect1\"\u003e\n\u003ch2 id=\"_configuration\"\u003eConfiguration\u003c/h2\u003e\n\u003cdiv class=\"sectionbody\"\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThe configuration related to the issuance of signed objects can be done using the \u003ccode\u003esigner\u003c/code\u003e property, which resides on the top level of heimdall’s configuration and supports the following properties.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"ulist\"\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003ename\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003estring\u003c/em\u003e (optional)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThe name used to specify the issuer. E.g. if a JWT is generated, this value is used to set the \u003ccode\u003eiss\u003c/code\u003e claim. If not set, the value \u003ccode\u003eheimdall\u003c/code\u003e is used.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003ekey_store\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003e\u003ca href=\"/docs/configuration/reference/types/#_key_store\"\u003eKey Store\u003c/a\u003e\u003c/em\u003e (optional)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThe key store containing the cryptographic material. If configured, at least one private key and the corresponding certificate must be present. If not configured, heimdall generates an ECDSA P-384 key pair on start up and uses it then.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"admonitionblock warning\"\u003e\n\u003ctable\u003e\n\u003ctbody\u003e\u003ctr\u003e\n\u003ctd class=\"icon\"\u003e\n\u003ci class=\"fa icon-warning\" title=\"Warning\"\u003e\u003c/i\u003e\n\u003c/td\u003e\n\u003ctd class=\"content\"\u003e\nYou should always configure a valid key store for production use!\n\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003ekey_id\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003estring\u003c/em\u003e (optional)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eIf the \u003ccode\u003ekey_store\u003c/code\u003e contains multiple keys, this property can be used to specify the key to use (see also \u003ca href=\"#_key_id_lookup\"\u003eKey-Id Lookup\u003c/a\u003e). If not specified, the first key is used. If specified, but there is no key for the given key id present, an error is raised and heimdall will refuse to start.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\u003cdiv class=\"exampleblock\"\u003e\n\u003cdiv class=\"title\"\u003eExample 1. Possible configuration\u003c/div\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eImagine you have a PEM file located in \u003ccode\u003e/opt/heimdall/keystore.pem\u003c/code\u003e with the following contents:\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"txt\"\u003e-----BEGIN EC PRIVATE KEY-----\nX-Key-ID: foo\n\nMIGkAgEBBDBRLr783dIM5NHJnDDMRVBiFSF56xqHle5lZk1ZCyyow9wKZGuF4EWK\njRBISBkE3NSgBwYFK4EEACKhZANiAAQ+oGUOJpVjntIWuanYxpXe6oN5tKhzLhBX\nGP1SOXiLhnPNnN2uZu9KwOoBzoZhr/Fxw+sziXmzHJwjluz78VOlFKyopxTfmxRZ\n0qq3f/KHWdDtVvmTfT0O/ux9mg6mCJw=\n-----END EC PRIVATE KEY-----\n-----BEGIN CERTIFICATE-----\nMIIByjCCAVGgAwIBAgIBATAKBggqhkjOPQQDAzAuMQswCQYDVQQGEwJFVTENMAsG\nA1UEChMEVGVzdDEQMA4GA1UEAxMHVGVzdCBDQTAeFw0yMjA4MTUwOTE3MTFaFw0y\nMjA4MTUxMDE3MTFaMDAxCzAJBgNVBAYTAkVVMQ0wCwYDVQQKEwRUZXN0MRIwEAYD\nVQQDEwlUZXN0IEVFIDEwdjAQBgcqhkjOPQIBBgUrgQQAIgNiAAQ+oGUOJpVjntIW\nuanYxpXe6oN5tKhzLhBXGP1SOXiLhnPNnN2uZu9KwOoBzoZhr/Fxw+sziXmzHJwj\nluz78VOlFKyopxTfmxRZ0qq3f/KHWdDtVvmTfT0O/ux9mg6mCJyjQTA/MA4GA1Ud\nDwEB/wQEAwIHgDAMBgNVHQ4EBQQDYmFyMB8GA1UdIwQYMBaAFLO77bgPgZMKz11D\nBVDUXvtNGeBnMAoGCCqGSM49BAMDA2cAMGQCMFRlx9Bq0MuSh5pDhDTqRq/MnxxD\nW7qZg15AXoNnLrR60vV9gHjzkp1UkcU9viRIuAIwU0BjwDncp9z1seqKh+/eJV3f\nxstQe2rzUEptWLIiPFoOBWZuw9wJ/Hunjik3a9T/\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIByjCCAVCgAwIBAgIBATAKBggqhkjOPQQDAzAuMQswCQYDVQQGEwJFVTENMAsG\nA1UEChMEVGVzdDEQMA4GA1UEAxMHVGVzdCBDQTAeFw0yMjA4MTUwOTE3MTFaFw0y\nMjA4MTYwOTE3MTFaMC4xCzAJBgNVBAYTAkVVMQ0wCwYDVQQKEwRUZXN0MRAwDgYD\nVQQDEwdUZXN0IENBMHYwEAYHKoZIzj0CAQYFK4EEACIDYgAEf96tstMNdNoNfYjl\nbGY6BvBFTsl9E3hpPnta7SJn6BqIYz6KEohDJ+8DXwUMVb5Ytr/QkEikg966HCY3\nA9TFBUdAs01TV8f2KoAPRQVrh+ccSLLJyACENfZ5VbGSQ0wso0IwQDAOBgNVHQ8B\nAf8EBAMCAQYwDwYDVR0TAQH/BAUwAwEB/zAdBgNVHQ4EFgQUs7vtuA+BkwrPXUMF\nUNRe+00Z4GcwCgYIKoZIzj0EAwMDaAAwZQIxAMPgE/Z+1Dcj+lH7jioE16Hig0HQ\nFC4qBx1UU05H05Gs23ECB1hzD2qXikVpaNyuDgIwbogEu42wIwpDa5xdJIZcIhmz\nDIuPvEscUDjU3C+1GPxmACcRMPv9QVUEcBAvZkfn\n-----END CERTIFICATE-----\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThen you can configure heimdall to use it like follows:\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"yaml\"\u003e\u003cspan style=\"color: #a6e22e\"\u003esigner\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003ename\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003efoobar\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003ekey_store\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003epath\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e/opt/heimdall/keystore.pem\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003ekey_id\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003efoo\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n","sections":["Configuration"],"tags":null,"title":"Cryptographic Material","url":"/docs/configuration/cryptographic_material/"},{"categories":null,"content":" Assertions This type enables configuration of required token and claim assertions. Depending on the object type (JWT or introspection response), the assertions apply to different parts of such objects.\nscopes: Scopes Matcher (optional)\nRequired scopes given to the client.\naudience: string array (optional)\nRequired entries in the aud claim. Both cases, either as whitespace separated string, or a JSON array are considered.\nissuers: string array (mandatory)\nIssuers to trust. At least one issuer must be configured.\nallowed_algorithms: string array (optional)\nAlgorithms, which are trusted (according to RFC 7518). Defaults to the following list: ES256, ES384, ES512, PS256, PS384, PS512.\nvalidity_leeway Duration (optional)\nThe time leeway to consider while verifying the iat, exp and the nbf. Defaults to 10 seconds.\nExample 1. Assertions configuration issuers: - foo - bar audience: - zap scopes: - baz allowed_algorithms: - ES512 validity_leeway: 5s Here we say, the token must have been issued either by the issuer foo, or the issuer bar, the aud claim must contain zap, the scope claim (either scp or scope) must be present and contain the scope baz, if the token or the introspection response is signed, it must have been signed by using the ES512 algorithm (ECDSA using P-521 and SHA-512) and if the information about token validity is present, we respect a deviation of 5 seconds.\nAuthentication Data Source An authentication data source is actually a list of possible strategies for subject authentication data retrieval. The entries following the first one are fallbacks and are only executed if the previous strategy could not retrieve the required authentication data from the request.\nThis fallback mechanism can become handy, if different clients of your application send the authentication data using different methods. RFC 6750 describes for example how to use bearer tokens in HTTP requests to access OAuth 2.0 protected resources. This RFC says, a token can either be sent in the Authorization header, or in a query parameter, or even as part of the HTTP body. So you can define the following list to let Heimdall try to extract the access token from all three places:\n- header: Authorization schema: Bearer - query_parameter: access_token - body_parameter: access_token The available strategies are described in the following sections.\nCookie Strategy This strategy can retrieve authentication data from a specific HTTP cookie. Following properties are supported:\ncookie: string (mandatory)\nThe name of the cookie to use.\nExample 2. Cookie Strategy usage Imagine you want Heimdall to verify an authentication session, which is represented by a specific cookie before the request hits your upstream service. If the client of your upstream application, which is case of a cookie would usually be a browser sends a cookie named \u0026#34;session\u0026#34;, you can inform Heimdall to extract and use it by configuring this strategy as follows:\n- cookie: my_session_cookie Header Strategy This strategy can retrieve authentication data from a specific HTTP header. Following properties are supported:\nheader: string (mandatory)\nThe name of the header to use.\nschema: string (optional)\nSchema, which should be present in the header value. If specified, but not present in the header value, the authentication data cannot be retrieved, effectively making the affected authenticator feel not responsible for the request.\nExample 3. Header Strategy usage Imagine you want Heimdall to verify an access token used to protect your upstream service. If the client of your upstream application sends the access token in the HTTP Authorization header, you can inform Heimdall to extract it from there by configuring this strategy as follows:\n- header: Authorization schema: Bearer Query Parameter Strategy query_parameter: string (mandatory)\nThe name of the query parameter to use.\nExample 4. Query Parameter Strategy usage Imagine you want Heimdall to verify an access token used to protect your upstream service. If the client of your upstream application sends the access token in the query parameter named \u0026#34;access_token\u0026#34;, you can inform Heimdall to extract it from there by configuring this strategy as follows:\n- query_parameter: access_token Body Parameter Strategy The usage of this strategy is only possible when the request payload is either JSON or application/x-www-form-urlencoded encoded. The Content-Type of the request must also either be set to application/x-www-form-urlencoded or to a MIME type, which contains json.\nbody_parameter: string (mandatory)\nThe name of the body parameter to use.\nExample 5. Body Parameter Strategy usage Imagine you want Heimdall to verify an access token used to protect your upstream service. If the client of your upstream application sends the access token in the body parameter named \u0026#34;access_token\u0026#34;, you can inform Heimdall to extract it from there by configuring this strategy as follows:\n- body_parameter: access_token Authentication Strategy Authentication strategy is kind of abstract type, so you have to define which specific type to use. Each type has its own configuration options.\nAn AuthStrategy configuration entry must contain the following two properties:\ntype - The type of the strategy. Available types are described in the following sections.\nconfig - The strategy specific configuration.\nAvailable strategies are described in the following sections.\nAPI Key Strategy This strategy can be used if your endpoint expects a specific api key be send in a header or a cookie.\ntype must be set to api_key. config supports the following properties:\nin: string (mandatory)\nWhere to put the api key. Can be either header, or cookie.\nname: string (mandatory)\nThe name of either the header or the cookie.\nvalue: string (mandatory)\nThe value of the api key.\nExample 6. API Key Strategy configuration The following snippet shows how to configure this strategy to send an api key in the X-My-API-Key HTTP header.\ntype: api_key config: in: header name: X-My-API-Key value: super-duper-secret-key Basic Auth Strategy This strategy can be used if your endpoint is protected by HTTP basic authentication and expects the HTTP Authorization header with required values.\ntype must be set to basic_auth. config supports the following properties:\nuser: string (mandatory)\nThe user-id.\npassword: string (mandatory)\nThe password.\nExample 7. Basic Auth Strategy configuration The following snippet shows how to configure this strategy with user set to \u0026#34;Alladin\u0026#34; and password set to \u0026#34;open sesame\u0026#34;\ntype: basic_auth config: user: Alladin password: open sesame Client Credentials Strategy This strategy implements the OAuth2 Client Credentials Grant Flow to obtain an access token expected by the endpoint. Heimdall caches the received access token.\ntype must be set to client_credentials. config supports the following properties:\nclient_id: string (mandatory)\nThe client identifier for Heimdall.\nclient_secret: string (mandatory)\nThe client secret for Heimdall.\nscopes: string array (optional)\nThe scopes required for the access token.\ntoken_url: string (mandatory)\nThe token endpoint of the authorization server.\nExample 8. Client Credentials Strategy configuration type: client_credentials config: token_url: https://my-auth.provider/token client_id: foo client_secret: bar scopes: - baz - zap Authorization Expression Authorization expressions define, as the name implies expressions for authorization purposes and have the following properties:\nexpression string (mandatory)\nThe expression to execute.\nmessage string (optional)\nThe message to include into the error if the expression fails.\nExample 9. Example expression using CEL The expression below determine whether attributes property of a subject object (also shown below) has at least one key that starts with the group prefix, and ensure that all group-like keys have list values containing only strings that end with @acme.co.\nsubject id: \u0026#34;foobar\u0026#34; attributes: group1: [\u0026#34;admin@acme.co\u0026#34;, \u0026#34;analyst@acme.co\u0026#34;] labels: [\u0026#34;metadata\u0026#34;, \u0026#34;prod\u0026#34;, \u0026#34;pii\u0026#34;] groupN: [\u0026#34;forever@acme.co\u0026#34;] expression: | subject.attributes.exists(c, c.startsWith(\u0026#39;group\u0026#39;)) \u0026amp;\u0026amp; subject.attributes .filter(c, c.startsWith(\u0026#39;group\u0026#39;)) .all(c, subject.attributes[c] .all(g, g.endsWith(\u0026#39;@acme.co\u0026#39;))) message: No groups ending with @acme.co present CORS CORS (Cross-Origin Resource Sharing) headers can be added and configured by making use of this type. This functionality allows for advanced security features to quickly be set. If CORS headers are set, then heimdall does not pass preflight requests to its decision pipeline, instead the response will be generated and sent back to the client directly. Following properties are supported:\nallowed_origins: string array (optional)\nList of origins that may access the resource. Defaults to all, if not set, but any of the other CORS options are configured.\nallowed_methods: string array (optional)\nList of methods allowed when accessing the resource. This is used in response to a preflight request. Defaults to GET, POST, HEAD, PUT, DELETE and PATCH if not set, but any of the other CORS options are configured.\nallowed_headers: string array (optional)\nList of request headers that can be used when making the actual request.\nexposed_headers: string array (optional)\n\u0026#34;Allow-List\u0026#34; of headers that clients are allowed to access.\nallow_credentials: boolean (optional)\nIndicates whether the response to the request can be exposed when the credentials flag is true. When used as part of a response to a preflight request, this indicates whether the actual request can be made using credentials. Defaults to false if not set, but any of the other CORS options are configured.\nmax_age: Duration (optional)\nIndicates how long the results of a preflight request can be cached. Defaults to 0 seconds if not set, but any of the other CORS options are configured.\nExample 10. Possible configuration allowed_origins: - example.org allowed_methods: - HEAD - PATCH allow_credentials: true max_age: 10s Duration Duration is actually a string type, which adheres to the following pattern: ^[0-9]+(ns|us|ms|s|m|h)$\nSo with 10s you can define the duration of 10 seconds and with 2h you can say 2 hours.\nEndpoint The Endpoint type defines properties required for the communication with an endpoint.\nIf only the URL is required to be set, you can specify it by using just a string. If more than the URL is required to be specified, following properties are available:\nurl string (mandatory)\nThe actual url of the endpoint.\nmethod string (optional)\nThe HTTP method to use while communicating with the endpoint. If not set POST is used.\nretry Retry (optional)\nWhat to do if the communication fails. If not configured, no retry attempts are done.\nauth Authentication Strategy (optional)\nAuthentication strategy to apply, if the endpoint requires authentication.\nheaders map of strings (optional)\nHTTP headers to be sent to the endpoint.\nThese headers are not analyzed by heimdall and are just forwarded to the endpoint. E.g. if you configure the Content-Encoding to something like gzip, the service behind the used endpoint might fail to answer, as it would expect the body to be compressed. enable_http_cache bool (optional)\nWhether HTTP caching according to RFC 7234 should be used. Defaults to false if not otherwise stated in the description of the configuration type, making use of the endpoint property. If set to true heimdall will strictly follow the requirements from RFC 7234 and cache the responses if possible and reuse these if still valid.\nIf the endpoint referenced by the URL does not provide any explicit expiration time, no heuristic freshness lifetime is calculated. Heimdall treats such responses as not cacheable. Example 11. Endpoint configuration as string http://foo.bar Example 12. Structured Endpoint configuration url: http://foo.bar method: GET retry: give_up_after: 5s max_delay: 1s auth: type: api_key config: name: foo value: bar in: cookie headers: X-My-First-Header: foobar X-My-Second-Header: barfoo enable_http_cache: true Error Condition This type supports definition of conditions, under which an error handler mechanism should execute its logic. Such conditions are required for all error handler mechanisms, but the default one. All condition elements are evaluated using boolean and. Following conditions are possible:\nerror: Error Descriptor array (mandatory)\nA list with error types to match. Configured entries are evaluated using a boolean or logic.\nrequest_cidr: string array (optional)\nA list with CIDR entries to match. Configured entries are evaluated using a boolean or logic.\nrequest_headers: string array map (optional)\nA map with header names and the corresponding values to match. Configured entries are evaluated using a boolean or logic. This holds also true for the header values.\nExample 13. Complex Error Condition configuration This example shows in principle all possible combinations. The actual values and the amount of them will for sure differ in your particular case. However, for showing the idea, the complexity of this example is enough.\nerror: - type: precondition_error # OR - type: authorization_error # AND request_cidr: - 192.168.0.0/16 # OR - 10.0.0.0/8 # AND request_headers: Accept: - text/html # OR - \u0026#34;*/*\u0026#34; # OR Content-Type: - application/json This condition evaluates to true only if all parts of it (error, request_cidr, request_headers) evaluate to true. With * error evaluates to true, if the encountered error was either precondition_error or authorization_error. * request_cidr evaluates to true, if the request came from an IP in either 192.168.0.0/16 or 10.0.0.0/8 range. And * request_headers evaluates to true, if either the HTTP Accept header contains one of text/html, or /, or the HTTP Contet-Type header contains application/json.\nExample 14. Simple Error Condition configuration This example is a very simple one, showing just the usage of the error attribute:\nerror: - type: authentication_error This condition evaluates to true, if the encountered error was authentication_error raised by any of the configured authenticators.\nError Descriptor Describes an error to match in Error Conditions.\nFollowing configuration properties are available:\ntype: Error Type (mandatory)\nAn error type to match.\nraised_by: string (optional)\nThe identifier of the pipeline mechanism, which raised this error.\nheimdall does not verify the integrity of the pipeline mechanism identifier configured using raised_by on start or while loading rules. Thus, if there is no mechanism with the given identifier, the error will not match. Example 15. Error Descriptor configuration type: authentication_error raised_by: my_oauth2_authenticator Here the descriptor says, the expected error is of type authentication_error and should have been raised by a mechanism with the id my_oauth2_authenticator.\nError/State Type Heimdall defines a couple of error/state types, which it uses to signal errors. Those, which are marked with (*) are available for configuring Error Conditions via Error Descriptors. All can be used to define overrides for the HTTP response codes.\nFollowing types are available:\naccepted - this is the only state type in this list and is used to signal, the matched decision pipeline has been executed successfully, so the request can be forwarded to the upstream service. The response of that type results by default in a 200 OK response.\nauthentication_error (*) - used if an authenticator failed to verify authentication data available in the request. E.g. an authenticator was configured to verify a JWT and the signature of it was invalid. If none of the authenticators used in a pipeline were able to authenticate the user, and the default error handler was used to handle such error, it will by default result in a 401 Unauthorized response.\nauthorization_error (*) - used if an authorizer failed to authorize the subject. E.g. an authorizer is configured to use an expression on the given subject and request context, but that expression returned with an error. Error of this type results by default in 403 Forbidden response if the default error handler was used to handle such error.\ncommunication_error (*) - this error is used to signal a communication error while communicating to a remote system during the execution of the pipeline of the matched rule. Timeouts of DNSs errors result in such an error. Error of this type results by default in 502 Bad Gateway HTTP code if handled by the default error handler.\ninternal_error - used if heimdall run into an internal error condition while processing the request. E.g. something went wrong while unmarshalling a JSON object, or if there was a configuration error, which couldn’t be raised while loading a rule, etc. Results by default in 500 Internal Server Error response to the caller.\nmethod_error - this error is used to signal that a matched rule does not allow usage of the HTTP method used to submit the request. Error of this type results by default in 405 Method Not Allowed HTTP code.\nno_rule_error - this error is used to signal, there is no matching rule to handle the given request. Error of this type results by default in 404 Not Found HTTP code.\nprecondition_error (*) - used if the request does not contain required/expected data. E.g. if an authenticator could not find a cookie configured. Error of this type results by default in 400 Bad Request HTTP code if handled by the default error handler.\nKey Store This type configures a key store holding keys and corresponding certificate chains. PKCS#1, as well as PKCS#8 encodings are supported for private keys.\nWhile loading a key store following verifications are done:\nUniqueness of key ids and rejection of key stores which violate this condition (see also Key-Id Lookup)\nCorrelation of keys and certificates to build a valid certificate chain for every given key if certificates are present. If the correlation fails, an error is raised and heimdall will refuse to start.\nCertificate chain validation. If the chain is invalid, an error is raised and heimdall will refuse to start.\nFollowing configuration properties are available:\npath: string (mandatory)\nThe path to the PEM file with the cryptographic material.\npassword: string (optional)\nIf the key material is protected with a password, this property can be set to decipher it. Password protection is only supported for PKCS#8 encoded keys\nIf the key store contains multiple keys and these keys are password protected, same password must be used for all of these. Example 16. Example configuration path: /path/to/keystore.pem password: VeryInsecure! Respond This type enables instructing heimdall to preserve error information and provide it in the response body to the caller, as well as to use HTTP status codes deviating from those heimdall would usually use. The configuration, which can be done using this type affects only the behavior of the default error handler.\nFollowing properties are supported:\nverbose: boolean (optional)\nBy making use of this property you can instruct heimdall to preserve error information and provide it in the response body to the caller. Defaults to false.\nHeimdall supports MIME type negotiation. So, if the client sets the HTTP Accept header to e.g. application/json, and Heimdall run into an unhandled internal error condition, in addition to responding with 500 Internal Server Error, it will render an error message, like shown below, if verbose has been set to true.\n{ \u0026#34;code\u0026#34;: \u0026#34;internal error\u0026#34;, \u0026#34;message\u0026#34;: \u0026#34;whatever led to the error\u0026#34; } The message will however contain just high-level information, like \u0026#34;failed to parse something\u0026#34;, but will not contain any stack traces.\nwith: ResponseOverride set (optional)\nThis property enables mapping between response/error types used by heimdall and the corresponding HTTP status codes. Each entry must be from the list of the supported Error/State Types and contain exactly one property named code, which then defines the desired mapping.\nExample 17. Making error responses verbose and changing the HTTP codes for some errors verbose: true with: authentication_error: code: 404 authorization_error: code: 404 Retry Implements an exponential backoff strategy for endpoint communication. It increases the backoff exponentially by multiplying the max_delay with 2^(attempt count)\ngive_up_after: Duration (optional)\nSets an upper bound on the maximum time to wait between two requests. Default to 0, which means no upper bound.\nmax_delay: _Duration (mandatory)\nThe initial backoff.\nExample 18. Retry configuration In this example the backoff will be 1, 2, 4, 8, 16, 32, 60, …​\ngive_up_after: 60s max_delay: 1s Scopes Matcher Scopes matcher is a configuration type allowing configuration of different strategies to match required scopes. In its simplest shape it can be just an array of strings (implemented by the Exact) scope matcher. To cover many use cases, different strategies are available and described in the following sections.\nRegardless of the strategy, each matcher can explicitly be configured and supports the following configuration properties:\nmatching_strategy - the type of the mathing strategy.\nvalues - the list of scope patterns\nExact This the simplest matcher and is automatically selected, if just an array of strings is configured as shown in the following snippet:\n- foo - bar However, as written in the Scopes Matcher section, it can also explicitly be selected by setting matching_strategy to exact and defining the required scopes in the values property.\nExample 19. Essentially same configurations matching_strategy: exact values: - foo - bar - foo - bar Hierarchic This matcher enables matching hierarchical scopes, which use . as separator. Imagine your system is organized that way, that it defines namespaces for different services like this:\nmy-service being the top namespace\nmy-service.booking - being the namespace of the booking service\nmy-service.orders - being the namespace of the orders service\nmy-service.orders.partners - being the namespace of the order service for partners and\nmy-service.orders.customers - being the namespace of the order service for customers\nBasically you’ve established an identity for each of your services (this is comparable to how SPIFFE IDs are organized and also used for).\nNow, imagine you use these namespaces as scope values to limit the usage of the issued tokens. In such situations the hierarchic scope matcher can become handy if you would like to assert any scope of the token must be in e.g. the my-service or the my-service.orders namespace.\nThis matcher can only be used by explicitly setting the matching_strategy to hierarchic and defining the required patterns in the values property.\nExample 20. Matching of hierarchic scopes matching_strategy: hierarchic values: - my-service This configuration will ensure all scopes withing the scope or scp claim are within the my-service namespace. So scope claim like\n{ \u0026#34;scope\u0026#34;: [\u0026#34;my-service.orders\u0026#34;, \u0026#34;my-service.orders.customers\u0026#34;] } would match, but\n{ \u0026#34;scope\u0026#34;: [\u0026#34;not-my-service\u0026#34;, \u0026#34;my-service.orders.customers\u0026#34;] } would not match.\nWildcard This matcher enables matching scopes using wildcards. It goes beyond the Hierarchic scope matcher by enabling usage of wildcards.\nThis matcher can only be used by explicitly setting the matching_strategy to wildcard and defining the required patterns in the values property.\nSubject This configuration type enables extraction of subject information from responses received by Heimdall from authentication services. Following properties are available.\nid: string (mandatory)\nA GJSON Path pointing to the id of the subject in the JSON object.\nattributes: string (optional)\nA GJSON Path pointing to the attributes of the subject in the JSON object. Defaults to @this.\nExample 21. Extracting subject id from an OAuth2 Introspection endpoint response. This example shows how to extract the subject id from an OAuth2 Introspection endpoint response and set the subject attributes to the entire response\nid: sub attributes: @this Setting attributes was actually not required, as @this would be set by default anyway.\nExample 22. Extracting subject id from an Ory Kratos \u0026#34;whoami\u0026#34; endpoint response This example shows how to extract the subject id from an Ory Kratos \u0026#34;whoami\u0026#34; endpoint response and set the subject attributes to the entire response. attributes is not configured, so default is used.\nid: identity.id Session Lifespan This configuration type enables the configuration of session lifespans, used for session validation for those authenticators, which act on non-standard protocols. Following properties are available.\nactive: string (optional)\nA GJSON Path pointing to the field describing the \u0026#34;active\u0026#34; status of the session in the corresponding JSON object. The actual value in that field should be convertable to a bool type. If not provided, or not found in the session object, the session is considered to be \u0026#34;active\u0026#34;. \u0026#34;active\u0026#34; means it can be used and represent a valid session between the authentication system and the subject, the session has been issued to.\nissued_at: string (optional)\nA GJSON Path pointing to the field in the corresponding JSON object, describing the time, when the session object has been issued. If not provided or not found, the issuance time is not considered during session validation.\nnot_before: string (optional)\nA GJSON Path pointing to the field in the corresponding JSON object describing the time, until which the session object is not allowed to be used. If not provided or not found, the corresponding time is not considered during session validation.\nnot_after: string (optional)\nA GJSON Path pointing to the field in the corresponding JSON object describing the time, after which the session object is not allowed to be used. If not provided or not found, the corresponding time is not considered during session validation.\ntime_format: string (optional)\nSince different authentication system use different representations for time strings, this property allows the definition of the time format/layout used by the authentication system. Defaults to Unix Epoch time stamp.\nYou can use the following Go Playground link to test your time format settings. validity_leeway: Duration (optional)\nEnables definition of an allowed time drift between the authentication system and heimdall for the validation of the session validity. Defaults to 0.\nExample 23. Making use of session information received from Ory’s Kratos A typical response from Kratos\u0026#39; whoami endpoint looks like follows (stripped to the most interesting parts):\n{ \u0026#34;id\u0026#34;: \u0026#34;1338410d-c473-4503-a96a-53efa06e2531\u0026#34;, \u0026#34;active\u0026#34;: true, \u0026#34;expires_at\u0026#34;: \u0026#34;2021-10-15T15:58:57.683338Z\u0026#34;, \u0026#34;authenticated_at\u0026#34;: \u0026#34;2021-10-14T15:58:57.683338Z\u0026#34;, \u0026#34;issued_at\u0026#34;: \u0026#34;2021-10-14T15:58:57.683338Z\u0026#34;, \u0026#34;identity\u0026#34;: { \u0026#34;id\u0026#34;: \u0026#34;9496bbd5-f426-473f-b087-c7df853f274a\u0026#34;, ... } } To enable usage of these properties in Heimdall, you can configure the Session Lifespan as follows:\nactive: active issued_at: issued_at not_before: authenticated_at not_after: expires_at time_format: \u0026#34;2006-01-02T15:04:05.999999Z07\u0026#34; validity_leeway: 10s Example 24. Making use of session information received from a compliant OAuth2 authorization service A typical response from a token introspection endpoint looks like follows:\n{ \u0026#34;active\u0026#34;: true, \u0026#34;client_id\u0026#34;: \u0026#34;l238j323ds-23ij4\u0026#34;, \u0026#34;username\u0026#34;: \u0026#34;jdoe\u0026#34;, \u0026#34;scope\u0026#34;: \u0026#34;read write dolphin\u0026#34;, \u0026#34;sub\u0026#34;: \u0026#34;Z5O3upPC88QrAjx00dis\u0026#34;, \u0026#34;aud\u0026#34;: \u0026#34;https://protected.example.net/resource\u0026#34;, \u0026#34;iss\u0026#34;: \u0026#34;https://server.example.com/\u0026#34;, \u0026#34;exp\u0026#34;: 1419356238, \u0026#34;iat\u0026#34;: 1419350238, \u0026#34;extension_field\u0026#34;: \u0026#34;twenty-seven\u0026#34; } To enable usage of these properties in Heimdall, you can configure the Session Lifespan as follows:\nactive: active issued_at: iat not_after: exp validity_leeway: 10s As you see, there is no need to define the time format as the times values appearing in the responses from an introspection endpoint are Unix Epoch time stamps.\nTimeout Following configuration properties are supported:\nread: Duration (optional)\nThe amount of time allowed to read the full request including body. Defaults to 5 seconds.\nwrite: Duration (optional)\nThe maximum duration before timing out writes of the response. Defaults to 10 seconds.\nidle: Duration (optional)\nThe maximum amount of time to wait for the next request when keep-alive is enabled. If ìdle is 0, the value of read timeout is used. Defaults to 2 minutes.\nExample 25. Setting the read timeout to 1 second, write timeout to 2 seconds and the idle timeout to 1 minute. read: 1s write: 2s idle: 1m TLS Following are the supported TLS configuration properties:\nkey_store: Key Store (mandatory)\nThe key store containing the cryptographic material. At least one private key and the corresponding certificate must be present.\nkey_id: string (optional)\nIf the key_store contains multiple keys, this property can be used to specify the key to use (see also Key-Id Lookup). If not specified, the first key is used. If specified, but there is no key for the given key id present, an error is raised and heimdall will refuse to start.\nmin_version: string (optional)\nThe minimal TLS version to support. Can be either TLS1.2 or TLS1.3. Defaults to TLS1.3.\ncipher_suites: string array (optional)\nCan be configured if min_version is set to TLS1.2. If min_version is set to TLS1.3 the configured values are ignored. Only the following PFS cipher suites are supported:\nTLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256\nTLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256\nTLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\nTLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256\nTLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\nTLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384\nTLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256\nTLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256\nDefaults to the last six cipher suites if min_version is set to TLS1.2 and cipher_suites is not configured.\nExample 26. Example configuration key_store: path: /path/to/keystore.pem password: VeryInsecure! key_id: foobar min_version: TLS1.2 cipher_suites: - TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 - TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 Key-Id Lookup When heimdall loads a key store, following algorithm is used to get the key id for the key:\nif the PEM entry with the private key has X-Key-ID header specified, this value is used as key id\nOtherwise, if an X.509 certificate is present for the private key, and it has the Subject Key Identifier extension set, the hex representation of it is used as key id.\nOtherwise, heimdall calculates the value for the Subject Key Identifier according to RFC 3280, Section 4.2.1.2 and uses hex representation of it as key id.\n","description":"","html_content":"\u003cdiv class=\"sect1\"\u003e\n\u003ch2 id=\"_assertions\"\u003eAssertions\u003c/h2\u003e\n\u003cdiv class=\"sectionbody\"\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThis type enables configuration of required token and claim assertions. Depending on the object type (JWT or introspection response), the assertions apply to different parts of such objects.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"ulist\"\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003escopes\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003e\u003ca href=\"#_scopes_matcher\"\u003eScopes Matcher\u003c/a\u003e\u003c/em\u003e (optional)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eRequired scopes given to the client.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003eaudience\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003estring array\u003c/em\u003e (optional)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eRequired entries in the \u003ccode\u003eaud\u003c/code\u003e claim. Both cases, either as whitespace separated string, or a JSON array are considered.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003eissuers\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003estring array\u003c/em\u003e (mandatory)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eIssuers to trust. At least one issuer must be configured.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003eallowed_algorithms\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003estring array\u003c/em\u003e (optional)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eAlgorithms, which are trusted (according to \u003ca href=\"https://datatracker.ietf.org/doc/html/rfc7518\"\u003eRFC 7518\u003c/a\u003e). Defaults to the following list: ES256, ES384, ES512, PS256, PS384, PS512.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003evalidity_leeway\u003c/code\u003e\u003c/strong\u003e \u003cem\u003e\u003ca href=\"#_duration\"\u003eDuration\u003c/a\u003e\u003c/em\u003e (optional)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThe time leeway to consider while verifying the \u003ccode\u003eiat\u003c/code\u003e, \u003ccode\u003eexp\u003c/code\u003e and the \u003ccode\u003enbf\u003c/code\u003e. Defaults to 10 seconds.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\u003cdiv class=\"exampleblock\"\u003e\n\u003cdiv class=\"title\"\u003eExample 1. Assertions configuration\u003c/div\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"yaml\"\u003e\u003cspan style=\"color: #a6e22e\"\u003eissuers\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003efoo\u003c/span\u003e\n \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ebar\u003c/span\u003e\n\u003cspan style=\"color: #a6e22e\"\u003eaudience\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ezap\u003c/span\u003e\n\u003cspan style=\"color: #a6e22e\"\u003escopes\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ebaz\u003c/span\u003e\n\u003cspan style=\"color: #a6e22e\"\u003eallowed_algorithms\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eES512\u003c/span\u003e\n\u003cspan style=\"color: #a6e22e\"\u003evalidity_leeway\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e5s\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eHere we say, the token must have been issued either by the issuer \u003ccode\u003efoo\u003c/code\u003e, or the issuer \u003ccode\u003ebar\u003c/code\u003e, the \u003ccode\u003eaud\u003c/code\u003e claim must contain \u003ccode\u003ezap\u003c/code\u003e, the scope claim (either \u003ccode\u003escp\u003c/code\u003e or \u003ccode\u003escope\u003c/code\u003e) must be present and contain the scope \u003ccode\u003ebaz\u003c/code\u003e, if the token or the introspection response is signed, it must have been signed by using the \u003ccode\u003eES512\u003c/code\u003e algorithm (ECDSA using P-521 and SHA-512) and if the information about token validity is present, we respect a deviation of 5 seconds.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect1\"\u003e\n\u003ch2 id=\"_authentication_data_source\"\u003eAuthentication Data Source\u003c/h2\u003e\n\u003cdiv class=\"sectionbody\"\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eAn authentication data source is actually a list of possible strategies for subject authentication data retrieval. The entries following the first one are fallbacks and are only executed if the previous strategy could not retrieve the required authentication data from the request.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThis fallback mechanism can become handy, if different clients of your application send the authentication data using different methods. \u003ca href=\"https://datatracker.ietf.org/doc/html/rfc6750\"\u003eRFC 6750\u003c/a\u003e describes for example how to use bearer tokens in HTTP requests to access OAuth 2.0 protected resources. This RFC says, a token can either be sent in the \u003ccode\u003eAuthorization\u003c/code\u003e header, or in a query parameter, or even as part of the HTTP body. So you can define the following list to let Heimdall try to extract the access token from all three places:\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"yaml\"\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003eheader\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eAuthorization\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003eschema\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eBearer\u003c/span\u003e\n\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003equery_parameter\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eaccess_token\u003c/span\u003e\n\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003ebody_parameter\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eaccess_token\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThe available strategies are described in the following sections.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect2\"\u003e\n\u003ch3 id=\"_cookie_strategy\"\u003eCookie Strategy\u003c/h3\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThis strategy can retrieve authentication data from a specific HTTP cookie. Following properties are supported:\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"ulist\"\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003ecookie\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003estring\u003c/em\u003e (mandatory)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThe name of the cookie to use.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\u003cdiv class=\"exampleblock\"\u003e\n\u003cdiv class=\"title\"\u003eExample 2. Cookie Strategy usage\u003c/div\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eImagine you want Heimdall to verify an authentication session, which is represented by a specific cookie before the request hits your upstream service. If the client of your upstream application, which is case of a cookie would usually be a browser sends a cookie named \u0026#34;session\u0026#34;, you can inform Heimdall to extract and use it by configuring this strategy as follows:\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"yaml\"\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003ecookie\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003emy_session_cookie\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect2\"\u003e\n\u003ch3 id=\"_header_strategy\"\u003eHeader Strategy\u003c/h3\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThis strategy can retrieve authentication data from a specific HTTP header. Following properties are supported:\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"ulist\"\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003eheader\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003estring\u003c/em\u003e (mandatory)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThe name of the header to use.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003eschema\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003estring\u003c/em\u003e (optional)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eSchema, which should be present in the header value. If specified, but not present in the header value, the authentication data cannot be retrieved, effectively making the affected authenticator feel not responsible for the request.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\u003cdiv class=\"exampleblock\"\u003e\n\u003cdiv class=\"title\"\u003eExample 3. Header Strategy usage\u003c/div\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eImagine you want Heimdall to verify an access token used to protect your upstream service. If the client of your upstream application sends the access token in the HTTP \u003ccode\u003eAuthorization\u003c/code\u003e header, you can inform Heimdall to extract it from there by configuring this strategy as follows:\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"yaml\"\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003eheader\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eAuthorization\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003eschema\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eBearer\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect2\"\u003e\n\u003ch3 id=\"_query_parameter_strategy\"\u003eQuery Parameter Strategy\u003c/h3\u003e\n\u003cdiv class=\"ulist\"\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003equery_parameter\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003estring\u003c/em\u003e (mandatory)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThe name of the query parameter to use.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\u003cdiv class=\"exampleblock\"\u003e\n\u003cdiv class=\"title\"\u003eExample 4. Query Parameter Strategy usage\u003c/div\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eImagine you want Heimdall to verify an access token used to protect your upstream service. If the client of your upstream application sends the access token in the query parameter named \u0026#34;access_token\u0026#34;, you can inform Heimdall to extract it from there by configuring this strategy as follows:\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"yaml\"\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003equery_parameter\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eaccess_token\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect2\"\u003e\n\u003ch3 id=\"_body_parameter_strategy\"\u003eBody Parameter Strategy\u003c/h3\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThe usage of this strategy is only possible when the request payload is either JSON or \u003ccode\u003eapplication/x-www-form-urlencoded\u003c/code\u003e encoded. The \u003ccode\u003eContent-Type\u003c/code\u003e of the request must also either be set to \u003ccode\u003eapplication/x-www-form-urlencoded\u003c/code\u003e or to a MIME type, which contains \u003ccode\u003ejson\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"ulist\"\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003ebody_parameter\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003estring\u003c/em\u003e (mandatory)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThe name of the body parameter to use.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\u003cdiv class=\"exampleblock\"\u003e\n\u003cdiv class=\"title\"\u003eExample 5. Body Parameter Strategy usage\u003c/div\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eImagine you want Heimdall to verify an access token used to protect your upstream service. If the client of your upstream application sends the access token in the body parameter named \u0026#34;access_token\u0026#34;, you can inform Heimdall to extract it from there by configuring this strategy as follows:\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"yaml\"\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003ebody_parameter\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eaccess_token\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect1\"\u003e\n\u003ch2 id=\"_authentication_strategy\"\u003eAuthentication Strategy\u003c/h2\u003e\n\u003cdiv class=\"sectionbody\"\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eAuthentication strategy is kind of abstract type, so you have to define which specific type to use. Each type has its own configuration options.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eAn AuthStrategy configuration entry must contain the following two properties:\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"ulist\"\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003etype\u003c/code\u003e - The type of the strategy. Available types are described in the following sections.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003econfig\u003c/code\u003e - The strategy specific configuration.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eAvailable strategies are described in the following sections.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect2\"\u003e\n\u003ch3 id=\"_api_key_strategy\"\u003eAPI Key Strategy\u003c/h3\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThis strategy can be used if your endpoint expects a specific api key be send in a header or a cookie.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003e\u003ccode\u003etype\u003c/code\u003e must be set to \u003ccode\u003eapi_key\u003c/code\u003e. \u003ccode\u003econfig\u003c/code\u003e supports the following properties:\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"ulist\"\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003ein\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003estring\u003c/em\u003e (mandatory)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eWhere to put the api key. Can be either \u003ccode\u003eheader\u003c/code\u003e, or \u003ccode\u003ecookie\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003ename\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003estring\u003c/em\u003e (mandatory)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThe name of either the header or the cookie.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003evalue\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003estring\u003c/em\u003e (mandatory)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThe value of the api key.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\u003cdiv class=\"exampleblock\"\u003e\n\u003cdiv class=\"title\"\u003eExample 6. API Key Strategy configuration\u003c/div\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThe following snippet shows how to configure this strategy to send an api key in the \u003ccode\u003eX-My-API-Key\u003c/code\u003e HTTP header.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"yaml\"\u003e\u003cspan style=\"color: #a6e22e\"\u003etype\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eapi_key\u003c/span\u003e\n\u003cspan style=\"color: #a6e22e\"\u003econfig\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003ein\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eheader\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003ename\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eX-My-API-Key\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003evalue\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003esuper-duper-secret-key\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect2\"\u003e\n\u003ch3 id=\"_basic_auth_strategy\"\u003eBasic Auth Strategy\u003c/h3\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThis strategy can be used if your endpoint is protected by HTTP basic authentication and expects the HTTP \u003ccode\u003eAuthorization\u003c/code\u003e header with required values.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003e\u003ccode\u003etype\u003c/code\u003e must be set to \u003ccode\u003ebasic_auth\u003c/code\u003e. \u003ccode\u003econfig\u003c/code\u003e supports the following properties:\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"ulist\"\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003euser\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003estring\u003c/em\u003e (mandatory)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThe user-id.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003epassword\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003estring\u003c/em\u003e (mandatory)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThe password.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\u003cdiv class=\"exampleblock\"\u003e\n\u003cdiv class=\"title\"\u003eExample 7. Basic Auth Strategy configuration\u003c/div\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThe following snippet shows how to configure this strategy with user set to \u0026#34;Alladin\u0026#34; and password set to \u0026#34;open sesame\u0026#34;\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"yaml\"\u003e\u003cspan style=\"color: #a6e22e\"\u003etype\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ebasic_auth\u003c/span\u003e\n\u003cspan style=\"color: #a6e22e\"\u003econfig\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003euser\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eAlladin\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003epassword\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eopen sesame\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect2\"\u003e\n\u003ch3 id=\"_client_credentials_strategy\"\u003eClient Credentials Strategy\u003c/h3\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThis strategy implements the \u003ca href=\"https://datatracker.ietf.org/doc/html/rfc6749#section-4.4\"\u003eOAuth2 Client Credentials Grant Flow\u003c/a\u003e to obtain an access token expected by the endpoint. Heimdall caches the received access token.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003e\u003ccode\u003etype\u003c/code\u003e must be set to \u003ccode\u003eclient_credentials\u003c/code\u003e. \u003ccode\u003econfig\u003c/code\u003e supports the following properties:\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"ulist\"\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003eclient_id\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003estring\u003c/em\u003e (mandatory)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThe client identifier for Heimdall.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003eclient_secret\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003estring\u003c/em\u003e (mandatory)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThe client secret for Heimdall.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003escopes\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003estring array\u003c/em\u003e (optional)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThe scopes required for the access token.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003etoken_url\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003estring\u003c/em\u003e (mandatory)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThe token endpoint of the authorization server.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\u003cdiv class=\"exampleblock\"\u003e\n\u003cdiv class=\"title\"\u003eExample 8. Client Credentials Strategy configuration\u003c/div\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"yaml\"\u003e\u003cspan style=\"color: #a6e22e\"\u003etype\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eclient_credentials\u003c/span\u003e\n\u003cspan style=\"color: #a6e22e\"\u003econfig\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003etoken_url\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ehttps://my-auth.provider/token\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003eclient_id\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003efoo\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003eclient_secret\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ebar\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003escopes\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n    \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ebaz\u003c/span\u003e\n    \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ezap\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect1\"\u003e\n\u003ch2 id=\"_authorization_expression\"\u003eAuthorization Expression\u003c/h2\u003e\n\u003cdiv class=\"sectionbody\"\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eAuthorization expressions define, as the name implies expressions for authorization purposes and have the following properties:\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"ulist\"\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003eexpression\u003c/code\u003e\u003c/strong\u003e \u003cem\u003estring\u003c/em\u003e (mandatory)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThe expression to execute.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003emessage\u003c/code\u003e\u003c/strong\u003e \u003cem\u003estring\u003c/em\u003e (optional)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThe message to include into the error if the expression fails.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\u003cdiv class=\"exampleblock\"\u003e\n\u003cdiv class=\"title\"\u003eExample 9. Example expression using \u003ca href=\"https://github.com/google/cel-spec\"\u003eCEL\u003c/a\u003e\u003c/div\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThe expression below determine whether \u003ccode\u003eattributes\u003c/code\u003e property of a \u003ccode\u003esubject\u003c/code\u003e object (also shown below) has at least one key that starts with the \u003ccode\u003egroup\u003c/code\u003e prefix, and ensure that all group-like keys have list values containing only strings that end with \u003ccode\u003e@acme.co\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"title\"\u003esubject\u003c/div\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"yaml\"\u003e\u003cspan style=\"color: #a6e22e\"\u003eid\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003efoobar\u0026#34;\u003c/span\u003e\n\u003cspan style=\"color: #a6e22e\"\u003eattributes\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003egroup1\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e[\u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003eadmin@acme.co\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003eanalyst@acme.co\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e]\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003elabels\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e[\u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003emetadata\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003eprod\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003epii\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e]\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003egroupN\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e[\u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003eforever@acme.co\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e]\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"yaml\"\u003e\u003cspan style=\"color: #a6e22e\"\u003eexpression\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e|\u003c/span\u003e\n  \u003cspan style=\"color: #e6db74\"\u003esubject.attributes.exists(c, c.startsWith(\u0026#39;group\u0026#39;)) \u0026amp;\u0026amp;\u003c/span\u003e\n  \u003cspan style=\"color: #e6db74\"\u003esubject.attributes\u003c/span\u003e\n      \u003cspan style=\"color: #e6db74\"\u003e.filter(c, c.startsWith(\u0026#39;group\u0026#39;))\u003c/span\u003e\n      \u003cspan style=\"color: #e6db74\"\u003e.all(c, subject.attributes[c]\u003c/span\u003e\n      \u003cspan style=\"color: #e6db74\"\u003e.all(g, g.endsWith(\u0026#39;@acme.co\u0026#39;)))\u003c/span\u003e\n\u003cspan style=\"color: #a6e22e\"\u003emessage\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eNo groups ending with @acme.co present\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect1\"\u003e\n\u003ch2 id=\"_cors\"\u003eCORS\u003c/h2\u003e\n\u003cdiv class=\"sectionbody\"\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS\"\u003eCORS\u003c/a\u003e (Cross-Origin Resource Sharing) headers can be added and configured by making use of this type. This functionality allows for advanced security features to quickly be set. If CORS headers are set, then heimdall does not pass preflight requests to its decision pipeline, instead the response will be generated and sent back to the client directly. Following properties are supported:\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"ulist\"\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003eallowed_origins\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003estring array\u003c/em\u003e (optional)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eList of origins that may access the resource. Defaults to all, if not set, but any of the other CORS options are configured.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003eallowed_methods\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003estring array\u003c/em\u003e (optional)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eList of methods allowed when accessing the resource. This is used in response to a preflight request. Defaults to \u003ccode\u003eGET\u003c/code\u003e, \u003ccode\u003ePOST\u003c/code\u003e, \u003ccode\u003eHEAD\u003c/code\u003e, \u003ccode\u003ePUT\u003c/code\u003e, \u003ccode\u003eDELETE\u003c/code\u003e and \u003ccode\u003ePATCH\u003c/code\u003e if not set, but any of the other CORS options are configured.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003eallowed_headers\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003estring array\u003c/em\u003e (optional)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eList of request headers that can be used when making the actual request.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003eexposed_headers\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003estring array\u003c/em\u003e (optional)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003e\u0026#34;Allow-List\u0026#34; of headers that clients are allowed to access.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003eallow_credentials\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003eboolean\u003c/em\u003e (optional)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eIndicates whether the response to the request can be exposed when the credentials flag is true. When used as part of a response to a preflight request, this indicates whether the actual request can be made using credentials. Defaults to \u003ccode\u003efalse\u003c/code\u003e if not set, but any of the other CORS options are configured.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003emax_age\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003e\u003ca href=\"#_duration\"\u003eDuration\u003c/a\u003e\u003c/em\u003e (optional)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eIndicates how long the results of a preflight request can be cached. Defaults to 0 seconds if not set, but any of the other CORS options are configured.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\u003cdiv class=\"exampleblock\"\u003e\n\u003cdiv class=\"title\"\u003eExample 10. Possible configuration\u003c/div\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"yaml\"\u003e\u003cspan style=\"color: #a6e22e\"\u003eallowed_origins\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n  \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eexample.org\u003c/span\u003e\n\u003cspan style=\"color: #a6e22e\"\u003eallowed_methods\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n  \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eHEAD\u003c/span\u003e\n  \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ePATCH\u003c/span\u003e\n\u003cspan style=\"color: #a6e22e\"\u003eallow_credentials\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #66d9ef\"\u003etrue\u003c/span\u003e\n\u003cspan style=\"color: #a6e22e\"\u003emax_age\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e10s\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect1\"\u003e\n\u003ch2 id=\"_duration\"\u003eDuration\u003c/h2\u003e\n\u003cdiv class=\"sectionbody\"\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eDuration is actually a string type, which adheres to the following pattern: \u003ccode\u003e^[0-9]+(ns|us|ms|s|m|h)$\u003c/code\u003e\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eSo with \u003ccode\u003e10s\u003c/code\u003e you can define the duration of 10 seconds and with \u003ccode\u003e2h\u003c/code\u003e you can say 2 hours.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect1\"\u003e\n\u003ch2 id=\"_endpoint\"\u003eEndpoint\u003c/h2\u003e\n\u003cdiv class=\"sectionbody\"\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThe Endpoint type defines properties required for the communication with an endpoint.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eIf only the URL is required to be set, you can specify it by using just a string. If more than the URL is required to be specified, following properties are available:\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"ulist\"\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003eurl\u003c/code\u003e\u003c/strong\u003e \u003cem\u003estring\u003c/em\u003e (mandatory)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThe actual url of the endpoint.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003emethod\u003c/code\u003e\u003c/strong\u003e \u003cem\u003estring\u003c/em\u003e (optional)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThe HTTP method to use while communicating with the endpoint. If not set \u003ccode\u003ePOST\u003c/code\u003e is used.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003eretry\u003c/code\u003e\u003c/strong\u003e \u003cem\u003e\u003ca href=\"#_retry\"\u003eRetry\u003c/a\u003e\u003c/em\u003e (optional)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eWhat to do if the communication fails. If not configured, no retry attempts are done.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003eauth\u003c/code\u003e\u003c/strong\u003e \u003cem\u003e\u003ca href=\"#_authentication_strategy:\"\u003eAuthentication Strategy\u003c/a\u003e\u003c/em\u003e (optional)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eAuthentication strategy to apply, if the endpoint requires authentication.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003eheaders\u003c/code\u003e\u003c/strong\u003e \u003cem\u003emap of strings\u003c/em\u003e (optional)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eHTTP headers to be sent to the endpoint.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"admonitionblock caution\"\u003e\n\u003ctable\u003e\n\u003ctbody\u003e\u003ctr\u003e\n\u003ctd class=\"icon\"\u003e\n\u003ci class=\"fa icon-caution\" title=\"Caution\"\u003e\u003c/i\u003e\n\u003c/td\u003e\n\u003ctd class=\"content\"\u003e\nThese headers are not analyzed by heimdall and are just forwarded to the endpoint. E.g. if you configure the \u003ccode\u003eContent-Encoding\u003c/code\u003e to something like \u003ccode\u003egzip\u003c/code\u003e, the service behind the used endpoint might fail to answer, as it would expect the body to be compressed.\n\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003eenable_http_cache\u003c/code\u003e\u003c/strong\u003e \u003cem\u003ebool\u003c/em\u003e (optional)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eWhether HTTP caching according to \u003ca href=\"https://www.rfc-editor.org/rfc/rfc7234\"\u003eRFC 7234\u003c/a\u003e should be used. Defaults to \u003ccode\u003efalse\u003c/code\u003e if not otherwise stated in the description of the configuration type, making use of the \u003ccode\u003eendpoint\u003c/code\u003e property. If set to \u003ccode\u003etrue\u003c/code\u003e heimdall will strictly follow the requirements from RFC 7234 and cache the responses if possible and reuse these if still valid.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"admonitionblock note\"\u003e\n\u003ctable\u003e\n\u003ctbody\u003e\u003ctr\u003e\n\u003ctd class=\"icon\"\u003e\n\u003ci class=\"fa icon-note\" title=\"Note\"\u003e\u003c/i\u003e\n\u003c/td\u003e\n\u003ctd class=\"content\"\u003e\nIf the endpoint referenced by the URL does not provide any explicit expiration time, no heuristic freshness lifetime is calculated. Heimdall treats such responses as not cacheable.\n\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\u003cdiv class=\"exampleblock\"\u003e\n\u003cdiv class=\"title\"\u003eExample 11. Endpoint configuration as string\u003c/div\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"text\"\u003ehttp://foo.bar\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"exampleblock\"\u003e\n\u003cdiv class=\"title\"\u003eExample 12. Structured Endpoint configuration\u003c/div\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"yaml\"\u003e\u003cspan style=\"color: #a6e22e\"\u003eurl\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ehttp://foo.bar\u003c/span\u003e\n\u003cspan style=\"color: #a6e22e\"\u003emethod\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eGET\u003c/span\u003e\n\u003cspan style=\"color: #a6e22e\"\u003eretry\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003egive_up_after\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e5s\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003emax_delay\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e1s\u003c/span\u003e\n\u003cspan style=\"color: #a6e22e\"\u003eauth\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003etype\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eapi_key\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003econfig\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003ename\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003efoo\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003evalue\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ebar\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003ein\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ecookie\u003c/span\u003e\n\u003cspan style=\"color: #a6e22e\"\u003eheaders\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003eX-My-First-Header\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003efoobar\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003eX-My-Second-Header\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ebarfoo\u003c/span\u003e\n\u003cspan style=\"color: #a6e22e\"\u003eenable_http_cache\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #66d9ef\"\u003etrue\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect1\"\u003e\n\u003ch2 id=\"_error_condition\"\u003eError Condition\u003c/h2\u003e\n\u003cdiv class=\"sectionbody\"\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThis type supports definition of conditions, under which an error handler mechanism should execute its logic. Such conditions are required for all error handler mechanisms, but the default one. All condition elements are evaluated using boolean \u003ccode\u003eand\u003c/code\u003e. Following conditions are possible:\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"ulist\"\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003eerror\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003e\u003ca href=\"#_error_descriptor\"\u003eError Descriptor\u003c/a\u003e array\u003c/em\u003e (mandatory)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eA list with error types to match. Configured entries are evaluated using a boolean \u003ccode\u003eor\u003c/code\u003e logic.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003erequest_cidr\u003c/code\u003e\u003c/strong\u003e:    \u003cem\u003estring array\u003c/em\u003e (optional)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eA list with CIDR entries to match. Configured entries are evaluated using a boolean \u003ccode\u003eor\u003c/code\u003e logic.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003erequest_headers\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003estring array map\u003c/em\u003e (optional)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eA map with header names and the corresponding values to match. Configured entries are evaluated using a boolean \u003ccode\u003eor\u003c/code\u003e logic. This holds also true for the header values.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\u003cdiv class=\"exampleblock\"\u003e\n\u003cdiv class=\"title\"\u003eExample 13. Complex Error Condition configuration\u003c/div\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThis example shows in principle all possible combinations. The actual values and the amount of them will for sure differ in your particular case. However, for showing the idea, the complexity of this example is enough.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"yaml\"\u003e\u003cspan style=\"color: #a6e22e\"\u003eerror\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n  \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003etype\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eprecondition_error\u003c/span\u003e\n  \u003cspan style=\"color: #75715e\"\u003e# OR\u003c/span\u003e\n  \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003etype\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eauthorization_error\u003c/span\u003e\n\u003cspan style=\"color: #75715e\"\u003e# AND\u003c/span\u003e\n\u003cspan style=\"color: #a6e22e\"\u003erequest_cidr\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n  \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e192.168.0.0/16\u003c/span\u003e\n  \u003cspan style=\"color: #75715e\"\u003e# OR\u003c/span\u003e\n  \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e10.0.0.0/8\u003c/span\u003e\n\u003cspan style=\"color: #75715e\"\u003e# AND\u003c/span\u003e\n\u003cspan style=\"color: #a6e22e\"\u003erequest_headers\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003eAccept\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n    \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003etext/html\u003c/span\u003e\n    \u003cspan style=\"color: #75715e\"\u003e# OR\u003c/span\u003e\n    \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e*/*\u0026#34;\u003c/span\u003e\n  \u003cspan style=\"color: #75715e\"\u003e# OR\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003eContent-Type\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n    \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eapplication/json\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThis condition evaluates to true only if all parts of it (\u003ccode\u003eerror\u003c/code\u003e, \u003ccode\u003erequest_cidr\u003c/code\u003e, \u003ccode\u003erequest_headers\u003c/code\u003e) evaluate to true. With\n* \u003ccode\u003eerror\u003c/code\u003e evaluates to true, if the encountered error was either \u003ccode\u003eprecondition_error\u003c/code\u003e or \u003ccode\u003eauthorization_error\u003c/code\u003e.\n* \u003ccode\u003erequest_cidr\u003c/code\u003e evaluates to true, if the request came from an IP in either \u003ccode\u003e192.168.0.0/16\u003c/code\u003e or \u003ccode\u003e10.0.0.0/8\u003c/code\u003e range. And\n* \u003ccode\u003erequest_headers\u003c/code\u003e evaluates to true, if either the HTTP \u003ccode\u003eAccept\u003c/code\u003e header contains one of \u003ccode\u003etext/html\u003c/code\u003e, or \u003ccode\u003e\u003cstrong\u003e/\u003c/strong\u003e\u003c/code\u003e, or the HTTP \u003ccode\u003eContet-Type\u003c/code\u003e header contains \u003ccode\u003eapplication/json\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"exampleblock\"\u003e\n\u003cdiv class=\"title\"\u003eExample 14. Simple Error Condition configuration\u003c/div\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThis example is a very simple one, showing just the usage of the \u003ccode\u003eerror\u003c/code\u003e attribute:\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"yaml\"\u003e\u003cspan style=\"color: #a6e22e\"\u003eerror\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n  \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003etype\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eauthentication_error\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThis condition evaluates to true, if the encountered error was \u003ccode\u003eauthentication_error\u003c/code\u003e raised by any of the  configured authenticators.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect1\"\u003e\n\u003ch2 id=\"_error_descriptor\"\u003eError Descriptor\u003c/h2\u003e\n\u003cdiv class=\"sectionbody\"\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eDescribes an error to match in \u003ca href=\"#_error_condition\"\u003eError Conditions\u003c/a\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eFollowing configuration properties are available:\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"ulist\"\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003etype\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003e\u003ca href=\"#_errorstate_type\"\u003eError Type\u003c/a\u003e\u003c/em\u003e (mandatory)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eAn error type to match.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003eraised_by\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003estring\u003c/em\u003e (optional)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThe identifier of the pipeline mechanism, which raised this error.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\u003cdiv class=\"admonitionblock caution\"\u003e\n\u003ctable\u003e\n\u003ctbody\u003e\u003ctr\u003e\n\u003ctd class=\"icon\"\u003e\n\u003ci class=\"fa icon-caution\" title=\"Caution\"\u003e\u003c/i\u003e\n\u003c/td\u003e\n\u003ctd class=\"content\"\u003e\nheimdall does not verify the integrity of the pipeline mechanism identifier configured using \u003ccode\u003eraised_by\u003c/code\u003e on start or while loading rules. Thus, if there is no mechanism with the given identifier, the error will not match.\n\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003cdiv class=\"exampleblock\"\u003e\n\u003cdiv class=\"title\"\u003eExample 15. Error Descriptor configuration\u003c/div\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"yaml\"\u003e\u003cspan style=\"color: #a6e22e\"\u003etype\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eauthentication_error\u003c/span\u003e\n\u003cspan style=\"color: #a6e22e\"\u003eraised_by\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003emy_oauth2_authenticator\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eHere the descriptor says, the expected error is of type \u003ccode\u003eauthentication_error\u003c/code\u003e and should have been raised by a mechanism with the id \u003ccode\u003emy_oauth2_authenticator\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect1\"\u003e\n\u003ch2 id=\"_errorstate_type\"\u003eError/State Type\u003c/h2\u003e\n\u003cdiv class=\"sectionbody\"\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eHeimdall defines a couple of error/state types, which it uses to signal errors. Those, which are marked with (*) are available for configuring \u003ca href=\"#_error_condition\"\u003eError Conditions\u003c/a\u003e via \u003ca href=\"#_error_descriptor\"\u003eError Descriptors\u003c/a\u003e. All can be used to define overrides for the HTTP response codes.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eFollowing types are available:\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"ulist\"\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003eaccepted\u003c/code\u003e - this is the only state type in this list and is used to signal, the matched decision pipeline has been executed successfully, so the request can be forwarded to the upstream service. The response of that type results by default in a \u003ccode\u003e200 OK\u003c/code\u003e response.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003eauthentication_error\u003c/code\u003e (*) - used if an authenticator failed to verify authentication data available in the request. E.g. an authenticator was configured to verify a JWT and the signature of it was invalid. If none of the authenticators used in a pipeline were able to authenticate the user, and the default error handler was used to handle such error, it will by default result in a \u003ccode\u003e401 Unauthorized\u003c/code\u003e response.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003eauthorization_error\u003c/code\u003e (*) - used if an authorizer failed to authorize the subject. E.g. an authorizer is configured to use an expression on the given subject and request context, but that expression returned with an error. Error of this type results by default in \u003ccode\u003e403 Forbidden\u003c/code\u003e response if the default error handler was used to handle such error.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003ecommunication_error\u003c/code\u003e (*) - this error is used to signal a communication error while communicating to a remote system during the execution of the pipeline of the matched rule. Timeouts of DNSs errors result in such an error. Error of this type results by default in \u003ccode\u003e502 Bad Gateway\u003c/code\u003e HTTP code if handled by the default error handler.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003einternal_error\u003c/code\u003e - used if heimdall run into an internal error condition while processing the request. E.g. something went wrong while unmarshalling a JSON object, or if there was a configuration error, which couldn’t be raised while loading a rule, etc. Results by default in \u003ccode\u003e500 Internal Server Error\u003c/code\u003e response to the caller.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003emethod_error\u003c/code\u003e - this error is used to signal that a matched rule does not allow usage of the HTTP method used to submit the request. Error of this type results by default in \u003ccode\u003e405 Method Not Allowed\u003c/code\u003e HTTP code.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003eno_rule_error\u003c/code\u003e - this error is used to signal, there is no matching rule to handle the given request. Error of this type results by default in \u003ccode\u003e404 Not Found\u003c/code\u003e HTTP code.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003eprecondition_error\u003c/code\u003e (*) - used if the request does not contain required/expected data. E.g. if an authenticator could not find a cookie configured. Error of this type results by default in \u003ccode\u003e400 Bad Request\u003c/code\u003e HTTP code if handled by the default error handler.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect1\"\u003e\n\u003ch2 id=\"_key_store\"\u003eKey Store\u003c/h2\u003e\n\u003cdiv class=\"sectionbody\"\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThis type configures a key store holding keys and corresponding certificate chains. PKCS#1, as well as PKCS#8 encodings are supported for private keys.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eWhile loading a key store following verifications are done:\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"olist arabic\"\u003e\n\u003col class=\"arabic\"\u003e\n\u003cli\u003e\n\u003cp\u003eUniqueness of key ids and rejection of key stores which violate this condition (see also \u003ca href=\"#_key_id_lookup\"\u003eKey-Id Lookup\u003c/a\u003e)\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eCorrelation of keys and certificates to build a valid certificate chain for every given key if certificates are present. If the correlation fails, an error is raised and heimdall will refuse to start.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eCertificate chain validation. If the chain is invalid, an error is raised and heimdall will refuse to start.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eFollowing configuration properties are available:\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"ulist\"\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003epath\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003estring\u003c/em\u003e (mandatory)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThe path to the PEM file with the cryptographic material.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003epassword\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003estring\u003c/em\u003e (optional)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eIf the key material is protected with a password, this property can be set to decipher it. Password protection is only supported for PKCS#8 encoded keys\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"admonitionblock caution\"\u003e\n\u003ctable\u003e\n\u003ctbody\u003e\u003ctr\u003e\n\u003ctd class=\"icon\"\u003e\n\u003ci class=\"fa icon-caution\" title=\"Caution\"\u003e\u003c/i\u003e\n\u003c/td\u003e\n\u003ctd class=\"content\"\u003e\nIf the key store contains multiple keys and these keys are password protected, same password must be used for all of these.\n\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\u003cdiv class=\"exampleblock\"\u003e\n\u003cdiv class=\"title\"\u003eExample 16. Example configuration\u003c/div\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"yaml\"\u003e\u003cspan style=\"color: #a6e22e\"\u003epath\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e/path/to/keystore.pem\u003c/span\u003e\n\u003cspan style=\"color: #a6e22e\"\u003epassword\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eVeryInsecure!\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect1\"\u003e\n\u003ch2 id=\"_respond\"\u003eRespond\u003c/h2\u003e\n\u003cdiv class=\"sectionbody\"\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThis type enables instructing heimdall to preserve error information and provide it in the response body to the caller, as well as to use HTTP status codes deviating from those heimdall would usually use. The configuration, which can be done using this type affects only the behavior of the default error handler.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eFollowing properties are supported:\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"ulist\"\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003everbose\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003eboolean\u003c/em\u003e (optional)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eBy making use of this property you can instruct heimdall to preserve error information and provide it in the response body to the caller. Defaults to \u003ccode\u003efalse\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eHeimdall supports MIME type negotiation. So, if the client sets the HTTP \u003ccode\u003eAccept\u003c/code\u003e header to e.g. \u003ccode\u003eapplication/json\u003c/code\u003e, and Heimdall run into an unhandled internal error condition, in addition to responding with \u003ccode\u003e500 Internal Server Error\u003c/code\u003e, it will render an error message, like shown below, if \u003ccode\u003everbose\u003c/code\u003e has been set to \u003ccode\u003etrue\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"json\"\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e{\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\n  \u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;code\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;internal error\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\n  \u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;message\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;whatever led to the error\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\n\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThe \u003ccode\u003emessage\u003c/code\u003e will however contain just high-level information, like \u0026#34;failed to parse something\u0026#34;, but will not contain any stack traces.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003ewith\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003eResponseOverride set\u003c/em\u003e (optional)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThis property enables mapping between response/error types used by heimdall and the corresponding HTTP status codes. Each entry must be from the list of the supported \u003ca href=\"#_errorstate_type\"\u003eError/State Types\u003c/a\u003e and contain exactly one property named \u003ccode\u003ecode\u003c/code\u003e, which then defines the desired mapping.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"exampleblock\"\u003e\n\u003cdiv class=\"title\"\u003eExample 17. Making error responses verbose and changing the HTTP codes for some errors\u003c/div\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"yaml\"\u003e\u003cspan style=\"color: #a6e22e\"\u003everbose\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #66d9ef\"\u003etrue\u003c/span\u003e\n\u003cspan style=\"color: #a6e22e\"\u003ewith\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003eauthentication_error\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003ecode\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #ae81ff\"\u003e404\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003eauthorization_error\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003ecode\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e404\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect1\"\u003e\n\u003ch2 id=\"_retry\"\u003eRetry\u003c/h2\u003e\n\u003cdiv class=\"sectionbody\"\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eImplements an exponential backoff strategy for endpoint communication. It increases the backoff exponentially by multiplying the \u003ccode\u003emax_delay\u003c/code\u003e with 2^(attempt count)\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"ulist\"\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003egive_up_after\u003c/code\u003e\u003c/strong\u003e: \u003ca href=\"#_duration\"\u003eDuration\u003c/a\u003e (optional)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eSets an upper bound on the maximum time to wait between two requests. Default to 0, which means no upper bound.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003emax_delay\u003c/code\u003e\u003c/strong\u003e: _\u003ca href=\"#_duration\"\u003eDuration\u003c/a\u003e (mandatory)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThe initial backoff.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\u003cdiv class=\"exampleblock\"\u003e\n\u003cdiv class=\"title\"\u003eExample 18. Retry configuration\u003c/div\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eIn this example the backoff will be 1, 2, 4, 8, 16, 32, 60, …​\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"yaml\"\u003e\u003cspan style=\"color: #a6e22e\"\u003egive_up_after\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e60s\u003c/span\u003e\n\u003cspan style=\"color: #a6e22e\"\u003emax_delay\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e1s\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect1\"\u003e\n\u003ch2 id=\"_scopes_matcher\"\u003eScopes Matcher\u003c/h2\u003e\n\u003cdiv class=\"sectionbody\"\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eScopes matcher is a configuration type allowing configuration of different strategies to match required scopes. In its simplest shape it can be just an array of strings (implemented by the \u003ca href=\"#_exact\"\u003eExact\u003c/a\u003e) scope matcher. To cover many use cases, different strategies are available and described in the following sections.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eRegardless of the strategy, each matcher can explicitly be configured and supports the following configuration properties:\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"ulist\"\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003ematching_strategy\u003c/code\u003e - the type of the mathing strategy.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003evalues\u003c/code\u003e - the list of scope patterns\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect2\"\u003e\n\u003ch3 id=\"_exact\"\u003eExact\u003c/h3\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThis the simplest matcher and is automatically selected, if just an array of strings is configured as shown in the following snippet:\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"yaml\"\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003efoo\u003c/span\u003e\n\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ebar\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eHowever, as written in the \u003ca href=\"#_scopes_matcher\"\u003eScopes Matcher\u003c/a\u003e section, it can also explicitly be selected by setting \u003ccode\u003ematching_strategy\u003c/code\u003e to \u003ccode\u003eexact\u003c/code\u003e and defining the required scopes in the \u003ccode\u003evalues\u003c/code\u003e property.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"exampleblock\"\u003e\n\u003cdiv class=\"title\"\u003eExample 19. Essentially same configurations\u003c/div\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"yaml\"\u003e\u003cspan style=\"color: #a6e22e\"\u003ematching_strategy\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eexact\u003c/span\u003e\n\u003cspan style=\"color: #a6e22e\"\u003evalues\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n  \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003efoo\u003c/span\u003e\n  \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ebar\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"yaml\"\u003e  \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003efoo\u003c/span\u003e\n  \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ebar\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect2\"\u003e\n\u003ch3 id=\"_hierarchic\"\u003eHierarchic\u003c/h3\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThis matcher enables matching hierarchical scopes, which use \u003ccode\u003e.\u003c/code\u003e as separator. Imagine your system is organized that way, that it defines namespaces for different services like this:\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"ulist\"\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003emy-service\u003c/code\u003e being the top namespace\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003emy-service.booking\u003c/code\u003e - being the namespace of the booking service\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003emy-service.orders\u003c/code\u003e - being the namespace of the orders service\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003emy-service.orders.partners\u003c/code\u003e - being the namespace of the order service for partners and\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003emy-service.orders.customers\u003c/code\u003e - being the namespace of the order service for customers\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eBasically you’ve established an identity for each of your services (this is comparable to how \u003ca href=\"https://spiffe.io/docs/latest/spiffe-about/spiffe-concepts/#spiffe-id\"\u003eSPIFFE IDs\u003c/a\u003e are organized and also used for).\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eNow, imagine you use these namespaces as scope values to limit the usage of the issued tokens. In such situations the hierarchic scope matcher can become handy if you would like to assert any scope of the token must be in e.g. the \u003ccode\u003emy-service\u003c/code\u003e or the \u003ccode\u003emy-service.orders\u003c/code\u003e namespace.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThis matcher can only be used by explicitly setting the \u003ccode\u003ematching_strategy\u003c/code\u003e to \u003ccode\u003ehierarchic\u003c/code\u003e and defining the required patterns in the \u003ccode\u003evalues\u003c/code\u003e property.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"exampleblock\"\u003e\n\u003cdiv class=\"title\"\u003eExample 20. Matching of hierarchic scopes\u003c/div\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"yaml\"\u003e\u003cspan style=\"color: #a6e22e\"\u003ematching_strategy\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ehierarchic\u003c/span\u003e\n\u003cspan style=\"color: #a6e22e\"\u003evalues\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n  \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003emy-service\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThis configuration will ensure all scopes withing the scope or scp claim are within the \u003ccode\u003emy-service\u003c/code\u003e namespace. So scope claim like\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"json\"\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e{\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\n  \u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;scope\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e[\u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;my-service.orders\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;my-service.orders.customers\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e]\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\n\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003ewould match, but\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"json\"\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e{\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\n  \u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;scope\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e[\u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;not-my-service\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;my-service.orders.customers\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e]\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\n\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003ewould not match.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect2\"\u003e\n\u003ch3 id=\"_wildcard\"\u003eWildcard\u003c/h3\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThis matcher enables matching scopes using wildcards. It goes beyond the \u003ca href=\"#_hierarchic\"\u003eHierarchic\u003c/a\u003e scope matcher by enabling usage of wildcards.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThis matcher can only be used by explicitly setting the \u003ccode\u003ematching_strategy\u003c/code\u003e to \u003ccode\u003ewildcard\u003c/code\u003e and defining the required patterns in the \u003ccode\u003evalues\u003c/code\u003e property.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect1\"\u003e\n\u003ch2 id=\"_subject\"\u003eSubject\u003c/h2\u003e\n\u003cdiv class=\"sectionbody\"\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThis configuration type enables extraction of subject information from responses received by Heimdall from authentication services. Following properties are available.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"ulist\"\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003eid\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003estring\u003c/em\u003e (mandatory)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eA \u003ca href=\"https://github.com/tidwall/gjson/blob/master/SYNTAX.md\"\u003eGJSON Path\u003c/a\u003e pointing to the id of the subject in the JSON object.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003eattributes\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003estring\u003c/em\u003e (optional)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eA \u003ca href=\"https://github.com/tidwall/gjson/blob/master/SYNTAX.md\"\u003eGJSON Path\u003c/a\u003e pointing to the attributes of the subject in the JSON object. Defaults to \u003ccode\u003e@this\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\u003cdiv class=\"exampleblock\"\u003e\n\u003cdiv class=\"title\"\u003eExample 21. Extracting subject id from an \u003ca href=\"https://tools.ietf.org/html/rfc7662\"\u003eOAuth2 Introspection\u003c/a\u003e endpoint response.\u003c/div\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThis example shows how to extract the subject id from an \u003ca href=\"https://tools.ietf.org/html/rfc7662\"\u003eOAuth2 Introspection\u003c/a\u003e endpoint response and set the subject attributes to the entire response\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"yaml\"\u003e\u003cspan style=\"color: #a6e22e\"\u003eid\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003esub\u003c/span\u003e\n\u003cspan style=\"color: #a6e22e\"\u003eattributes\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #960050\"\u003e@\u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003ethis\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eSetting \u003ccode\u003eattributes\u003c/code\u003e was actually not required, as \u003ccode\u003e@this\u003c/code\u003e would be set by default anyway.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"exampleblock\"\u003e\n\u003cdiv class=\"title\"\u003eExample 22. Extracting subject id from an \u003ca href=\"https://www.ory.sh/docs/kratos/\"\u003eOry Kratos\u003c/a\u003e \u0026#34;whoami\u0026#34; endpoint response\u003c/div\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThis example shows how to extract the subject id from an \u003ca href=\"https://www.ory.sh/docs/kratos/\"\u003eOry Kratos\u003c/a\u003e \u0026#34;whoami\u0026#34; endpoint response and set the subject attributes to the entire response. \u003ccode\u003eattributes\u003c/code\u003e is not configured, so default is used.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"yaml\"\u003e\u003cspan style=\"color: #a6e22e\"\u003eid\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eidentity.id\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect1\"\u003e\n\u003ch2 id=\"_session_lifespan\"\u003eSession Lifespan\u003c/h2\u003e\n\u003cdiv class=\"sectionbody\"\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThis configuration type enables the configuration of session lifespans, used for session validation for those authenticators, which act on non-standard protocols. Following properties are available.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"ulist\"\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003eactive\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003estring\u003c/em\u003e (optional)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eA \u003ca href=\"https://github.com/tidwall/gjson/blob/master/SYNTAX.md\"\u003eGJSON Path\u003c/a\u003e pointing to the field describing the \u0026#34;active\u0026#34; status of the session in the corresponding JSON object. The actual value in that field should be convertable to a \u003ccode\u003ebool\u003c/code\u003e type. If not provided, or not found in the session object, the session is considered to be \u0026#34;active\u0026#34;. \u0026#34;active\u0026#34; means it can be used and represent a valid session between the authentication system and the subject, the session has been issued to.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003eissued_at\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003estring\u003c/em\u003e (optional)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eA \u003ca href=\"https://github.com/tidwall/gjson/blob/master/SYNTAX.md\"\u003eGJSON Path\u003c/a\u003e pointing to the field in the corresponding JSON object, describing the time, when the session object has been issued. If not provided or not found, the issuance time is not considered during session validation.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003enot_before\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003estring\u003c/em\u003e (optional)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eA \u003ca href=\"https://github.com/tidwall/gjson/blob/master/SYNTAX.md\"\u003eGJSON Path\u003c/a\u003e pointing to the field in the corresponding JSON object describing the time, until which the session object is not allowed to be used. If not provided or not found, the corresponding time is not considered during session validation.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003enot_after\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003estring\u003c/em\u003e (optional)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eA \u003ca href=\"https://github.com/tidwall/gjson/blob/master/SYNTAX.md\"\u003eGJSON Path\u003c/a\u003e pointing to the field in the corresponding JSON object describing the time, after which the session object is not allowed to be used. If not provided or not found, the corresponding time is not considered during session validation.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003etime_format\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003estring\u003c/em\u003e (optional)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eSince different authentication system use different representations for time strings, this property allows the definition of the \u003ca href=\"https://pkg.go.dev/time#pkg-constants\"\u003etime format/layout\u003c/a\u003e used by the authentication system. Defaults to Unix Epoch time stamp.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"admonitionblock note\"\u003e\n\u003ctable\u003e\n\u003ctbody\u003e\u003ctr\u003e\n\u003ctd class=\"icon\"\u003e\n\u003ci class=\"fa icon-note\" title=\"Note\"\u003e\u003c/i\u003e\n\u003c/td\u003e\n\u003ctd class=\"content\"\u003e\nYou can use the following \u003ca href=\"https://go.dev/play/p/VjtvWMmp-Ua\"\u003eGo Playground\u003c/a\u003e link to test your time format settings.\n\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003evalidity_leeway\u003c/code\u003e\u003c/strong\u003e: \u003ca href=\"#_duration\"\u003eDuration\u003c/a\u003e (optional)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eEnables definition of an allowed time drift between the authentication system and heimdall for the validation of the session validity. Defaults to 0.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\u003cdiv class=\"exampleblock\"\u003e\n\u003cdiv class=\"title\"\u003eExample 23. Making use of session information received from Ory’s Kratos\u003c/div\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eA typical response from Kratos\u0026#39; \u003ccode\u003ewhoami\u003c/code\u003e endpoint looks like follows (stripped to the most interesting parts):\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"json\"\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e{\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\n  \u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;id\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;1338410d-c473-4503-a96a-53efa06e2531\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\n  \u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;active\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #66d9ef\"\u003etrue\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\n  \u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;expires_at\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;2021-10-15T15:58:57.683338Z\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\n  \u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;authenticated_at\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;2021-10-14T15:58:57.683338Z\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\n  \u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;issued_at\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;2021-10-14T15:58:57.683338Z\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\n  \u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;identity\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e{\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\n    \u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;id\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;9496bbd5-f426-473f-b087-c7df853f274a\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\n    \u003c/span\u003e\u003cspan style=\"color: #960050\"\u003e...\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\n  \u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e}\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\n\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eTo enable usage of these properties in Heimdall, you can configure the Session Lifespan as follows:\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"yaml\"\u003e\u003cspan style=\"color: #a6e22e\"\u003eactive\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eactive\u003c/span\u003e\n\u003cspan style=\"color: #a6e22e\"\u003eissued_at\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eissued_at\u003c/span\u003e\n\u003cspan style=\"color: #a6e22e\"\u003enot_before\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eauthenticated_at\u003c/span\u003e\n\u003cspan style=\"color: #a6e22e\"\u003enot_after\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eexpires_at\u003c/span\u003e\n\u003cspan style=\"color: #a6e22e\"\u003etime_format\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e2006-01-02T15:04:05.999999Z07\u0026#34;\u003c/span\u003e\n\u003cspan style=\"color: #a6e22e\"\u003evalidity_leeway\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e10s\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"exampleblock\"\u003e\n\u003cdiv class=\"title\"\u003eExample 24. Making use of session information received from a compliant OAuth2 authorization service\u003c/div\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eA typical response from a token \u003ccode\u003eintrospection\u003c/code\u003e endpoint looks like follows:\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"json\"\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e{\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\n  \u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;active\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #66d9ef\"\u003etrue\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\n  \u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;client_id\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;l238j323ds-23ij4\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\n  \u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;username\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;jdoe\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\n  \u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;scope\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;read write dolphin\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\n  \u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;sub\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;Z5O3upPC88QrAjx00dis\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\n  \u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;aud\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;https://protected.example.net/resource\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\n  \u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;iss\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;https://server.example.com/\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\n  \u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;exp\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #ae81ff\"\u003e1419356238\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\n  \u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;iat\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #ae81ff\"\u003e1419350238\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e,\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\n  \u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\u0026#34;extension_field\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#34;twenty-seven\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e\n \u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eTo enable usage of these properties in Heimdall, you can configure the Session Lifespan as follows:\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"yaml\"\u003e\u003cspan style=\"color: #a6e22e\"\u003eactive\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eactive\u003c/span\u003e\n\u003cspan style=\"color: #a6e22e\"\u003eissued_at\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eiat\u003c/span\u003e\n\u003cspan style=\"color: #a6e22e\"\u003enot_after\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eexp\u003c/span\u003e\n\u003cspan style=\"color: #a6e22e\"\u003evalidity_leeway\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e10s\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eAs you see, there is no need to define the time format as the times values appearing in the responses from an introspection endpoint are Unix Epoch time stamps.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect1\"\u003e\n\u003ch2 id=\"_timeout\"\u003eTimeout\u003c/h2\u003e\n\u003cdiv class=\"sectionbody\"\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eFollowing configuration properties are supported:\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"ulist\"\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003eread\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003e\u003ca href=\"#_duration\"\u003eDuration\u003c/a\u003e\u003c/em\u003e (optional)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThe amount of time allowed to read the full request including body. Defaults to 5 seconds.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003ewrite\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003e\u003ca href=\"#_duration\"\u003eDuration\u003c/a\u003e\u003c/em\u003e (optional)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThe maximum duration before timing out writes of the response. Defaults to 10 seconds.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003eidle\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003e\u003ca href=\"#_duration\"\u003eDuration\u003c/a\u003e\u003c/em\u003e (optional)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThe maximum amount of time to wait for the next request when keep-alive is enabled. If \u003ccode\u003eìdle\u003c/code\u003e is \u003ccode\u003e0\u003c/code\u003e, the value of \u003ccode\u003eread\u003c/code\u003e timeout is used. Defaults to 2 minutes.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\u003cdiv class=\"exampleblock\"\u003e\n\u003cdiv class=\"title\"\u003eExample 25. Setting the read timeout to 1 second, write timeout to 2 seconds and the idle timeout to 1 minute.\u003c/div\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"yaml\"\u003e\u003cspan style=\"color: #a6e22e\"\u003eread\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e1s\u003c/span\u003e\n\u003cspan style=\"color: #a6e22e\"\u003ewrite\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e2s\u003c/span\u003e\n\u003cspan style=\"color: #a6e22e\"\u003eidle\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e1m\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect1\"\u003e\n\u003ch2 id=\"_tls\"\u003eTLS\u003c/h2\u003e\n\u003cdiv class=\"sectionbody\"\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eFollowing are the supported TLS configuration properties:\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"ulist\"\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003ekey_store\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003e\u003ca href=\"#_key_store\"\u003eKey Store\u003c/a\u003e\u003c/em\u003e (mandatory)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThe key store containing the cryptographic material. At least one private key and the corresponding certificate must be present.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003ekey_id\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003estring\u003c/em\u003e (optional)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eIf the \u003ccode\u003ekey_store\u003c/code\u003e contains multiple keys, this property can be used to specify the key to use (see also \u003ca href=\"#_key_id_lookup\"\u003eKey-Id Lookup\u003c/a\u003e). If not specified, the first key is used. If specified, but there is no key for the given key id present, an error is raised and heimdall will refuse to start.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003emin_version\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003estring\u003c/em\u003e (optional)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eThe minimal TLS version to support. Can be either \u003ccode\u003eTLS1.2\u003c/code\u003e or \u003ccode\u003eTLS1.3\u003c/code\u003e. Defaults to \u003ccode\u003eTLS1.3\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003ecipher_suites\u003c/code\u003e\u003c/strong\u003e: \u003cem\u003estring array\u003c/em\u003e (optional)\u003c/p\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eCan be configured if \u003ccode\u003emin_version\u003c/code\u003e is set to \u003ccode\u003eTLS1.2\u003c/code\u003e. If \u003ccode\u003emin_version\u003c/code\u003e is set to \u003ccode\u003eTLS1.3\u003c/code\u003e the configured values are ignored. Only the following PFS cipher suites are supported:\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"ulist\"\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003eTLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256\u003c/code\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003eTLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256\u003c/code\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003eTLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\u003c/code\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003eTLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256\u003c/code\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003eTLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\u003c/code\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003eTLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384\u003c/code\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003eTLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256\u003c/code\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003eTLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256\u003c/code\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eDefaults to the last six cipher suites if \u003ccode\u003emin_version\u003c/code\u003e is set to \u003ccode\u003eTLS1.2\u003c/code\u003e and \u003ccode\u003ecipher_suites\u003c/code\u003e is not configured.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\u003cdiv class=\"exampleblock\"\u003e\n\u003cdiv class=\"title\"\u003eExample 26. Example configuration\u003c/div\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"yaml\"\u003e\u003cspan style=\"color: #a6e22e\"\u003ekey_store\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003epath\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e/path/to/keystore.pem\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003epassword\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eVeryInsecure!\u003c/span\u003e\n\u003cspan style=\"color: #a6e22e\"\u003ekey_id\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003efoobar\u003c/span\u003e\n\u003cspan style=\"color: #a6e22e\"\u003emin_version\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eTLS1.2\u003c/span\u003e\n\u003cspan style=\"color: #a6e22e\"\u003ecipher_suites\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n  \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eTLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\u003c/span\u003e\n  \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eTLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect1\"\u003e\n\u003ch2 id=\"_key_id_lookup\"\u003eKey-Id Lookup\u003c/h2\u003e\n\u003cdiv class=\"sectionbody\"\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eWhen heimdall loads a key store, following algorithm is used to get the key id for the key:\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"ulist\"\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eif the PEM entry with the private key has \u003ccode\u003eX-Key-ID\u003c/code\u003e header specified, this value is used as key id\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eOtherwise, if an X.509 certificate is present for the private key, and it has the \u003ccode\u003eSubject Key Identifier\u003c/code\u003e extension set, the hex representation of it is used as key id.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eOtherwise, heimdall calculates the value for the \u003ccode\u003eSubject Key Identifier\u003c/code\u003e according to \u003ca href=\"https://www.ietf.org/rfc/rfc3280.html#section-4.2.1.2\"\u003eRFC 3280, Section 4.2.1.2\u003c/a\u003e and uses hex representation of it as key id.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n","sections":["Configuration","Reference"],"tags":null,"title":"Configuration Types","url":"/docs/configuration/reference/types/"},{"categories":null,"content":" Below you can find possible contents (not exhaustive) for Heimdall’s config.yaml file. Head over to configuration documentation to get detailed explanation.\nserve: decision: host: 127.0.0.1 port: 4468 verbose_errors: true timeout: read: 2s write: 5s idle: 2m cors: allowed_origins: - example.org allowed_methods: - GET - POST allowed_headers: - Authorization exposed_headers: - X-My-Header allow_credentials: true max_age: 1m tls: key_store: path: /path/to/key/store.pem password: VerySecure! trusted_proxies: - 192.168.1.0/24 proxy: host: 127.0.0.1 port: 4469 verbose_errors: false timeout: read: 2s write: 5s idle: 2m cors: allowed_origins: - example.org allowed_methods: - GET - POST allowed_headers: - Authorization exposed_headers: - X-My-Header allow_credentials: true max_age: 1m tls: key_store: path: /path/to/key/store.pem password: VerySecure! key_id: first_entry min_version: TLS1.2 cipher_suites: - TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 - TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 - TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256 - TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256 trusted_proxies: - 192.168.1.0/24 management: host: 127.0.0.1 port: 4457 verbose_errors: false timeout: read: 2s write: 5s idle: 2m cors: allowed_origins: - example.org allowed_methods: - GET - POST allowed_headers: - Authorization exposed_headers: - X-My-Header allow_credentials: true max_age: 1m tls: key_store: path: /path/to/key/store.pem min_version: TLS1.2 log: level: debug format: text tracing: enabled: true span_processor: batch metrics: enabled: true host: 0.0.0.0 port: 9000 metrics_path: /metrics profiling: enabled: false host: 0.0.0.0 port: 9000 signer: name: foobar key_store: path: /opt/heimdall/keystore.pem password: VeryInsecure! key_id: foo rules: mechanisms: authenticators: - id: noop_authenticator type: noop - id: anonymous_authenticator type: anonymous - id: unauthorized_authenticator type: unauthorized - id: foo type: basic_auth config: user_id: bar password: baz allow_fallback_on_error: true - id: kratos_session_authenticator type: generic config: identity_info_endpoint: url: http://127.0.0.1:4433/sessions/whoami retry: max_delay: 300ms give_up_after: 2s authentication_data_source: - cookie: ory_kratos_session subject: attributes: \u0026#34;@this\u0026#34; id: \u0026#34;identity.id\u0026#34; allow_fallback_on_error: true - id: hydra_authenticator type: oauth2_introspection config: introspection_endpoint: url: http://hydra:4445/oauth2/introspect retry: max_delay: 300ms give_up_after: 2s auth: type: basic_auth config: user: foo password: bar token_source: - header: Authorization schema: Bearer - query_parameter: access_token - body_parameter: access_token assertions: issuers: - http://127.0.0.1:4444/ scopes: - foo - bar audience: - bla subject: attributes: \u0026#34;@this\u0026#34; id: \u0026#34;sub\u0026#34; allow_fallback_on_error: true - id: jwt_authenticator type: jwt config: jwks_endpoint: url: http://foo/token method: GET enable_http_cache: true jwt_source: - header: Authorization schema: Bearer - query_parameter: access_token - body_parameter: access_token assertions: audience: - bla scopes: - foo allowed_algorithms: - RSA issuers: - bla subject: attributes: \u0026#34;@this\u0026#34; id: \u0026#34;identity.id\u0026#34; cache_ttl: 5m allow_fallback_on_error: true authorizers: - id: allow_all_authorizer type: allow - id: deny_all_authorizer type: deny - id: remote_authorizer type: remote config: endpoint: url: http://my-authz-system method: POST headers: foo-bar: \u0026#34;{{ .Subject.ID }}\u0026#34; payload: \u0026#34;https://bla.bar\u0026#34; expressions: - expression: | Payload.response == true forward_response_headers_to_upstream: - bla-bar - id: user_is_admin_authz type: cel config: expressions: - expression: \u0026#34;\u0026#39;admin\u0026#39; in Subject.Attributes.groups\u0026#34; contextualizers: - id: subscription_contextualizer type: generic config: endpoint: url: http://foo.bar method: GET headers: bla: bla payload: http://foo - id: profile_data_contextualizer type: generic config: endpoint: url: http://profile headers: foo: bar unifiers: - id: jwt type: jwt config: ttl: 5m claims: \u0026#34;{\u0026#39;user\u0026#39;: {{ quote .Subject.ID }} }\u0026#34; - id: bla type: header config: headers: foo-bar: bla - id: blabla type: cookie config: cookies: foo-bar: \u0026#39;{{ .Subject.ID }}\u0026#39; error_handlers: - id: default type: default - id: authenticate_with_kratos type: redirect config: to: http://127.0.0.1:4433/self-service/login/browser?return_to={{ .Request.URL | urlenc }} when: - error: - type: authentication_error raised_by: kratos_session_authenticator - type: authorization_error request_headers: Accept: - \u0026#39;*/*\u0026#39; default: methods: - GET - POST execute: - authenticator: anonymous_authenticator - unifier: jwt on_error: - error_handler: authenticate_with_kratos providers: file_system: src: test_rules.yaml watch: true http_endpoint: watch_interval: 5m endpoints: - url: http://foo.bar/ruleset1 expected_path_prefix: /foo/bar enable_http_cache: false - url: http://foo.bar/ruleset2 retry: give_up_after: 5s max_delay: 250ms auth: type: api_key config: name: X-Api-Key value: super-secret in: header header: X-Customer-Header: Some Value cloud_blob: watch_interval: 1m buckets: - url: gs://my-bucket prefix: service1 rule_path_match_prefix: /service1 - url: azblob://my-bucket prefix: service2 rule_path_match_prefix: /service2 - url: s3://my-bucket/my-rule-set kubernetes: auth_class: foo ","description":"","html_content":"\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eBelow you can find possible contents (not exhaustive) for Heimdall’s \u003ccode\u003econfig.yaml\u003c/code\u003e file. Head over to configuration documentation to get detailed explanation.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"rouge highlight\" style=\"color: #ffffff;background-color: #272822\"\u003e\u003ccode data-lang=\"yaml\"\u003e\u003cspan style=\"color: #a6e22e\"\u003eserve\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003edecision\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003ehost\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e127.0.0.1\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003eport\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #ae81ff\"\u003e4468\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003everbose_errors\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #66d9ef\"\u003etrue\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003etimeout\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003eread\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e2s\u003c/span\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003ewrite\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e5s\u003c/span\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003eidle\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e2m\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003ecors\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003eallowed_origins\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n        \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eexample.org\u003c/span\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003eallowed_methods\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n        \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eGET\u003c/span\u003e\n        \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ePOST\u003c/span\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003eallowed_headers\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n        \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eAuthorization\u003c/span\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003eexposed_headers\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n        \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eX-My-Header\u003c/span\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003eallow_credentials\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #66d9ef\"\u003etrue\u003c/span\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003emax_age\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e1m\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003etls\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003ekey_store\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n        \u003cspan style=\"color: #a6e22e\"\u003epath\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e/path/to/key/store.pem\u003c/span\u003e\n        \u003cspan style=\"color: #a6e22e\"\u003epassword\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eVerySecure!\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003etrusted_proxies\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n      \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e192.168.1.0/24\u003c/span\u003e\n\n  \u003cspan style=\"color: #a6e22e\"\u003eproxy\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003ehost\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e127.0.0.1\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003eport\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #ae81ff\"\u003e4469\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003everbose_errors\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #66d9ef\"\u003efalse\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003etimeout\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003eread\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e2s\u003c/span\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003ewrite\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e5s\u003c/span\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003eidle\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e2m\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003ecors\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003eallowed_origins\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n        \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eexample.org\u003c/span\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003eallowed_methods\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n        \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eGET\u003c/span\u003e\n        \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ePOST\u003c/span\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003eallowed_headers\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n        \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eAuthorization\u003c/span\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003eexposed_headers\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n        \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eX-My-Header\u003c/span\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003eallow_credentials\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #66d9ef\"\u003etrue\u003c/span\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003emax_age\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e1m\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003etls\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003ekey_store\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n        \u003cspan style=\"color: #a6e22e\"\u003epath\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e/path/to/key/store.pem\u003c/span\u003e\n        \u003cspan style=\"color: #a6e22e\"\u003epassword\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eVerySecure!\u003c/span\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003ekey_id\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003efirst_entry\u003c/span\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003emin_version\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eTLS1.2\u003c/span\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003ecipher_suites\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n        \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eTLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\u003c/span\u003e\n        \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eTLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384\u003c/span\u003e\n        \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eTLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256\u003c/span\u003e\n        \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eTLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003etrusted_proxies\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n      \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e192.168.1.0/24\u003c/span\u003e\n\n  \u003cspan style=\"color: #a6e22e\"\u003emanagement\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003ehost\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e127.0.0.1\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003eport\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #ae81ff\"\u003e4457\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003everbose_errors\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #66d9ef\"\u003efalse\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003etimeout\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003eread\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e2s\u003c/span\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003ewrite\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e5s\u003c/span\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003eidle\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e2m\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003ecors\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003eallowed_origins\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n        \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eexample.org\u003c/span\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003eallowed_methods\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n        \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eGET\u003c/span\u003e\n        \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ePOST\u003c/span\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003eallowed_headers\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n        \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eAuthorization\u003c/span\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003eexposed_headers\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n        \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eX-My-Header\u003c/span\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003eallow_credentials\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #66d9ef\"\u003etrue\u003c/span\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003emax_age\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e1m\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003etls\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003ekey_store\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n        \u003cspan style=\"color: #a6e22e\"\u003epath\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e/path/to/key/store.pem\u003c/span\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003emin_version\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eTLS1.2\u003c/span\u003e\n\n\u003cspan style=\"color: #a6e22e\"\u003elog\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003elevel\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003edebug\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003eformat\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003etext\u003c/span\u003e\n\n\u003cspan style=\"color: #a6e22e\"\u003etracing\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003eenabled\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #66d9ef\"\u003etrue\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003espan_processor\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ebatch\u003c/span\u003e\n\n\u003cspan style=\"color: #a6e22e\"\u003emetrics\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003eenabled\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #66d9ef\"\u003etrue\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003ehost\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e0.0.0.0\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003eport\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #ae81ff\"\u003e9000\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003emetrics_path\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e/metrics\u003c/span\u003e\n\n\u003cspan style=\"color: #a6e22e\"\u003eprofiling\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003eenabled\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #66d9ef\"\u003efalse\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003ehost\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e0.0.0.0\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003eport\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #ae81ff\"\u003e9000\u003c/span\u003e\n\n\u003cspan style=\"color: #a6e22e\"\u003esigner\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003ename\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003efoobar\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003ekey_store\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003epath\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e/opt/heimdall/keystore.pem\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003epassword\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eVeryInsecure!\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003ekey_id\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003efoo\u003c/span\u003e\n\n\u003cspan style=\"color: #a6e22e\"\u003erules\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n  \u003cspan style=\"color: #a6e22e\"\u003emechanisms\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003eauthenticators\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n    \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003eid\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003enoop_authenticator\u003c/span\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003etype\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003enoop\u003c/span\u003e\n    \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003eid\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eanonymous_authenticator\u003c/span\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003etype\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eanonymous\u003c/span\u003e\n    \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003eid\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eunauthorized_authenticator\u003c/span\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003etype\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eunauthorized\u003c/span\u003e\n    \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003eid\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003efoo\u003c/span\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003etype\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ebasic_auth\u003c/span\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003econfig\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n        \u003cspan style=\"color: #a6e22e\"\u003euser_id\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ebar\u003c/span\u003e\n        \u003cspan style=\"color: #a6e22e\"\u003epassword\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ebaz\u003c/span\u003e\n        \u003cspan style=\"color: #a6e22e\"\u003eallow_fallback_on_error\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #66d9ef\"\u003etrue\u003c/span\u003e\n    \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003eid\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ekratos_session_authenticator\u003c/span\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003etype\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003egeneric\u003c/span\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003econfig\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n        \u003cspan style=\"color: #a6e22e\"\u003eidentity_info_endpoint\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n          \u003cspan style=\"color: #a6e22e\"\u003eurl\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ehttp://127.0.0.1:4433/sessions/whoami\u003c/span\u003e\n          \u003cspan style=\"color: #a6e22e\"\u003eretry\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n            \u003cspan style=\"color: #a6e22e\"\u003emax_delay\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e300ms\u003c/span\u003e\n            \u003cspan style=\"color: #a6e22e\"\u003egive_up_after\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e2s\u003c/span\u003e\n        \u003cspan style=\"color: #a6e22e\"\u003eauthentication_data_source\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n          \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003ecookie\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eory_kratos_session\u003c/span\u003e\n        \u003cspan style=\"color: #a6e22e\"\u003esubject\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n          \u003cspan style=\"color: #a6e22e\"\u003eattributes\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e@this\u0026#34;\u003c/span\u003e\n          \u003cspan style=\"color: #a6e22e\"\u003eid\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003eidentity.id\u0026#34;\u003c/span\u003e\n        \u003cspan style=\"color: #a6e22e\"\u003eallow_fallback_on_error\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #66d9ef\"\u003etrue\u003c/span\u003e\n    \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003eid\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ehydra_authenticator\u003c/span\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003etype\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eoauth2_introspection\u003c/span\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003econfig\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n        \u003cspan style=\"color: #a6e22e\"\u003eintrospection_endpoint\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n          \u003cspan style=\"color: #a6e22e\"\u003eurl\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ehttp://hydra:4445/oauth2/introspect\u003c/span\u003e\n          \u003cspan style=\"color: #a6e22e\"\u003eretry\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n            \u003cspan style=\"color: #a6e22e\"\u003emax_delay\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e300ms\u003c/span\u003e\n            \u003cspan style=\"color: #a6e22e\"\u003egive_up_after\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e2s\u003c/span\u003e\n          \u003cspan style=\"color: #a6e22e\"\u003eauth\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n            \u003cspan style=\"color: #a6e22e\"\u003etype\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ebasic_auth\u003c/span\u003e\n            \u003cspan style=\"color: #a6e22e\"\u003econfig\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n              \u003cspan style=\"color: #a6e22e\"\u003euser\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003efoo\u003c/span\u003e\n              \u003cspan style=\"color: #a6e22e\"\u003epassword\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ebar\u003c/span\u003e\n        \u003cspan style=\"color: #a6e22e\"\u003etoken_source\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n          \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003eheader\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eAuthorization\u003c/span\u003e\n            \u003cspan style=\"color: #a6e22e\"\u003eschema\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eBearer\u003c/span\u003e\n          \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003equery_parameter\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eaccess_token\u003c/span\u003e\n          \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003ebody_parameter\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eaccess_token\u003c/span\u003e\n        \u003cspan style=\"color: #a6e22e\"\u003eassertions\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n          \u003cspan style=\"color: #a6e22e\"\u003eissuers\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n            \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ehttp://127.0.0.1:4444/\u003c/span\u003e\n          \u003cspan style=\"color: #a6e22e\"\u003escopes\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n            \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003efoo\u003c/span\u003e\n            \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ebar\u003c/span\u003e\n          \u003cspan style=\"color: #a6e22e\"\u003eaudience\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n            \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ebla\u003c/span\u003e\n        \u003cspan style=\"color: #a6e22e\"\u003esubject\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n          \u003cspan style=\"color: #a6e22e\"\u003eattributes\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e@this\u0026#34;\u003c/span\u003e\n          \u003cspan style=\"color: #a6e22e\"\u003eid\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003esub\u0026#34;\u003c/span\u003e\n        \u003cspan style=\"color: #a6e22e\"\u003eallow_fallback_on_error\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #66d9ef\"\u003etrue\u003c/span\u003e\n    \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003eid\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ejwt_authenticator\u003c/span\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003etype\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ejwt\u003c/span\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003econfig\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n        \u003cspan style=\"color: #a6e22e\"\u003ejwks_endpoint\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n          \u003cspan style=\"color: #a6e22e\"\u003eurl\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ehttp://foo/token\u003c/span\u003e\n          \u003cspan style=\"color: #a6e22e\"\u003emethod\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eGET\u003c/span\u003e\n          \u003cspan style=\"color: #a6e22e\"\u003eenable_http_cache\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #66d9ef\"\u003etrue\u003c/span\u003e\n        \u003cspan style=\"color: #a6e22e\"\u003ejwt_source\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n          \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003eheader\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eAuthorization\u003c/span\u003e\n            \u003cspan style=\"color: #a6e22e\"\u003eschema\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eBearer\u003c/span\u003e\n          \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003equery_parameter\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eaccess_token\u003c/span\u003e\n          \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003ebody_parameter\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eaccess_token\u003c/span\u003e\n        \u003cspan style=\"color: #a6e22e\"\u003eassertions\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n          \u003cspan style=\"color: #a6e22e\"\u003eaudience\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n            \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ebla\u003c/span\u003e\n          \u003cspan style=\"color: #a6e22e\"\u003escopes\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n            \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003efoo\u003c/span\u003e\n          \u003cspan style=\"color: #a6e22e\"\u003eallowed_algorithms\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n            \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eRSA\u003c/span\u003e\n          \u003cspan style=\"color: #a6e22e\"\u003eissuers\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n            \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ebla\u003c/span\u003e\n        \u003cspan style=\"color: #a6e22e\"\u003esubject\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n          \u003cspan style=\"color: #a6e22e\"\u003eattributes\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e@this\u0026#34;\u003c/span\u003e\n          \u003cspan style=\"color: #a6e22e\"\u003eid\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003eidentity.id\u0026#34;\u003c/span\u003e\n        \u003cspan style=\"color: #a6e22e\"\u003ecache_ttl\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e5m\u003c/span\u003e\n        \u003cspan style=\"color: #a6e22e\"\u003eallow_fallback_on_error\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #66d9ef\"\u003etrue\u003c/span\u003e\n\n    \u003cspan style=\"color: #a6e22e\"\u003eauthorizers\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n    \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003eid\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eallow_all_authorizer\u003c/span\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003etype\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eallow\u003c/span\u003e\n    \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003eid\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003edeny_all_authorizer\u003c/span\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003etype\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003edeny\u003c/span\u003e\n    \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003eid\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eremote_authorizer\u003c/span\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003etype\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eremote\u003c/span\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003econfig\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n        \u003cspan style=\"color: #a6e22e\"\u003eendpoint\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n          \u003cspan style=\"color: #a6e22e\"\u003eurl\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ehttp://my-authz-system\u003c/span\u003e\n          \u003cspan style=\"color: #a6e22e\"\u003emethod\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ePOST\u003c/span\u003e\n          \u003cspan style=\"color: #a6e22e\"\u003eheaders\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n            \u003cspan style=\"color: #a6e22e\"\u003efoo-bar\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e{{\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e.Subject.ID\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e}}\u0026#34;\u003c/span\u003e\n        \u003cspan style=\"color: #a6e22e\"\u003epayload\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003ehttps://bla.bar\u0026#34;\u003c/span\u003e\n        \u003cspan style=\"color: #a6e22e\"\u003eexpressions\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n          \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003eexpression\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e|\u003c/span\u003e\n              \u003cspan style=\"color: #e6db74\"\u003ePayload.response == true\u003c/span\u003e\n        \u003cspan style=\"color: #a6e22e\"\u003eforward_response_headers_to_upstream\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n          \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ebla-bar\u003c/span\u003e\n    \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003eid\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003euser_is_admin_authz\u003c/span\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003etype\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ecel\u003c/span\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003econfig\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n        \u003cspan style=\"color: #a6e22e\"\u003eexpressions\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n          \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003eexpression\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e\u0026#39;admin\u0026#39;\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003ein\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003eSubject.Attributes.groups\u0026#34;\u003c/span\u003e\n\n    \u003cspan style=\"color: #a6e22e\"\u003econtextualizers\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n    \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003eid\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003esubscription_contextualizer\u003c/span\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003etype\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003egeneric\u003c/span\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003econfig\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n        \u003cspan style=\"color: #a6e22e\"\u003eendpoint\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n          \u003cspan style=\"color: #a6e22e\"\u003eurl\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ehttp://foo.bar\u003c/span\u003e\n          \u003cspan style=\"color: #a6e22e\"\u003emethod\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eGET\u003c/span\u003e\n          \u003cspan style=\"color: #a6e22e\"\u003eheaders\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n            \u003cspan style=\"color: #a6e22e\"\u003ebla\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ebla\u003c/span\u003e\n        \u003cspan style=\"color: #a6e22e\"\u003epayload\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ehttp://foo\u003c/span\u003e\n    \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003eid\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eprofile_data_contextualizer\u003c/span\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003etype\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003egeneric\u003c/span\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003econfig\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n        \u003cspan style=\"color: #a6e22e\"\u003eendpoint\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n          \u003cspan style=\"color: #a6e22e\"\u003eurl\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ehttp://profile\u003c/span\u003e\n          \u003cspan style=\"color: #a6e22e\"\u003eheaders\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n            \u003cspan style=\"color: #a6e22e\"\u003efoo\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ebar\u003c/span\u003e\n\n    \u003cspan style=\"color: #a6e22e\"\u003eunifiers\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n    \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003eid\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ejwt\u003c/span\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003etype\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ejwt\u003c/span\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003econfig\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n        \u003cspan style=\"color: #a6e22e\"\u003ettl\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e5m\u003c/span\u003e\n        \u003cspan style=\"color: #a6e22e\"\u003eclaims\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e{\u0026#39;user\u0026#39;:\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e{{\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003equote\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e.Subject.ID\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e}}\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e}\u0026#34;\u003c/span\u003e\n    \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003eid\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ebla\u003c/span\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003etype\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eheader\u003c/span\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003econfig\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n        \u003cspan style=\"color: #a6e22e\"\u003eheaders\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n          \u003cspan style=\"color: #a6e22e\"\u003efoo-bar\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ebla\u003c/span\u003e\n    \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003eid\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eblabla\u003c/span\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003etype\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ecookie\u003c/span\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003econfig\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n        \u003cspan style=\"color: #a6e22e\"\u003ecookies\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n          \u003cspan style=\"color: #a6e22e\"\u003efoo-bar\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e\u0026#39;\u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e{{\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e.Subject.ID\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e \u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e}}\u0026#39;\u003c/span\u003e\n\n    \u003cspan style=\"color: #a6e22e\"\u003eerror_handlers\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n    \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003eid\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003edefault\u003c/span\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003etype\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003edefault\u003c/span\u003e\n    \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003eid\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eauthenticate_with_kratos\u003c/span\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003etype\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eredirect\u003c/span\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003econfig\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n        \u003cspan style=\"color: #a6e22e\"\u003eto\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ehttp://127.0.0.1:4433/self-service/login/browser?return_to={{ .Request.URL | urlenc }}\u003c/span\u003e\n        \u003cspan style=\"color: #a6e22e\"\u003ewhen\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n          \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003eerror\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n            \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003etype\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eauthentication_error\u003c/span\u003e\n              \u003cspan style=\"color: #a6e22e\"\u003eraised_by\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ekratos_session_authenticator\u003c/span\u003e\n            \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003etype\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eauthorization_error\u003c/span\u003e\n            \u003cspan style=\"color: #a6e22e\"\u003erequest_headers\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n              \u003cspan style=\"color: #a6e22e\"\u003eAccept\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n              \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e\u0026#39;\u003c/span\u003e\u003cspan style=\"color: #e6db74\"\u003e*/*\u0026#39;\u003c/span\u003e\n\n  \u003cspan style=\"color: #a6e22e\"\u003edefault\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003emethods\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n      \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eGET\u003c/span\u003e\n      \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ePOST\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003eexecute\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n      \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003eauthenticator\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eanonymous_authenticator\u003c/span\u003e\n      \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003eunifier\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ejwt\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003eon_error\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n      \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003eerror_handler\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eauthenticate_with_kratos\u003c/span\u003e\n\n  \u003cspan style=\"color: #a6e22e\"\u003eproviders\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n    \u003cspan style=\"color: #a6e22e\"\u003efile_system\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003esrc\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003etest_rules.yaml\u003c/span\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003ewatch\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #66d9ef\"\u003etrue\u003c/span\u003e\n\n    \u003cspan style=\"color: #a6e22e\"\u003ehttp_endpoint\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003ewatch_interval\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e5m\u003c/span\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003eendpoints\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n        \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003eurl\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ehttp://foo.bar/ruleset1\u003c/span\u003e\n          \u003cspan style=\"color: #a6e22e\"\u003eexpected_path_prefix\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e/foo/bar\u003c/span\u003e\n          \u003cspan style=\"color: #a6e22e\"\u003eenable_http_cache\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #66d9ef\"\u003efalse\u003c/span\u003e\n        \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003eurl\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003ehttp://foo.bar/ruleset2\u003c/span\u003e\n          \u003cspan style=\"color: #a6e22e\"\u003eretry\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n            \u003cspan style=\"color: #a6e22e\"\u003egive_up_after\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e5s\u003c/span\u003e\n            \u003cspan style=\"color: #a6e22e\"\u003emax_delay\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e250ms\u003c/span\u003e\n          \u003cspan style=\"color: #a6e22e\"\u003eauth\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n            \u003cspan style=\"color: #a6e22e\"\u003etype\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eapi_key\u003c/span\u003e\n            \u003cspan style=\"color: #a6e22e\"\u003econfig\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n              \u003cspan style=\"color: #a6e22e\"\u003ename\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eX-Api-Key\u003c/span\u003e\n              \u003cspan style=\"color: #a6e22e\"\u003evalue\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003esuper-secret\u003c/span\u003e\n              \u003cspan style=\"color: #a6e22e\"\u003ein\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eheader\u003c/span\u003e\n          \u003cspan style=\"color: #a6e22e\"\u003eheader\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n            \u003cspan style=\"color: #a6e22e\"\u003eX-Customer-Header\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eSome Value\u003c/span\u003e\n\n    \u003cspan style=\"color: #a6e22e\"\u003ecloud_blob\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003ewatch_interval\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e1m\u003c/span\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003ebuckets\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n        \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003eurl\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003egs://my-bucket\u003c/span\u003e\n          \u003cspan style=\"color: #a6e22e\"\u003eprefix\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eservice1\u003c/span\u003e\n          \u003cspan style=\"color: #a6e22e\"\u003erule_path_match_prefix\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e/service1\u003c/span\u003e\n        \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003eurl\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eazblob://my-bucket\u003c/span\u003e\n          \u003cspan style=\"color: #a6e22e\"\u003eprefix\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003eservice2\u003c/span\u003e\n          \u003cspan style=\"color: #a6e22e\"\u003erule_path_match_prefix\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003e/service2\u003c/span\u003e\n        \u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #a6e22e\"\u003eurl\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003es3://my-bucket/my-rule-set\u003c/span\u003e\n\n    \u003cspan style=\"color: #a6e22e\"\u003ekubernetes\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e\n      \u003cspan style=\"color: #a6e22e\"\u003eauth_class\u003c/span\u003e\u003cspan style=\"color: #ffffff;background-color: #272822\"\u003e:\u003c/span\u003e \u003cspan style=\"color: #e6db74\"\u003efoo\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n","sections":["Configuration","Reference"],"tags":null,"title":"Static Configuration Reference","url":"/docs/configuration/reference/reference/"}]
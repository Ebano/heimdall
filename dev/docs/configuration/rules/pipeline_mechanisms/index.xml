<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Pipeline Mechanisms on Heimdall</title><link>https://dadrus.github.io/docs/configuration/rules/pipeline_mechanisms/</link><description>Recent content in Pipeline Mechanisms on Heimdall</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 09 Jun 2022 18:56:56 +0200</lastBuildDate><atom:link href="https://dadrus.github.io/docs/configuration/rules/pipeline_mechanisms/index.xml" rel="self" type="application/rss+xml"/><item><title>Mechanisms Overview</title><link>https://dadrus.github.io/docs/configuration/rules/pipeline_mechanisms/overview/</link><pubDate>Thu, 09 Jun 2022 18:56:56 +0200</pubDate><guid>https://dadrus.github.io/docs/configuration/rules/pipeline_mechanisms/overview/</guid><description>All mechanisms supported by heimdall fall into following categories:
Authenticators, which inspect HTTP requests for presence of authentication objects, like e.g. the presence of a specific cookie. If such objects exist, authenticators verify the related authentication status and obtain information about the corresponding subject. A subject, could be a user who tries to use particular functionality of the upstream service, a machine (if you have machine-2-machine interaction), or something different.</description></item><item><title>Authenticators</title><link>https://dadrus.github.io/docs/configuration/rules/pipeline_mechanisms/authenticators/</link><pubDate>Thu, 09 Jun 2022 18:56:56 +0200</pubDate><guid>https://dadrus.github.io/docs/configuration/rules/pipeline_mechanisms/authenticators/</guid><description>Authenticators inspect HTTP requests for presence of authentication objects, like e.g. the presence of a specific cookie. If such objects exist, authenticators verify the related authentication status and obtain information about the corresponding subject. A subject, could be a user, trying to use particular functionality of the upstream service, a machine (if you have machine-2-machine interaction), or something different. Authenticators ensure the subject is authenticated and the information available about it is valid.</description></item><item><title>Authorizers</title><link>https://dadrus.github.io/docs/configuration/rules/pipeline_mechanisms/authorizers/</link><pubDate>Thu, 09 Jun 2022 18:57:03 +0200</pubDate><guid>https://dadrus.github.io/docs/configuration/rules/pipeline_mechanisms/authorizers/</guid><description>Authorizers ensure that the Subject obtained via an authenticator has the required permissions to submit the given HTTP request and thus to execute the corresponding logic in the upstream service. E.g. a specific endpoint of the upstream service might only be accessible to a &amp;#34;user&amp;#34; from the &amp;#34;admin&amp;#34; group, or to an HTTP request if a specific HTTP header is set.
Authorizer Types The following sections describe the available authorizer types in more detail.</description></item><item><title>Hydrators</title><link>https://dadrus.github.io/docs/configuration/rules/pipeline_mechanisms/hydrators/</link><pubDate>Thu, 09 Jun 2022 18:57:10 +0200</pubDate><guid>https://dadrus.github.io/docs/configuration/rules/pipeline_mechanisms/hydrators/</guid><description>Hydrators enrich the information about the Subject obtained via an authenticator mechanism with further information, required by either the endpoint of the upstream service itself or an authorizer mechanism. This can be handy if the actual authentication system doesnâ€™t have all information about the subject (which is usually the case in microservice architectures), or if dynamic information about the subject, like the current location based on the IP address, is required.</description></item><item><title>Mutators</title><link>https://dadrus.github.io/docs/configuration/rules/pipeline_mechanisms/mutators/</link><pubDate>Thu, 09 Jun 2022 18:57:16 +0200</pubDate><guid>https://dadrus.github.io/docs/configuration/rules/pipeline_mechanisms/mutators/</guid><description>Mutators finalize the successful execution of the pipeline and transform the available information about the Subject into a format expected, respectively required by the upstream service. This ranges from adding a query parameter, to a structured JWT in a specific header.
Mutator Types The following sections describe the available mutator types in more detail.
Noop As the name implies, this mutator does nothing. As mutators are the last step in a rule pipeline and transform the available Subject information into a format required by the upstream service, the usage of this mutator makes only sense in combination with the Noop Authenticator, e.</description></item><item><title>Error Handlers</title><link>https://dadrus.github.io/docs/configuration/rules/pipeline_mechanisms/error_handlers/</link><pubDate>Thu, 09 Jun 2022 18:57:29 +0200</pubDate><guid>https://dadrus.github.io/docs/configuration/rules/pipeline_mechanisms/error_handlers/</guid><description>Error Handlers are responsible for execution of logic if any of the authenticators, authorizers, hydrators or mutators fails. The error handler mechanisms range from a simple error response to the client which sent the request to sophisticated ones, supporting complex logic and redirects.
Error Handler Types The following sections describe the available error handler types in more detail.
Default This mechanism is always there and is executed if no other error handler mechanism is responsible for the error.</description></item></channel></rss>